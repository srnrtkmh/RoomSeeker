/**************************************************************************************************/
/*                                                                                                */
/* FILE : basic_matrix.cpp                                                                        */
/* MEMO : Class to use matrix(This file is automatically generated by generate_basic_matrix.exe)  */
/*                                                                                                */
/**************************************************************************************************/

#include <stdio.h>
#include <math.h>
#include <iostream>
using namespace std;
#include "basic_matrix.h"

//================================================================================================//
// 2 x 1 vector class                                                                             //
//================================================================================================//
// Constructor without argumentation
vec2::vec2()
{
	int i;
	for(i=0; i<2; i++) x[i] = 0.0;
}

// Constructor with argumentation
vec2::vec2(double x0, double x1)
{
	x[0] = x0; x[1] = x1; 
}

// Display each element with printf
void vec2::disp(void)
{
	int i;
	for(i=0; i<n; i++) printf("%.10lf, ", x[i]);
	printf("\n");
}

//================================================================================================//
// 3 x 1 vector class                                                                             //
//================================================================================================//
// Constructor without argumentation
vec3::vec3()
{
	int i;
	for(i=0; i<3; i++) x[i] = 0.0;
}

// Constructor with argumentation
vec3::vec3(double x0, double x1, double x2)
{
	x[0] = x0; x[1] = x1; x[2] = x2; 
}

// Display each element with printf
void vec3::disp(void)
{
	int i;
	for(i=0; i<n; i++) printf("%.10lf, ", x[i]);
	printf("\n");
}

//================================================================================================//
// 4 x 1 vector class                                                                             //
//================================================================================================//
// Constructor without argumentation
vec4::vec4()
{
	int i;
	for(i=0; i<4; i++) x[i] = 0.0;
}

// Constructor with argumentation
vec4::vec4(double x0, double x1, double x2, double x3)
{
	x[0] = x0; x[1] = x1; x[2] = x2; x[3] = x3; 
}

// Display each element with printf
void vec4::disp(void)
{
	int i;
	for(i=0; i<n; i++) printf("%.10lf, ", x[i]);
	printf("\n");
}

//================================================================================================//
// 5 x 1 vector class                                                                             //
//================================================================================================//
// Constructor without argumentation
vec5::vec5()
{
	int i;
	for(i=0; i<5; i++) x[i] = 0.0;
}

// Constructor with argumentation
vec5::vec5(double x0, double x1, double x2, double x3, double x4)
{
	x[0] = x0; x[1] = x1; x[2] = x2; x[3] = x3; x[4] = x4; 
}

// Display each element with printf
void vec5::disp(void)
{
	int i;
	for(i=0; i<n; i++) printf("%.10lf, ", x[i]);
	printf("\n");
}

//================================================================================================//
// 6 x 1 vector class                                                                             //
//================================================================================================//
// Constructor without argumentation
vec6::vec6()
{
	int i;
	for(i=0; i<6; i++) x[i] = 0.0;
}

// Constructor with argumentation
vec6::vec6(double x0, double x1, double x2, double x3, double x4, double x5)
{
	x[0] = x0; x[1] = x1; x[2] = x2; x[3] = x3; x[4] = x4; x[5] = x5; 
}

// Display each element with printf
void vec6::disp(void)
{
	int i;
	for(i=0; i<n; i++) printf("%.10lf, ", x[i]);
	printf("\n");
}

//================================================================================================//
// 7 x 1 vector class                                                                             //
//================================================================================================//
// Constructor without argumentation
vec7::vec7()
{
	int i;
	for(i=0; i<7; i++) x[i] = 0.0;
}

// Constructor with argumentation
vec7::vec7(double x0, double x1, double x2, double x3, double x4, double x5, double x6)
{
	x[0] = x0; x[1] = x1; x[2] = x2; x[3] = x3; x[4] = x4; x[5] = x5; x[6] = x6; 
}

// Display each element with printf
void vec7::disp(void)
{
	int i;
	for(i=0; i<n; i++) printf("%.10lf, ", x[i]);
	printf("\n");
}

//================================================================================================//
// 8 x 1 vector class                                                                             //
//================================================================================================//
// Constructor without argumentation
vec8::vec8()
{
	int i;
	for(i=0; i<8; i++) x[i] = 0.0;
}

// Constructor with argumentation
vec8::vec8(double x0, double x1, double x2, double x3, double x4, double x5, double x6, double x7)
{
	x[0] = x0; x[1] = x1; x[2] = x2; x[3] = x3; x[4] = x4; x[5] = x5; x[6] = x6; x[7] = x7; 
}

// Display each element with printf
void vec8::disp(void)
{
	int i;
	for(i=0; i<n; i++) printf("%.10lf, ", x[i]);
	printf("\n");
}

//================================================================================================//
// 9 x 1 vector class                                                                             //
//================================================================================================//
// Constructor without argumentation
vec9::vec9()
{
	int i;
	for(i=0; i<9; i++) x[i] = 0.0;
}

// Constructor with argumentation
vec9::vec9(double x0, double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8)
{
	x[0] = x0; x[1] = x1; x[2] = x2; x[3] = x3; x[4] = x4; x[5] = x5; x[6] = x6; x[7] = x7; x[8] = x8; 
}

// Display each element with printf
void vec9::disp(void)
{
	int i;
	for(i=0; i<n; i++) printf("%.10lf, ", x[i]);
	printf("\n");
}


//================================================================================================//
// 2 x 2 matrix class                                                                           //
//================================================================================================//
// Display each element with printf
void mat22::disp(void)
{
	int i, j;
	for(i=0; i<r; i++){
		for(j=0; j<c; j++) printf("%.10lf, ", A[i][j]);
		printf("\n");
	}
	printf("\n");
}

// Calculate determinant of 2 x 2 matrix
double mat22::det(void)
{
	int i, j, k, max_row, sgn = 1;
	double ret, tmp;
	double A_tmp[r][r];

	// Copy source matrix
	for(i=0; i<r; i++){
		for(j=0; j<r; j++){
			A_tmp[i][j] = A[i][j];
		}
	}

	// Make A_tmp upper triangular matrix
	for(i=0; i<r-1; i++){
		// Search the biggest element among the "i"th column elements
		for(max_row=i, j=i+1; j<r; j++){
			if(fabs(A_tmp[j][i]) > fabs(A_tmp[max_row][i])) max_row = j;
		}
		// Exchange "i"th row and "max_row"th row if "i" is not equal to the max_row
		if(i != max_row){
			for(j=0; j<r; j++){
				tmp = A_tmp[i][j];
				A_tmp[i][j] = A_tmp[max_row][j];
				A_tmp[max_row][j] = tmp;
			}
			if(sgn == 1) sgn = -1;
			else         sgn = 1;
		}
		// Eliminate "i"th column element of the source matrix except the diagonal one
		for(j=i+1; j<r; j++){
			tmp = A_tmp[j][i]/A_tmp[i][i];
			for(k=i; k<r; k++) A_tmp[j][k] -= A_tmp[i][k]*tmp;
		}
	}
	for(i=0, ret=1.0; i<r; i++) ret*=A_tmp[i][i];
	return((double)sgn*ret);
}

// Calculate inverse matrix
mat22 mat22::inv(void)
{
	int i, j, k, max_row;
	double inv_diag, tmp;
	double A_copy[r][r];
	mat22 ans;

	// Copy source matrix
	for(i=0; i<r; i++) for(j=0; j<r; j++) A_copy[i][j] = A[i][j];

	// Initialize target matrix with unit matrix
	for(i=0; i<r; i++) for(j=0; j<r; j++) ans.A[i][j] = 0.0;
	for(i=0; i<r; i++) ans.A[i][i] = 1.0;

	// Gaussian Elimination
	for(i=0; i<r; i++){
		// Search the biggest element among the "i"th column elements
		for(max_row=i, j=i+1; j<r; j++) if(fabs(A_copy[j][i]) > fabs(A_copy[max_row][i])) max_row = j;

		// Exchange "i"th row and "max_row"th row if "i" is not equal to the max_row
		if(i != max_row){
			for(j=0; j<r; j++){
				tmp = A_copy[i][j];  A_copy[i][j] = A_copy[max_row][j];  A_copy[max_row][j] = tmp;
				tmp = ans.A[i][j];   ans.A[i][j] = ans.A[max_row][j];    ans.A[max_row][j] = tmp;
			}
		}

		// Multiply the inverse of the diagonal element to each elemnt of the "i" row
		// to make the diagonal element of the source matrix to 1
		inv_diag = 1.0/A_copy[i][i];
		for(j=0; j<r; j++){
			A_copy[i][j] *= inv_diag;
			ans.A[i][j] *= inv_diag;
		}

		// Eliminate "i"th column element of the source matrix except the diagonal one
		for(j=0; j<r; j++){
			if(j != i){
				tmp = A_copy[j][i];
				for(k=0; k<r; k++){
					A_copy[j][k] -= tmp * A_copy[i][k];
					ans.A[j][k]  -= tmp * ans.A[i][k];
				}
			}
		}
	}
return(ans);
}

//================================================================================================//
// 2 x 3 matrix class                                                                           //
//================================================================================================//
// Display each element with printf
void mat23::disp(void)
{
	int i, j;
	for(i=0; i<r; i++){
		for(j=0; j<c; j++) printf("%.10lf, ", A[i][j]);
		printf("\n");
	}
	printf("\n");
}

//================================================================================================//
// 2 x 4 matrix class                                                                           //
//================================================================================================//
// Display each element with printf
void mat24::disp(void)
{
	int i, j;
	for(i=0; i<r; i++){
		for(j=0; j<c; j++) printf("%.10lf, ", A[i][j]);
		printf("\n");
	}
	printf("\n");
}

//================================================================================================//
// 2 x 5 matrix class                                                                           //
//================================================================================================//
// Display each element with printf
void mat25::disp(void)
{
	int i, j;
	for(i=0; i<r; i++){
		for(j=0; j<c; j++) printf("%.10lf, ", A[i][j]);
		printf("\n");
	}
	printf("\n");
}

//================================================================================================//
// 2 x 6 matrix class                                                                           //
//================================================================================================//
// Display each element with printf
void mat26::disp(void)
{
	int i, j;
	for(i=0; i<r; i++){
		for(j=0; j<c; j++) printf("%.10lf, ", A[i][j]);
		printf("\n");
	}
	printf("\n");
}

//================================================================================================//
// 2 x 7 matrix class                                                                           //
//================================================================================================//
// Display each element with printf
void mat27::disp(void)
{
	int i, j;
	for(i=0; i<r; i++){
		for(j=0; j<c; j++) printf("%.10lf, ", A[i][j]);
		printf("\n");
	}
	printf("\n");
}

//================================================================================================//
// 2 x 8 matrix class                                                                           //
//================================================================================================//
// Display each element with printf
void mat28::disp(void)
{
	int i, j;
	for(i=0; i<r; i++){
		for(j=0; j<c; j++) printf("%.10lf, ", A[i][j]);
		printf("\n");
	}
	printf("\n");
}

//================================================================================================//
// 2 x 9 matrix class                                                                           //
//================================================================================================//
// Display each element with printf
void mat29::disp(void)
{
	int i, j;
	for(i=0; i<r; i++){
		for(j=0; j<c; j++) printf("%.10lf, ", A[i][j]);
		printf("\n");
	}
	printf("\n");
}

//================================================================================================//
// 3 x 2 matrix class                                                                           //
//================================================================================================//
// Display each element with printf
void mat32::disp(void)
{
	int i, j;
	for(i=0; i<r; i++){
		for(j=0; j<c; j++) printf("%.10lf, ", A[i][j]);
		printf("\n");
	}
	printf("\n");
}

//================================================================================================//
// 3 x 3 matrix class                                                                           //
//================================================================================================//
// Display each element with printf
void mat33::disp(void)
{
	int i, j;
	for(i=0; i<r; i++){
		for(j=0; j<c; j++) printf("%.10lf, ", A[i][j]);
		printf("\n");
	}
	printf("\n");
}

// Calculate determinant of 3 x 3 matrix
double mat33::det(void)
{
	int i, j, k, max_row, sgn = 1;
	double ret, tmp;
	double A_tmp[r][r];

	// Copy source matrix
	for(i=0; i<r; i++){
		for(j=0; j<r; j++){
			A_tmp[i][j] = A[i][j];
		}
	}

	// Make A_tmp upper triangular matrix
	for(i=0; i<r-1; i++){
		// Search the biggest element among the "i"th column elements
		for(max_row=i, j=i+1; j<r; j++){
			if(fabs(A_tmp[j][i]) > fabs(A_tmp[max_row][i])) max_row = j;
		}
		// Exchange "i"th row and "max_row"th row if "i" is not equal to the max_row
		if(i != max_row){
			for(j=0; j<r; j++){
				tmp = A_tmp[i][j];
				A_tmp[i][j] = A_tmp[max_row][j];
				A_tmp[max_row][j] = tmp;
			}
			if(sgn == 1) sgn = -1;
			else         sgn = 1;
		}
		// Eliminate "i"th column element of the source matrix except the diagonal one
		for(j=i+1; j<r; j++){
			tmp = A_tmp[j][i]/A_tmp[i][i];
			for(k=i; k<r; k++) A_tmp[j][k] -= A_tmp[i][k]*tmp;
		}
	}
	for(i=0, ret=1.0; i<r; i++) ret*=A_tmp[i][i];
	return((double)sgn*ret);
}

// Calculate inverse matrix
mat33 mat33::inv(void)
{
	int i, j, k, max_row;
	double inv_diag, tmp;
	double A_copy[r][r];
	mat33 ans;

	// Copy source matrix
	for(i=0; i<r; i++) for(j=0; j<r; j++) A_copy[i][j] = A[i][j];

	// Initialize target matrix with unit matrix
	for(i=0; i<r; i++) for(j=0; j<r; j++) ans.A[i][j] = 0.0;
	for(i=0; i<r; i++) ans.A[i][i] = 1.0;

	// Gaussian Elimination
	for(i=0; i<r; i++){
		// Search the biggest element among the "i"th column elements
		for(max_row=i, j=i+1; j<r; j++) if(fabs(A_copy[j][i]) > fabs(A_copy[max_row][i])) max_row = j;

		// Exchange "i"th row and "max_row"th row if "i" is not equal to the max_row
		if(i != max_row){
			for(j=0; j<r; j++){
				tmp = A_copy[i][j];  A_copy[i][j] = A_copy[max_row][j];  A_copy[max_row][j] = tmp;
				tmp = ans.A[i][j];   ans.A[i][j] = ans.A[max_row][j];    ans.A[max_row][j] = tmp;
			}
		}

		// Multiply the inverse of the diagonal element to each elemnt of the "i" row
		// to make the diagonal element of the source matrix to 1
		inv_diag = 1.0/A_copy[i][i];
		for(j=0; j<r; j++){
			A_copy[i][j] *= inv_diag;
			ans.A[i][j] *= inv_diag;
		}

		// Eliminate "i"th column element of the source matrix except the diagonal one
		for(j=0; j<r; j++){
			if(j != i){
				tmp = A_copy[j][i];
				for(k=0; k<r; k++){
					A_copy[j][k] -= tmp * A_copy[i][k];
					ans.A[j][k]  -= tmp * ans.A[i][k];
				}
			}
		}
	}
return(ans);
}

//================================================================================================//
// 3 x 4 matrix class                                                                           //
//================================================================================================//
// Display each element with printf
void mat34::disp(void)
{
	int i, j;
	for(i=0; i<r; i++){
		for(j=0; j<c; j++) printf("%.10lf, ", A[i][j]);
		printf("\n");
	}
	printf("\n");
}

//================================================================================================//
// 3 x 5 matrix class                                                                           //
//================================================================================================//
// Display each element with printf
void mat35::disp(void)
{
	int i, j;
	for(i=0; i<r; i++){
		for(j=0; j<c; j++) printf("%.10lf, ", A[i][j]);
		printf("\n");
	}
	printf("\n");
}

//================================================================================================//
// 3 x 6 matrix class                                                                           //
//================================================================================================//
// Display each element with printf
void mat36::disp(void)
{
	int i, j;
	for(i=0; i<r; i++){
		for(j=0; j<c; j++) printf("%.10lf, ", A[i][j]);
		printf("\n");
	}
	printf("\n");
}

//================================================================================================//
// 3 x 7 matrix class                                                                           //
//================================================================================================//
// Display each element with printf
void mat37::disp(void)
{
	int i, j;
	for(i=0; i<r; i++){
		for(j=0; j<c; j++) printf("%.10lf, ", A[i][j]);
		printf("\n");
	}
	printf("\n");
}

//================================================================================================//
// 3 x 8 matrix class                                                                           //
//================================================================================================//
// Display each element with printf
void mat38::disp(void)
{
	int i, j;
	for(i=0; i<r; i++){
		for(j=0; j<c; j++) printf("%.10lf, ", A[i][j]);
		printf("\n");
	}
	printf("\n");
}

//================================================================================================//
// 3 x 9 matrix class                                                                           //
//================================================================================================//
// Display each element with printf
void mat39::disp(void)
{
	int i, j;
	for(i=0; i<r; i++){
		for(j=0; j<c; j++) printf("%.10lf, ", A[i][j]);
		printf("\n");
	}
	printf("\n");
}

//================================================================================================//
// 4 x 2 matrix class                                                                           //
//================================================================================================//
// Display each element with printf
void mat42::disp(void)
{
	int i, j;
	for(i=0; i<r; i++){
		for(j=0; j<c; j++) printf("%.10lf, ", A[i][j]);
		printf("\n");
	}
	printf("\n");
}

//================================================================================================//
// 4 x 3 matrix class                                                                           //
//================================================================================================//
// Display each element with printf
void mat43::disp(void)
{
	int i, j;
	for(i=0; i<r; i++){
		for(j=0; j<c; j++) printf("%.10lf, ", A[i][j]);
		printf("\n");
	}
	printf("\n");
}

//================================================================================================//
// 4 x 4 matrix class                                                                           //
//================================================================================================//
// Display each element with printf
void mat44::disp(void)
{
	int i, j;
	for(i=0; i<r; i++){
		for(j=0; j<c; j++) printf("%.10lf, ", A[i][j]);
		printf("\n");
	}
	printf("\n");
}

// Calculate determinant of 4 x 4 matrix
double mat44::det(void)
{
	int i, j, k, max_row, sgn = 1;
	double ret, tmp;
	double A_tmp[r][r];

	// Copy source matrix
	for(i=0; i<r; i++){
		for(j=0; j<r; j++){
			A_tmp[i][j] = A[i][j];
		}
	}

	// Make A_tmp upper triangular matrix
	for(i=0; i<r-1; i++){
		// Search the biggest element among the "i"th column elements
		for(max_row=i, j=i+1; j<r; j++){
			if(fabs(A_tmp[j][i]) > fabs(A_tmp[max_row][i])) max_row = j;
		}
		// Exchange "i"th row and "max_row"th row if "i" is not equal to the max_row
		if(i != max_row){
			for(j=0; j<r; j++){
				tmp = A_tmp[i][j];
				A_tmp[i][j] = A_tmp[max_row][j];
				A_tmp[max_row][j] = tmp;
			}
			if(sgn == 1) sgn = -1;
			else         sgn = 1;
		}
		// Eliminate "i"th column element of the source matrix except the diagonal one
		for(j=i+1; j<r; j++){
			tmp = A_tmp[j][i]/A_tmp[i][i];
			for(k=i; k<r; k++) A_tmp[j][k] -= A_tmp[i][k]*tmp;
		}
	}
	for(i=0, ret=1.0; i<r; i++) ret*=A_tmp[i][i];
	return((double)sgn*ret);
}

// Calculate inverse matrix
mat44 mat44::inv(void)
{
	int i, j, k, max_row;
	double inv_diag, tmp;
	double A_copy[r][r];
	mat44 ans;

	// Copy source matrix
	for(i=0; i<r; i++) for(j=0; j<r; j++) A_copy[i][j] = A[i][j];

	// Initialize target matrix with unit matrix
	for(i=0; i<r; i++) for(j=0; j<r; j++) ans.A[i][j] = 0.0;
	for(i=0; i<r; i++) ans.A[i][i] = 1.0;

	// Gaussian Elimination
	for(i=0; i<r; i++){
		// Search the biggest element among the "i"th column elements
		for(max_row=i, j=i+1; j<r; j++) if(fabs(A_copy[j][i]) > fabs(A_copy[max_row][i])) max_row = j;

		// Exchange "i"th row and "max_row"th row if "i" is not equal to the max_row
		if(i != max_row){
			for(j=0; j<r; j++){
				tmp = A_copy[i][j];  A_copy[i][j] = A_copy[max_row][j];  A_copy[max_row][j] = tmp;
				tmp = ans.A[i][j];   ans.A[i][j] = ans.A[max_row][j];    ans.A[max_row][j] = tmp;
			}
		}

		// Multiply the inverse of the diagonal element to each elemnt of the "i" row
		// to make the diagonal element of the source matrix to 1
		inv_diag = 1.0/A_copy[i][i];
		for(j=0; j<r; j++){
			A_copy[i][j] *= inv_diag;
			ans.A[i][j] *= inv_diag;
		}

		// Eliminate "i"th column element of the source matrix except the diagonal one
		for(j=0; j<r; j++){
			if(j != i){
				tmp = A_copy[j][i];
				for(k=0; k<r; k++){
					A_copy[j][k] -= tmp * A_copy[i][k];
					ans.A[j][k]  -= tmp * ans.A[i][k];
				}
			}
		}
	}
return(ans);
}

//================================================================================================//
// 4 x 5 matrix class                                                                           //
//================================================================================================//
// Display each element with printf
void mat45::disp(void)
{
	int i, j;
	for(i=0; i<r; i++){
		for(j=0; j<c; j++) printf("%.10lf, ", A[i][j]);
		printf("\n");
	}
	printf("\n");
}

//================================================================================================//
// 4 x 6 matrix class                                                                           //
//================================================================================================//
// Display each element with printf
void mat46::disp(void)
{
	int i, j;
	for(i=0; i<r; i++){
		for(j=0; j<c; j++) printf("%.10lf, ", A[i][j]);
		printf("\n");
	}
	printf("\n");
}

//================================================================================================//
// 4 x 7 matrix class                                                                           //
//================================================================================================//
// Display each element with printf
void mat47::disp(void)
{
	int i, j;
	for(i=0; i<r; i++){
		for(j=0; j<c; j++) printf("%.10lf, ", A[i][j]);
		printf("\n");
	}
	printf("\n");
}

//================================================================================================//
// 4 x 8 matrix class                                                                           //
//================================================================================================//
// Display each element with printf
void mat48::disp(void)
{
	int i, j;
	for(i=0; i<r; i++){
		for(j=0; j<c; j++) printf("%.10lf, ", A[i][j]);
		printf("\n");
	}
	printf("\n");
}

//================================================================================================//
// 4 x 9 matrix class                                                                           //
//================================================================================================//
// Display each element with printf
void mat49::disp(void)
{
	int i, j;
	for(i=0; i<r; i++){
		for(j=0; j<c; j++) printf("%.10lf, ", A[i][j]);
		printf("\n");
	}
	printf("\n");
}

//================================================================================================//
// 5 x 2 matrix class                                                                           //
//================================================================================================//
// Display each element with printf
void mat52::disp(void)
{
	int i, j;
	for(i=0; i<r; i++){
		for(j=0; j<c; j++) printf("%.10lf, ", A[i][j]);
		printf("\n");
	}
	printf("\n");
}

//================================================================================================//
// 5 x 3 matrix class                                                                           //
//================================================================================================//
// Display each element with printf
void mat53::disp(void)
{
	int i, j;
	for(i=0; i<r; i++){
		for(j=0; j<c; j++) printf("%.10lf, ", A[i][j]);
		printf("\n");
	}
	printf("\n");
}

//================================================================================================//
// 5 x 4 matrix class                                                                           //
//================================================================================================//
// Display each element with printf
void mat54::disp(void)
{
	int i, j;
	for(i=0; i<r; i++){
		for(j=0; j<c; j++) printf("%.10lf, ", A[i][j]);
		printf("\n");
	}
	printf("\n");
}

//================================================================================================//
// 5 x 5 matrix class                                                                           //
//================================================================================================//
// Display each element with printf
void mat55::disp(void)
{
	int i, j;
	for(i=0; i<r; i++){
		for(j=0; j<c; j++) printf("%.10lf, ", A[i][j]);
		printf("\n");
	}
	printf("\n");
}

// Calculate determinant of 5 x 5 matrix
double mat55::det(void)
{
	int i, j, k, max_row, sgn = 1;
	double ret, tmp;
	double A_tmp[r][r];

	// Copy source matrix
	for(i=0; i<r; i++){
		for(j=0; j<r; j++){
			A_tmp[i][j] = A[i][j];
		}
	}

	// Make A_tmp upper triangular matrix
	for(i=0; i<r-1; i++){
		// Search the biggest element among the "i"th column elements
		for(max_row=i, j=i+1; j<r; j++){
			if(fabs(A_tmp[j][i]) > fabs(A_tmp[max_row][i])) max_row = j;
		}
		// Exchange "i"th row and "max_row"th row if "i" is not equal to the max_row
		if(i != max_row){
			for(j=0; j<r; j++){
				tmp = A_tmp[i][j];
				A_tmp[i][j] = A_tmp[max_row][j];
				A_tmp[max_row][j] = tmp;
			}
			if(sgn == 1) sgn = -1;
			else         sgn = 1;
		}
		// Eliminate "i"th column element of the source matrix except the diagonal one
		for(j=i+1; j<r; j++){
			tmp = A_tmp[j][i]/A_tmp[i][i];
			for(k=i; k<r; k++) A_tmp[j][k] -= A_tmp[i][k]*tmp;
		}
	}
	for(i=0, ret=1.0; i<r; i++) ret*=A_tmp[i][i];
	return((double)sgn*ret);
}

// Calculate inverse matrix
mat55 mat55::inv(void)
{
	int i, j, k, max_row;
	double inv_diag, tmp;
	double A_copy[r][r];
	mat55 ans;

	// Copy source matrix
	for(i=0; i<r; i++) for(j=0; j<r; j++) A_copy[i][j] = A[i][j];

	// Initialize target matrix with unit matrix
	for(i=0; i<r; i++) for(j=0; j<r; j++) ans.A[i][j] = 0.0;
	for(i=0; i<r; i++) ans.A[i][i] = 1.0;

	// Gaussian Elimination
	for(i=0; i<r; i++){
		// Search the biggest element among the "i"th column elements
		for(max_row=i, j=i+1; j<r; j++) if(fabs(A_copy[j][i]) > fabs(A_copy[max_row][i])) max_row = j;

		// Exchange "i"th row and "max_row"th row if "i" is not equal to the max_row
		if(i != max_row){
			for(j=0; j<r; j++){
				tmp = A_copy[i][j];  A_copy[i][j] = A_copy[max_row][j];  A_copy[max_row][j] = tmp;
				tmp = ans.A[i][j];   ans.A[i][j] = ans.A[max_row][j];    ans.A[max_row][j] = tmp;
			}
		}

		// Multiply the inverse of the diagonal element to each elemnt of the "i" row
		// to make the diagonal element of the source matrix to 1
		inv_diag = 1.0/A_copy[i][i];
		for(j=0; j<r; j++){
			A_copy[i][j] *= inv_diag;
			ans.A[i][j] *= inv_diag;
		}

		// Eliminate "i"th column element of the source matrix except the diagonal one
		for(j=0; j<r; j++){
			if(j != i){
				tmp = A_copy[j][i];
				for(k=0; k<r; k++){
					A_copy[j][k] -= tmp * A_copy[i][k];
					ans.A[j][k]  -= tmp * ans.A[i][k];
				}
			}
		}
	}
return(ans);
}

//================================================================================================//
// 5 x 6 matrix class                                                                           //
//================================================================================================//
// Display each element with printf
void mat56::disp(void)
{
	int i, j;
	for(i=0; i<r; i++){
		for(j=0; j<c; j++) printf("%.10lf, ", A[i][j]);
		printf("\n");
	}
	printf("\n");
}

//================================================================================================//
// 5 x 7 matrix class                                                                           //
//================================================================================================//
// Display each element with printf
void mat57::disp(void)
{
	int i, j;
	for(i=0; i<r; i++){
		for(j=0; j<c; j++) printf("%.10lf, ", A[i][j]);
		printf("\n");
	}
	printf("\n");
}

//================================================================================================//
// 5 x 8 matrix class                                                                           //
//================================================================================================//
// Display each element with printf
void mat58::disp(void)
{
	int i, j;
	for(i=0; i<r; i++){
		for(j=0; j<c; j++) printf("%.10lf, ", A[i][j]);
		printf("\n");
	}
	printf("\n");
}

//================================================================================================//
// 5 x 9 matrix class                                                                           //
//================================================================================================//
// Display each element with printf
void mat59::disp(void)
{
	int i, j;
	for(i=0; i<r; i++){
		for(j=0; j<c; j++) printf("%.10lf, ", A[i][j]);
		printf("\n");
	}
	printf("\n");
}

//================================================================================================//
// 6 x 2 matrix class                                                                           //
//================================================================================================//
// Display each element with printf
void mat62::disp(void)
{
	int i, j;
	for(i=0; i<r; i++){
		for(j=0; j<c; j++) printf("%.10lf, ", A[i][j]);
		printf("\n");
	}
	printf("\n");
}

//================================================================================================//
// 6 x 3 matrix class                                                                           //
//================================================================================================//
// Display each element with printf
void mat63::disp(void)
{
	int i, j;
	for(i=0; i<r; i++){
		for(j=0; j<c; j++) printf("%.10lf, ", A[i][j]);
		printf("\n");
	}
	printf("\n");
}

//================================================================================================//
// 6 x 4 matrix class                                                                           //
//================================================================================================//
// Display each element with printf
void mat64::disp(void)
{
	int i, j;
	for(i=0; i<r; i++){
		for(j=0; j<c; j++) printf("%.10lf, ", A[i][j]);
		printf("\n");
	}
	printf("\n");
}

//================================================================================================//
// 6 x 5 matrix class                                                                           //
//================================================================================================//
// Display each element with printf
void mat65::disp(void)
{
	int i, j;
	for(i=0; i<r; i++){
		for(j=0; j<c; j++) printf("%.10lf, ", A[i][j]);
		printf("\n");
	}
	printf("\n");
}

//================================================================================================//
// 6 x 6 matrix class                                                                           //
//================================================================================================//
// Display each element with printf
void mat66::disp(void)
{
	int i, j;
	for(i=0; i<r; i++){
		for(j=0; j<c; j++) printf("%.10lf, ", A[i][j]);
		printf("\n");
	}
	printf("\n");
}

// Calculate determinant of 6 x 6 matrix
double mat66::det(void)
{
	int i, j, k, max_row, sgn = 1;
	double ret, tmp;
	double A_tmp[r][r];

	// Copy source matrix
	for(i=0; i<r; i++){
		for(j=0; j<r; j++){
			A_tmp[i][j] = A[i][j];
		}
	}

	// Make A_tmp upper triangular matrix
	for(i=0; i<r-1; i++){
		// Search the biggest element among the "i"th column elements
		for(max_row=i, j=i+1; j<r; j++){
			if(fabs(A_tmp[j][i]) > fabs(A_tmp[max_row][i])) max_row = j;
		}
		// Exchange "i"th row and "max_row"th row if "i" is not equal to the max_row
		if(i != max_row){
			for(j=0; j<r; j++){
				tmp = A_tmp[i][j];
				A_tmp[i][j] = A_tmp[max_row][j];
				A_tmp[max_row][j] = tmp;
			}
			if(sgn == 1) sgn = -1;
			else         sgn = 1;
		}
		// Eliminate "i"th column element of the source matrix except the diagonal one
		for(j=i+1; j<r; j++){
			tmp = A_tmp[j][i]/A_tmp[i][i];
			for(k=i; k<r; k++) A_tmp[j][k] -= A_tmp[i][k]*tmp;
		}
	}
	for(i=0, ret=1.0; i<r; i++) ret*=A_tmp[i][i];
	return((double)sgn*ret);
}

// Calculate inverse matrix
mat66 mat66::inv(void)
{
	int i, j, k, max_row;
	double inv_diag, tmp;
	double A_copy[r][r];
	mat66 ans;

	// Copy source matrix
	for(i=0; i<r; i++) for(j=0; j<r; j++) A_copy[i][j] = A[i][j];

	// Initialize target matrix with unit matrix
	for(i=0; i<r; i++) for(j=0; j<r; j++) ans.A[i][j] = 0.0;
	for(i=0; i<r; i++) ans.A[i][i] = 1.0;

	// Gaussian Elimination
	for(i=0; i<r; i++){
		// Search the biggest element among the "i"th column elements
		for(max_row=i, j=i+1; j<r; j++) if(fabs(A_copy[j][i]) > fabs(A_copy[max_row][i])) max_row = j;

		// Exchange "i"th row and "max_row"th row if "i" is not equal to the max_row
		if(i != max_row){
			for(j=0; j<r; j++){
				tmp = A_copy[i][j];  A_copy[i][j] = A_copy[max_row][j];  A_copy[max_row][j] = tmp;
				tmp = ans.A[i][j];   ans.A[i][j] = ans.A[max_row][j];    ans.A[max_row][j] = tmp;
			}
		}

		// Multiply the inverse of the diagonal element to each elemnt of the "i" row
		// to make the diagonal element of the source matrix to 1
		inv_diag = 1.0/A_copy[i][i];
		for(j=0; j<r; j++){
			A_copy[i][j] *= inv_diag;
			ans.A[i][j] *= inv_diag;
		}

		// Eliminate "i"th column element of the source matrix except the diagonal one
		for(j=0; j<r; j++){
			if(j != i){
				tmp = A_copy[j][i];
				for(k=0; k<r; k++){
					A_copy[j][k] -= tmp * A_copy[i][k];
					ans.A[j][k]  -= tmp * ans.A[i][k];
				}
			}
		}
	}
return(ans);
}

//================================================================================================//
// 6 x 7 matrix class                                                                           //
//================================================================================================//
// Display each element with printf
void mat67::disp(void)
{
	int i, j;
	for(i=0; i<r; i++){
		for(j=0; j<c; j++) printf("%.10lf, ", A[i][j]);
		printf("\n");
	}
	printf("\n");
}

//================================================================================================//
// 6 x 8 matrix class                                                                           //
//================================================================================================//
// Display each element with printf
void mat68::disp(void)
{
	int i, j;
	for(i=0; i<r; i++){
		for(j=0; j<c; j++) printf("%.10lf, ", A[i][j]);
		printf("\n");
	}
	printf("\n");
}

//================================================================================================//
// 6 x 9 matrix class                                                                           //
//================================================================================================//
// Display each element with printf
void mat69::disp(void)
{
	int i, j;
	for(i=0; i<r; i++){
		for(j=0; j<c; j++) printf("%.10lf, ", A[i][j]);
		printf("\n");
	}
	printf("\n");
}

//================================================================================================//
// 7 x 2 matrix class                                                                           //
//================================================================================================//
// Display each element with printf
void mat72::disp(void)
{
	int i, j;
	for(i=0; i<r; i++){
		for(j=0; j<c; j++) printf("%.10lf, ", A[i][j]);
		printf("\n");
	}
	printf("\n");
}

//================================================================================================//
// 7 x 3 matrix class                                                                           //
//================================================================================================//
// Display each element with printf
void mat73::disp(void)
{
	int i, j;
	for(i=0; i<r; i++){
		for(j=0; j<c; j++) printf("%.10lf, ", A[i][j]);
		printf("\n");
	}
	printf("\n");
}

//================================================================================================//
// 7 x 4 matrix class                                                                           //
//================================================================================================//
// Display each element with printf
void mat74::disp(void)
{
	int i, j;
	for(i=0; i<r; i++){
		for(j=0; j<c; j++) printf("%.10lf, ", A[i][j]);
		printf("\n");
	}
	printf("\n");
}

//================================================================================================//
// 7 x 5 matrix class                                                                           //
//================================================================================================//
// Display each element with printf
void mat75::disp(void)
{
	int i, j;
	for(i=0; i<r; i++){
		for(j=0; j<c; j++) printf("%.10lf, ", A[i][j]);
		printf("\n");
	}
	printf("\n");
}

//================================================================================================//
// 7 x 6 matrix class                                                                           //
//================================================================================================//
// Display each element with printf
void mat76::disp(void)
{
	int i, j;
	for(i=0; i<r; i++){
		for(j=0; j<c; j++) printf("%.10lf, ", A[i][j]);
		printf("\n");
	}
	printf("\n");
}

//================================================================================================//
// 7 x 7 matrix class                                                                           //
//================================================================================================//
// Display each element with printf
void mat77::disp(void)
{
	int i, j;
	for(i=0; i<r; i++){
		for(j=0; j<c; j++) printf("%.10lf, ", A[i][j]);
		printf("\n");
	}
	printf("\n");
}

// Calculate determinant of 7 x 7 matrix
double mat77::det(void)
{
	int i, j, k, max_row, sgn = 1;
	double ret, tmp;
	double A_tmp[r][r];

	// Copy source matrix
	for(i=0; i<r; i++){
		for(j=0; j<r; j++){
			A_tmp[i][j] = A[i][j];
		}
	}

	// Make A_tmp upper triangular matrix
	for(i=0; i<r-1; i++){
		// Search the biggest element among the "i"th column elements
		for(max_row=i, j=i+1; j<r; j++){
			if(fabs(A_tmp[j][i]) > fabs(A_tmp[max_row][i])) max_row = j;
		}
		// Exchange "i"th row and "max_row"th row if "i" is not equal to the max_row
		if(i != max_row){
			for(j=0; j<r; j++){
				tmp = A_tmp[i][j];
				A_tmp[i][j] = A_tmp[max_row][j];
				A_tmp[max_row][j] = tmp;
			}
			if(sgn == 1) sgn = -1;
			else         sgn = 1;
		}
		// Eliminate "i"th column element of the source matrix except the diagonal one
		for(j=i+1; j<r; j++){
			tmp = A_tmp[j][i]/A_tmp[i][i];
			for(k=i; k<r; k++) A_tmp[j][k] -= A_tmp[i][k]*tmp;
		}
	}
	for(i=0, ret=1.0; i<r; i++) ret*=A_tmp[i][i];
	return((double)sgn*ret);
}

// Calculate inverse matrix
mat77 mat77::inv(void)
{
	int i, j, k, max_row;
	double inv_diag, tmp;
	double A_copy[r][r];
	mat77 ans;

	// Copy source matrix
	for(i=0; i<r; i++) for(j=0; j<r; j++) A_copy[i][j] = A[i][j];

	// Initialize target matrix with unit matrix
	for(i=0; i<r; i++) for(j=0; j<r; j++) ans.A[i][j] = 0.0;
	for(i=0; i<r; i++) ans.A[i][i] = 1.0;

	// Gaussian Elimination
	for(i=0; i<r; i++){
		// Search the biggest element among the "i"th column elements
		for(max_row=i, j=i+1; j<r; j++) if(fabs(A_copy[j][i]) > fabs(A_copy[max_row][i])) max_row = j;

		// Exchange "i"th row and "max_row"th row if "i" is not equal to the max_row
		if(i != max_row){
			for(j=0; j<r; j++){
				tmp = A_copy[i][j];  A_copy[i][j] = A_copy[max_row][j];  A_copy[max_row][j] = tmp;
				tmp = ans.A[i][j];   ans.A[i][j] = ans.A[max_row][j];    ans.A[max_row][j] = tmp;
			}
		}

		// Multiply the inverse of the diagonal element to each elemnt of the "i" row
		// to make the diagonal element of the source matrix to 1
		inv_diag = 1.0/A_copy[i][i];
		for(j=0; j<r; j++){
			A_copy[i][j] *= inv_diag;
			ans.A[i][j] *= inv_diag;
		}

		// Eliminate "i"th column element of the source matrix except the diagonal one
		for(j=0; j<r; j++){
			if(j != i){
				tmp = A_copy[j][i];
				for(k=0; k<r; k++){
					A_copy[j][k] -= tmp * A_copy[i][k];
					ans.A[j][k]  -= tmp * ans.A[i][k];
				}
			}
		}
	}
return(ans);
}

//================================================================================================//
// 7 x 8 matrix class                                                                           //
//================================================================================================//
// Display each element with printf
void mat78::disp(void)
{
	int i, j;
	for(i=0; i<r; i++){
		for(j=0; j<c; j++) printf("%.10lf, ", A[i][j]);
		printf("\n");
	}
	printf("\n");
}

//================================================================================================//
// 7 x 9 matrix class                                                                           //
//================================================================================================//
// Display each element with printf
void mat79::disp(void)
{
	int i, j;
	for(i=0; i<r; i++){
		for(j=0; j<c; j++) printf("%.10lf, ", A[i][j]);
		printf("\n");
	}
	printf("\n");
}

//================================================================================================//
// 8 x 2 matrix class                                                                           //
//================================================================================================//
// Display each element with printf
void mat82::disp(void)
{
	int i, j;
	for(i=0; i<r; i++){
		for(j=0; j<c; j++) printf("%.10lf, ", A[i][j]);
		printf("\n");
	}
	printf("\n");
}

//================================================================================================//
// 8 x 3 matrix class                                                                           //
//================================================================================================//
// Display each element with printf
void mat83::disp(void)
{
	int i, j;
	for(i=0; i<r; i++){
		for(j=0; j<c; j++) printf("%.10lf, ", A[i][j]);
		printf("\n");
	}
	printf("\n");
}

//================================================================================================//
// 8 x 4 matrix class                                                                           //
//================================================================================================//
// Display each element with printf
void mat84::disp(void)
{
	int i, j;
	for(i=0; i<r; i++){
		for(j=0; j<c; j++) printf("%.10lf, ", A[i][j]);
		printf("\n");
	}
	printf("\n");
}

//================================================================================================//
// 8 x 5 matrix class                                                                           //
//================================================================================================//
// Display each element with printf
void mat85::disp(void)
{
	int i, j;
	for(i=0; i<r; i++){
		for(j=0; j<c; j++) printf("%.10lf, ", A[i][j]);
		printf("\n");
	}
	printf("\n");
}

//================================================================================================//
// 8 x 6 matrix class                                                                           //
//================================================================================================//
// Display each element with printf
void mat86::disp(void)
{
	int i, j;
	for(i=0; i<r; i++){
		for(j=0; j<c; j++) printf("%.10lf, ", A[i][j]);
		printf("\n");
	}
	printf("\n");
}

//================================================================================================//
// 8 x 7 matrix class                                                                           //
//================================================================================================//
// Display each element with printf
void mat87::disp(void)
{
	int i, j;
	for(i=0; i<r; i++){
		for(j=0; j<c; j++) printf("%.10lf, ", A[i][j]);
		printf("\n");
	}
	printf("\n");
}

//================================================================================================//
// 8 x 8 matrix class                                                                           //
//================================================================================================//
// Display each element with printf
void mat88::disp(void)
{
	int i, j;
	for(i=0; i<r; i++){
		for(j=0; j<c; j++) printf("%.10lf, ", A[i][j]);
		printf("\n");
	}
	printf("\n");
}

// Calculate determinant of 8 x 8 matrix
double mat88::det(void)
{
	int i, j, k, max_row, sgn = 1;
	double ret, tmp;
	double A_tmp[r][r];

	// Copy source matrix
	for(i=0; i<r; i++){
		for(j=0; j<r; j++){
			A_tmp[i][j] = A[i][j];
		}
	}

	// Make A_tmp upper triangular matrix
	for(i=0; i<r-1; i++){
		// Search the biggest element among the "i"th column elements
		for(max_row=i, j=i+1; j<r; j++){
			if(fabs(A_tmp[j][i]) > fabs(A_tmp[max_row][i])) max_row = j;
		}
		// Exchange "i"th row and "max_row"th row if "i" is not equal to the max_row
		if(i != max_row){
			for(j=0; j<r; j++){
				tmp = A_tmp[i][j];
				A_tmp[i][j] = A_tmp[max_row][j];
				A_tmp[max_row][j] = tmp;
			}
			if(sgn == 1) sgn = -1;
			else         sgn = 1;
		}
		// Eliminate "i"th column element of the source matrix except the diagonal one
		for(j=i+1; j<r; j++){
			tmp = A_tmp[j][i]/A_tmp[i][i];
			for(k=i; k<r; k++) A_tmp[j][k] -= A_tmp[i][k]*tmp;
		}
	}
	for(i=0, ret=1.0; i<r; i++) ret*=A_tmp[i][i];
	return((double)sgn*ret);
}

// Calculate inverse matrix
mat88 mat88::inv(void)
{
	int i, j, k, max_row;
	double inv_diag, tmp;
	double A_copy[r][r];
	mat88 ans;

	// Copy source matrix
	for(i=0; i<r; i++) for(j=0; j<r; j++) A_copy[i][j] = A[i][j];

	// Initialize target matrix with unit matrix
	for(i=0; i<r; i++) for(j=0; j<r; j++) ans.A[i][j] = 0.0;
	for(i=0; i<r; i++) ans.A[i][i] = 1.0;

	// Gaussian Elimination
	for(i=0; i<r; i++){
		// Search the biggest element among the "i"th column elements
		for(max_row=i, j=i+1; j<r; j++) if(fabs(A_copy[j][i]) > fabs(A_copy[max_row][i])) max_row = j;

		// Exchange "i"th row and "max_row"th row if "i" is not equal to the max_row
		if(i != max_row){
			for(j=0; j<r; j++){
				tmp = A_copy[i][j];  A_copy[i][j] = A_copy[max_row][j];  A_copy[max_row][j] = tmp;
				tmp = ans.A[i][j];   ans.A[i][j] = ans.A[max_row][j];    ans.A[max_row][j] = tmp;
			}
		}

		// Multiply the inverse of the diagonal element to each elemnt of the "i" row
		// to make the diagonal element of the source matrix to 1
		inv_diag = 1.0/A_copy[i][i];
		for(j=0; j<r; j++){
			A_copy[i][j] *= inv_diag;
			ans.A[i][j] *= inv_diag;
		}

		// Eliminate "i"th column element of the source matrix except the diagonal one
		for(j=0; j<r; j++){
			if(j != i){
				tmp = A_copy[j][i];
				for(k=0; k<r; k++){
					A_copy[j][k] -= tmp * A_copy[i][k];
					ans.A[j][k]  -= tmp * ans.A[i][k];
				}
			}
		}
	}
return(ans);
}

//================================================================================================//
// 8 x 9 matrix class                                                                           //
//================================================================================================//
// Display each element with printf
void mat89::disp(void)
{
	int i, j;
	for(i=0; i<r; i++){
		for(j=0; j<c; j++) printf("%.10lf, ", A[i][j]);
		printf("\n");
	}
	printf("\n");
}

//================================================================================================//
// 9 x 2 matrix class                                                                           //
//================================================================================================//
// Display each element with printf
void mat92::disp(void)
{
	int i, j;
	for(i=0; i<r; i++){
		for(j=0; j<c; j++) printf("%.10lf, ", A[i][j]);
		printf("\n");
	}
	printf("\n");
}

//================================================================================================//
// 9 x 3 matrix class                                                                           //
//================================================================================================//
// Display each element with printf
void mat93::disp(void)
{
	int i, j;
	for(i=0; i<r; i++){
		for(j=0; j<c; j++) printf("%.10lf, ", A[i][j]);
		printf("\n");
	}
	printf("\n");
}

//================================================================================================//
// 9 x 4 matrix class                                                                           //
//================================================================================================//
// Display each element with printf
void mat94::disp(void)
{
	int i, j;
	for(i=0; i<r; i++){
		for(j=0; j<c; j++) printf("%.10lf, ", A[i][j]);
		printf("\n");
	}
	printf("\n");
}

//================================================================================================//
// 9 x 5 matrix class                                                                           //
//================================================================================================//
// Display each element with printf
void mat95::disp(void)
{
	int i, j;
	for(i=0; i<r; i++){
		for(j=0; j<c; j++) printf("%.10lf, ", A[i][j]);
		printf("\n");
	}
	printf("\n");
}

//================================================================================================//
// 9 x 6 matrix class                                                                           //
//================================================================================================//
// Display each element with printf
void mat96::disp(void)
{
	int i, j;
	for(i=0; i<r; i++){
		for(j=0; j<c; j++) printf("%.10lf, ", A[i][j]);
		printf("\n");
	}
	printf("\n");
}

//================================================================================================//
// 9 x 7 matrix class                                                                           //
//================================================================================================//
// Display each element with printf
void mat97::disp(void)
{
	int i, j;
	for(i=0; i<r; i++){
		for(j=0; j<c; j++) printf("%.10lf, ", A[i][j]);
		printf("\n");
	}
	printf("\n");
}

//================================================================================================//
// 9 x 8 matrix class                                                                           //
//================================================================================================//
// Display each element with printf
void mat98::disp(void)
{
	int i, j;
	for(i=0; i<r; i++){
		for(j=0; j<c; j++) printf("%.10lf, ", A[i][j]);
		printf("\n");
	}
	printf("\n");
}

//================================================================================================//
// 9 x 9 matrix class                                                                           //
//================================================================================================//
// Display each element with printf
void mat99::disp(void)
{
	int i, j;
	for(i=0; i<r; i++){
		for(j=0; j<c; j++) printf("%.10lf, ", A[i][j]);
		printf("\n");
	}
	printf("\n");
}

// Calculate determinant of 9 x 9 matrix
double mat99::det(void)
{
	int i, j, k, max_row, sgn = 1;
	double ret, tmp;
	double A_tmp[r][r];

	// Copy source matrix
	for(i=0; i<r; i++){
		for(j=0; j<r; j++){
			A_tmp[i][j] = A[i][j];
		}
	}

	// Make A_tmp upper triangular matrix
	for(i=0; i<r-1; i++){
		// Search the biggest element among the "i"th column elements
		for(max_row=i, j=i+1; j<r; j++){
			if(fabs(A_tmp[j][i]) > fabs(A_tmp[max_row][i])) max_row = j;
		}
		// Exchange "i"th row and "max_row"th row if "i" is not equal to the max_row
		if(i != max_row){
			for(j=0; j<r; j++){
				tmp = A_tmp[i][j];
				A_tmp[i][j] = A_tmp[max_row][j];
				A_tmp[max_row][j] = tmp;
			}
			if(sgn == 1) sgn = -1;
			else         sgn = 1;
		}
		// Eliminate "i"th column element of the source matrix except the diagonal one
		for(j=i+1; j<r; j++){
			tmp = A_tmp[j][i]/A_tmp[i][i];
			for(k=i; k<r; k++) A_tmp[j][k] -= A_tmp[i][k]*tmp;
		}
	}
	for(i=0, ret=1.0; i<r; i++) ret*=A_tmp[i][i];
	return((double)sgn*ret);
}

// Calculate inverse matrix
mat99 mat99::inv(void)
{
	int i, j, k, max_row;
	double inv_diag, tmp;
	double A_copy[r][r];
	mat99 ans;

	// Copy source matrix
	for(i=0; i<r; i++) for(j=0; j<r; j++) A_copy[i][j] = A[i][j];

	// Initialize target matrix with unit matrix
	for(i=0; i<r; i++) for(j=0; j<r; j++) ans.A[i][j] = 0.0;
	for(i=0; i<r; i++) ans.A[i][i] = 1.0;

	// Gaussian Elimination
	for(i=0; i<r; i++){
		// Search the biggest element among the "i"th column elements
		for(max_row=i, j=i+1; j<r; j++) if(fabs(A_copy[j][i]) > fabs(A_copy[max_row][i])) max_row = j;

		// Exchange "i"th row and "max_row"th row if "i" is not equal to the max_row
		if(i != max_row){
			for(j=0; j<r; j++){
				tmp = A_copy[i][j];  A_copy[i][j] = A_copy[max_row][j];  A_copy[max_row][j] = tmp;
				tmp = ans.A[i][j];   ans.A[i][j] = ans.A[max_row][j];    ans.A[max_row][j] = tmp;
			}
		}

		// Multiply the inverse of the diagonal element to each elemnt of the "i" row
		// to make the diagonal element of the source matrix to 1
		inv_diag = 1.0/A_copy[i][i];
		for(j=0; j<r; j++){
			A_copy[i][j] *= inv_diag;
			ans.A[i][j] *= inv_diag;
		}

		// Eliminate "i"th column element of the source matrix except the diagonal one
		for(j=0; j<r; j++){
			if(j != i){
				tmp = A_copy[j][i];
				for(k=0; k<r; k++){
					A_copy[j][k] -= tmp * A_copy[i][k];
					ans.A[j][k]  -= tmp * ans.A[i][k];
				}
			}
		}
	}
return(ans);
}

