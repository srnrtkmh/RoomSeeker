/**************************************************************************************************/
/*                                                                                                */
/* FILE : basic_matrix.h                                                                          */
/* MEMO : Class to use matrix(This file is automatically generated by generate_basic_matrix.exe)  */
/*                                                                                                */
/**************************************************************************************************/

#ifndef BASIC_MATRIX
#define BASIC_MATRIX

#include <iostream>
using namespace std;

class vec2;
class vec3;
class vec4;
class vec5;
class vec6;
class vec7;
class vec8;
class vec9;

class mat22;
class mat23;
class mat24;
class mat25;
class mat26;
class mat27;
class mat28;
class mat29;
class mat32;
class mat33;
class mat34;
class mat35;
class mat36;
class mat37;
class mat38;
class mat39;
class mat42;
class mat43;
class mat44;
class mat45;
class mat46;
class mat47;
class mat48;
class mat49;
class mat52;
class mat53;
class mat54;
class mat55;
class mat56;
class mat57;
class mat58;
class mat59;
class mat62;
class mat63;
class mat64;
class mat65;
class mat66;
class mat67;
class mat68;
class mat69;
class mat72;
class mat73;
class mat74;
class mat75;
class mat76;
class mat77;
class mat78;
class mat79;
class mat82;
class mat83;
class mat84;
class mat85;
class mat86;
class mat87;
class mat88;
class mat89;
class mat92;
class mat93;
class mat94;
class mat95;
class mat96;
class mat97;
class mat98;
class mat99;

//================================================================================================//
// 2 x 1 vector class                                                                             //
//================================================================================================//
class vec2{
	public:
		double x[2];
		static const int n = 2;
		vec2();
		vec2(double x0, double x1);
		void set(double x0, double x1);
		mat22 diag();

		double operator[](int i);
		friend vec2 operator+(vec2 obj1, vec2 obj2);
		friend vec2 operator-(vec2 obj1, vec2 obj2);
		friend vec2 operator-(vec2 obj);
		friend double operator*(vec2 obj1, vec2 obj2);
		friend vec2 operator*(vec2 obj, double a);
		friend vec2 operator*(double a, vec2 obj);
		void clear(void);
		void disp(void);
};

//================================================================================================//
// 3 x 1 vector class                                                                             //
//================================================================================================//
class vec3{
	public:
		double x[3];
		static const int n = 3;
		vec3();
		vec3(double x0, double x1, double x2);
		void set(double x0, double x1, double x2);
		mat33 diag();

		double operator[](int i);
		friend vec3 operator+(vec3 obj1, vec3 obj2);
		friend vec3 operator-(vec3 obj1, vec3 obj2);
		friend vec3 operator-(vec3 obj);
		friend double operator*(vec3 obj1, vec3 obj2);
		friend vec3 operator*(vec3 obj, double a);
		friend vec3 operator*(double a, vec3 obj);
		void clear(void);
		void disp(void);
};

//================================================================================================//
// 4 x 1 vector class                                                                             //
//================================================================================================//
class vec4{
	public:
		double x[4];
		static const int n = 4;
		vec4();
		vec4(double x0, double x1, double x2, double x3);
		void set(double x0, double x1, double x2, double x3);
		mat44 diag();

		double operator[](int i);
		friend vec4 operator+(vec4 obj1, vec4 obj2);
		friend vec4 operator-(vec4 obj1, vec4 obj2);
		friend vec4 operator-(vec4 obj);
		friend double operator*(vec4 obj1, vec4 obj2);
		friend vec4 operator*(vec4 obj, double a);
		friend vec4 operator*(double a, vec4 obj);
		void clear(void);
		void disp(void);
};

//================================================================================================//
// 5 x 1 vector class                                                                             //
//================================================================================================//
class vec5{
	public:
		double x[5];
		static const int n = 5;
		vec5();
		vec5(double x0, double x1, double x2, double x3, double x4);
		void set(double x0, double x1, double x2, double x3, double x4);
		mat55 diag();

		double operator[](int i);
		friend vec5 operator+(vec5 obj1, vec5 obj2);
		friend vec5 operator-(vec5 obj1, vec5 obj2);
		friend vec5 operator-(vec5 obj);
		friend double operator*(vec5 obj1, vec5 obj2);
		friend vec5 operator*(vec5 obj, double a);
		friend vec5 operator*(double a, vec5 obj);
		void clear(void);
		void disp(void);
};

//================================================================================================//
// 6 x 1 vector class                                                                             //
//================================================================================================//
class vec6{
	public:
		double x[6];
		static const int n = 6;
		vec6();
		vec6(double x0, double x1, double x2, double x3, double x4, double x5);
		void set(double x0, double x1, double x2, double x3, double x4, double x5);
		mat66 diag();

		double operator[](int i);
		friend vec6 operator+(vec6 obj1, vec6 obj2);
		friend vec6 operator-(vec6 obj1, vec6 obj2);
		friend vec6 operator-(vec6 obj);
		friend double operator*(vec6 obj1, vec6 obj2);
		friend vec6 operator*(vec6 obj, double a);
		friend vec6 operator*(double a, vec6 obj);
		void clear(void);
		void disp(void);
};

//================================================================================================//
// 7 x 1 vector class                                                                             //
//================================================================================================//
class vec7{
	public:
		double x[7];
		static const int n = 7;
		vec7();
		vec7(double x0, double x1, double x2, double x3, double x4, double x5, double x6);
		void set(double x0, double x1, double x2, double x3, double x4, double x5, double x6);
		mat77 diag();

		double operator[](int i);
		friend vec7 operator+(vec7 obj1, vec7 obj2);
		friend vec7 operator-(vec7 obj1, vec7 obj2);
		friend vec7 operator-(vec7 obj);
		friend double operator*(vec7 obj1, vec7 obj2);
		friend vec7 operator*(vec7 obj, double a);
		friend vec7 operator*(double a, vec7 obj);
		void clear(void);
		void disp(void);
};

//================================================================================================//
// 8 x 1 vector class                                                                             //
//================================================================================================//
class vec8{
	public:
		double x[8];
		static const int n = 8;
		vec8();
		vec8(double x0, double x1, double x2, double x3, double x4, double x5, double x6, double x7);
		void set(double x0, double x1, double x2, double x3, double x4, double x5, double x6, double x7);
		mat88 diag();

		double operator[](int i);
		friend vec8 operator+(vec8 obj1, vec8 obj2);
		friend vec8 operator-(vec8 obj1, vec8 obj2);
		friend vec8 operator-(vec8 obj);
		friend double operator*(vec8 obj1, vec8 obj2);
		friend vec8 operator*(vec8 obj, double a);
		friend vec8 operator*(double a, vec8 obj);
		void clear(void);
		void disp(void);
};

//================================================================================================//
// 9 x 1 vector class                                                                             //
//================================================================================================//
class vec9{
	public:
		double x[9];
		static const int n = 9;
		vec9();
		vec9(double x0, double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8);
		void set(double x0, double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8);
		mat99 diag();

		double operator[](int i);
		friend vec9 operator+(vec9 obj1, vec9 obj2);
		friend vec9 operator-(vec9 obj1, vec9 obj2);
		friend vec9 operator-(vec9 obj);
		friend double operator*(vec9 obj1, vec9 obj2);
		friend vec9 operator*(vec9 obj, double a);
		friend vec9 operator*(double a, vec9 obj);
		void clear(void);
		void disp(void);
};


//================================================================================================//
// 2 x 2 matrix class                                                                             //
//================================================================================================//
class mat22{
	public:
		double A[2][2];
		static const int r = 2, c = 2;
		friend mat22 operator+(mat22 obj1, mat22 obj2);
		friend mat22 operator-(mat22 obj1, mat22 obj2);
		friend mat22 operator-(mat22 obj);

		friend mat22 operator*(double a, mat22 obj);
		friend mat22 operator*(mat22 obj, double a);
		friend vec2 operator*(vec2 obj1, mat22 obj2);
		friend vec2 operator*(mat22 obj1, vec2 obj2);

		vec2 row(int num);
		vec2 col(int num);
		void set(int i, int j, double x);
		void row_set(int num, vec2 obj);
		void row_set(int num, double x0, double x1);
		void col_set(int num, vec2 obj);
		void col_set(int num, double x0, double x1);
		void disp(void);
		mat22 trans(void);
		double det(void);
		mat22 inv(void);
};

//================================================================================================//
// 2 x 3 matrix class                                                                             //
//================================================================================================//
class mat23{
	public:
		double A[2][3];
		static const int r = 2, c = 3;
		friend mat23 operator+(mat23 obj1, mat23 obj2);
		friend mat23 operator-(mat23 obj1, mat23 obj2);
		friend mat23 operator-(mat23 obj);

		friend mat23 operator*(double a, mat23 obj);
		friend mat23 operator*(mat23 obj, double a);
		friend vec2 operator*(vec3 obj1, mat23 obj2);
		friend vec2 operator*(mat23 obj1, vec3 obj2);

		vec3 row(int num);
		vec2 col(int num);
		void set(int i, int j, double x);
		void row_set(int num, vec3 obj);
		void row_set(int num, double x0, double x1, double x2);
		void col_set(int num, vec2 obj);
		void col_set(int num, double x0, double x1, double x2);
		void disp(void);
		mat32 trans(void);
};

//================================================================================================//
// 2 x 4 matrix class                                                                             //
//================================================================================================//
class mat24{
	public:
		double A[2][4];
		static const int r = 2, c = 4;
		friend mat24 operator+(mat24 obj1, mat24 obj2);
		friend mat24 operator-(mat24 obj1, mat24 obj2);
		friend mat24 operator-(mat24 obj);

		friend mat24 operator*(double a, mat24 obj);
		friend mat24 operator*(mat24 obj, double a);
		friend vec2 operator*(vec4 obj1, mat24 obj2);
		friend vec2 operator*(mat24 obj1, vec4 obj2);

		vec4 row(int num);
		vec2 col(int num);
		void set(int i, int j, double x);
		void row_set(int num, vec4 obj);
		void row_set(int num, double x0, double x1, double x2, double x3);
		void col_set(int num, vec2 obj);
		void col_set(int num, double x0, double x1, double x2, double x3);
		void disp(void);
		mat42 trans(void);
};

//================================================================================================//
// 2 x 5 matrix class                                                                             //
//================================================================================================//
class mat25{
	public:
		double A[2][5];
		static const int r = 2, c = 5;
		friend mat25 operator+(mat25 obj1, mat25 obj2);
		friend mat25 operator-(mat25 obj1, mat25 obj2);
		friend mat25 operator-(mat25 obj);

		friend mat25 operator*(double a, mat25 obj);
		friend mat25 operator*(mat25 obj, double a);
		friend vec2 operator*(vec5 obj1, mat25 obj2);
		friend vec2 operator*(mat25 obj1, vec5 obj2);

		vec5 row(int num);
		vec2 col(int num);
		void set(int i, int j, double x);
		void row_set(int num, vec5 obj);
		void row_set(int num, double x0, double x1, double x2, double x3, double x4);
		void col_set(int num, vec2 obj);
		void col_set(int num, double x0, double x1, double x2, double x3, double x4);
		void disp(void);
		mat52 trans(void);
};

//================================================================================================//
// 2 x 6 matrix class                                                                             //
//================================================================================================//
class mat26{
	public:
		double A[2][6];
		static const int r = 2, c = 6;
		friend mat26 operator+(mat26 obj1, mat26 obj2);
		friend mat26 operator-(mat26 obj1, mat26 obj2);
		friend mat26 operator-(mat26 obj);

		friend mat26 operator*(double a, mat26 obj);
		friend mat26 operator*(mat26 obj, double a);
		friend vec2 operator*(vec6 obj1, mat26 obj2);
		friend vec2 operator*(mat26 obj1, vec6 obj2);

		vec6 row(int num);
		vec2 col(int num);
		void set(int i, int j, double x);
		void row_set(int num, vec6 obj);
		void row_set(int num, double x0, double x1, double x2, double x3, double x4, double x5);
		void col_set(int num, vec2 obj);
		void col_set(int num, double x0, double x1, double x2, double x3, double x4, double x5);
		void disp(void);
		mat62 trans(void);
};

//================================================================================================//
// 2 x 7 matrix class                                                                             //
//================================================================================================//
class mat27{
	public:
		double A[2][7];
		static const int r = 2, c = 7;
		friend mat27 operator+(mat27 obj1, mat27 obj2);
		friend mat27 operator-(mat27 obj1, mat27 obj2);
		friend mat27 operator-(mat27 obj);

		friend mat27 operator*(double a, mat27 obj);
		friend mat27 operator*(mat27 obj, double a);
		friend vec2 operator*(vec7 obj1, mat27 obj2);
		friend vec2 operator*(mat27 obj1, vec7 obj2);

		vec7 row(int num);
		vec2 col(int num);
		void set(int i, int j, double x);
		void row_set(int num, vec7 obj);
		void row_set(int num, double x0, double x1, double x2, double x3, double x4, double x5, double x6);
		void col_set(int num, vec2 obj);
		void col_set(int num, double x0, double x1, double x2, double x3, double x4, double x5, double x6);
		void disp(void);
		mat72 trans(void);
};

//================================================================================================//
// 2 x 8 matrix class                                                                             //
//================================================================================================//
class mat28{
	public:
		double A[2][8];
		static const int r = 2, c = 8;
		friend mat28 operator+(mat28 obj1, mat28 obj2);
		friend mat28 operator-(mat28 obj1, mat28 obj2);
		friend mat28 operator-(mat28 obj);

		friend mat28 operator*(double a, mat28 obj);
		friend mat28 operator*(mat28 obj, double a);
		friend vec2 operator*(vec8 obj1, mat28 obj2);
		friend vec2 operator*(mat28 obj1, vec8 obj2);

		vec8 row(int num);
		vec2 col(int num);
		void set(int i, int j, double x);
		void row_set(int num, vec8 obj);
		void row_set(int num, double x0, double x1, double x2, double x3, double x4, double x5, double x6, double x7);
		void col_set(int num, vec2 obj);
		void col_set(int num, double x0, double x1, double x2, double x3, double x4, double x5, double x6, double x7);
		void disp(void);
		mat82 trans(void);
};

//================================================================================================//
// 2 x 9 matrix class                                                                             //
//================================================================================================//
class mat29{
	public:
		double A[2][9];
		static const int r = 2, c = 9;
		friend mat29 operator+(mat29 obj1, mat29 obj2);
		friend mat29 operator-(mat29 obj1, mat29 obj2);
		friend mat29 operator-(mat29 obj);

		friend mat29 operator*(double a, mat29 obj);
		friend mat29 operator*(mat29 obj, double a);
		friend vec2 operator*(vec9 obj1, mat29 obj2);
		friend vec2 operator*(mat29 obj1, vec9 obj2);

		vec9 row(int num);
		vec2 col(int num);
		void set(int i, int j, double x);
		void row_set(int num, vec9 obj);
		void row_set(int num, double x0, double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8);
		void col_set(int num, vec2 obj);
		void col_set(int num, double x0, double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8);
		void disp(void);
		mat92 trans(void);
};

//================================================================================================//
// 3 x 2 matrix class                                                                             //
//================================================================================================//
class mat32{
	public:
		double A[3][2];
		static const int r = 3, c = 2;
		friend mat32 operator+(mat32 obj1, mat32 obj2);
		friend mat32 operator-(mat32 obj1, mat32 obj2);
		friend mat32 operator-(mat32 obj);

		friend mat32 operator*(double a, mat32 obj);
		friend mat32 operator*(mat32 obj, double a);
		friend vec3 operator*(vec2 obj1, mat32 obj2);
		friend vec3 operator*(mat32 obj1, vec2 obj2);

		vec2 row(int num);
		vec3 col(int num);
		void set(int i, int j, double x);
		void row_set(int num, vec2 obj);
		void row_set(int num, double x0, double x1);
		void col_set(int num, vec3 obj);
		void col_set(int num, double x0, double x1);
		void disp(void);
		mat23 trans(void);
};

//================================================================================================//
// 3 x 3 matrix class                                                                             //
//================================================================================================//
class mat33{
	public:
		double A[3][3];
		static const int r = 3, c = 3;
		friend mat33 operator+(mat33 obj1, mat33 obj2);
		friend mat33 operator-(mat33 obj1, mat33 obj2);
		friend mat33 operator-(mat33 obj);

		friend mat33 operator*(double a, mat33 obj);
		friend mat33 operator*(mat33 obj, double a);
		friend vec3 operator*(vec3 obj1, mat33 obj2);
		friend vec3 operator*(mat33 obj1, vec3 obj2);

		vec3 row(int num);
		vec3 col(int num);
		void set(int i, int j, double x);
		void row_set(int num, vec3 obj);
		void row_set(int num, double x0, double x1, double x2);
		void col_set(int num, vec3 obj);
		void col_set(int num, double x0, double x1, double x2);
		void disp(void);
		mat33 trans(void);
		double det(void);
		mat33 inv(void);
};

//================================================================================================//
// 3 x 4 matrix class                                                                             //
//================================================================================================//
class mat34{
	public:
		double A[3][4];
		static const int r = 3, c = 4;
		friend mat34 operator+(mat34 obj1, mat34 obj2);
		friend mat34 operator-(mat34 obj1, mat34 obj2);
		friend mat34 operator-(mat34 obj);

		friend mat34 operator*(double a, mat34 obj);
		friend mat34 operator*(mat34 obj, double a);
		friend vec3 operator*(vec4 obj1, mat34 obj2);
		friend vec3 operator*(mat34 obj1, vec4 obj2);

		vec4 row(int num);
		vec3 col(int num);
		void set(int i, int j, double x);
		void row_set(int num, vec4 obj);
		void row_set(int num, double x0, double x1, double x2, double x3);
		void col_set(int num, vec3 obj);
		void col_set(int num, double x0, double x1, double x2, double x3);
		void disp(void);
		mat43 trans(void);
};

//================================================================================================//
// 3 x 5 matrix class                                                                             //
//================================================================================================//
class mat35{
	public:
		double A[3][5];
		static const int r = 3, c = 5;
		friend mat35 operator+(mat35 obj1, mat35 obj2);
		friend mat35 operator-(mat35 obj1, mat35 obj2);
		friend mat35 operator-(mat35 obj);

		friend mat35 operator*(double a, mat35 obj);
		friend mat35 operator*(mat35 obj, double a);
		friend vec3 operator*(vec5 obj1, mat35 obj2);
		friend vec3 operator*(mat35 obj1, vec5 obj2);

		vec5 row(int num);
		vec3 col(int num);
		void set(int i, int j, double x);
		void row_set(int num, vec5 obj);
		void row_set(int num, double x0, double x1, double x2, double x3, double x4);
		void col_set(int num, vec3 obj);
		void col_set(int num, double x0, double x1, double x2, double x3, double x4);
		void disp(void);
		mat53 trans(void);
};

//================================================================================================//
// 3 x 6 matrix class                                                                             //
//================================================================================================//
class mat36{
	public:
		double A[3][6];
		static const int r = 3, c = 6;
		friend mat36 operator+(mat36 obj1, mat36 obj2);
		friend mat36 operator-(mat36 obj1, mat36 obj2);
		friend mat36 operator-(mat36 obj);

		friend mat36 operator*(double a, mat36 obj);
		friend mat36 operator*(mat36 obj, double a);
		friend vec3 operator*(vec6 obj1, mat36 obj2);
		friend vec3 operator*(mat36 obj1, vec6 obj2);

		vec6 row(int num);
		vec3 col(int num);
		void set(int i, int j, double x);
		void row_set(int num, vec6 obj);
		void row_set(int num, double x0, double x1, double x2, double x3, double x4, double x5);
		void col_set(int num, vec3 obj);
		void col_set(int num, double x0, double x1, double x2, double x3, double x4, double x5);
		void disp(void);
		mat63 trans(void);
};

//================================================================================================//
// 3 x 7 matrix class                                                                             //
//================================================================================================//
class mat37{
	public:
		double A[3][7];
		static const int r = 3, c = 7;
		friend mat37 operator+(mat37 obj1, mat37 obj2);
		friend mat37 operator-(mat37 obj1, mat37 obj2);
		friend mat37 operator-(mat37 obj);

		friend mat37 operator*(double a, mat37 obj);
		friend mat37 operator*(mat37 obj, double a);
		friend vec3 operator*(vec7 obj1, mat37 obj2);
		friend vec3 operator*(mat37 obj1, vec7 obj2);

		vec7 row(int num);
		vec3 col(int num);
		void set(int i, int j, double x);
		void row_set(int num, vec7 obj);
		void row_set(int num, double x0, double x1, double x2, double x3, double x4, double x5, double x6);
		void col_set(int num, vec3 obj);
		void col_set(int num, double x0, double x1, double x2, double x3, double x4, double x5, double x6);
		void disp(void);
		mat73 trans(void);
};

//================================================================================================//
// 3 x 8 matrix class                                                                             //
//================================================================================================//
class mat38{
	public:
		double A[3][8];
		static const int r = 3, c = 8;
		friend mat38 operator+(mat38 obj1, mat38 obj2);
		friend mat38 operator-(mat38 obj1, mat38 obj2);
		friend mat38 operator-(mat38 obj);

		friend mat38 operator*(double a, mat38 obj);
		friend mat38 operator*(mat38 obj, double a);
		friend vec3 operator*(vec8 obj1, mat38 obj2);
		friend vec3 operator*(mat38 obj1, vec8 obj2);

		vec8 row(int num);
		vec3 col(int num);
		void set(int i, int j, double x);
		void row_set(int num, vec8 obj);
		void row_set(int num, double x0, double x1, double x2, double x3, double x4, double x5, double x6, double x7);
		void col_set(int num, vec3 obj);
		void col_set(int num, double x0, double x1, double x2, double x3, double x4, double x5, double x6, double x7);
		void disp(void);
		mat83 trans(void);
};

//================================================================================================//
// 3 x 9 matrix class                                                                             //
//================================================================================================//
class mat39{
	public:
		double A[3][9];
		static const int r = 3, c = 9;
		friend mat39 operator+(mat39 obj1, mat39 obj2);
		friend mat39 operator-(mat39 obj1, mat39 obj2);
		friend mat39 operator-(mat39 obj);

		friend mat39 operator*(double a, mat39 obj);
		friend mat39 operator*(mat39 obj, double a);
		friend vec3 operator*(vec9 obj1, mat39 obj2);
		friend vec3 operator*(mat39 obj1, vec9 obj2);

		vec9 row(int num);
		vec3 col(int num);
		void set(int i, int j, double x);
		void row_set(int num, vec9 obj);
		void row_set(int num, double x0, double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8);
		void col_set(int num, vec3 obj);
		void col_set(int num, double x0, double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8);
		void disp(void);
		mat93 trans(void);
};

//================================================================================================//
// 4 x 2 matrix class                                                                             //
//================================================================================================//
class mat42{
	public:
		double A[4][2];
		static const int r = 4, c = 2;
		friend mat42 operator+(mat42 obj1, mat42 obj2);
		friend mat42 operator-(mat42 obj1, mat42 obj2);
		friend mat42 operator-(mat42 obj);

		friend mat42 operator*(double a, mat42 obj);
		friend mat42 operator*(mat42 obj, double a);
		friend vec4 operator*(vec2 obj1, mat42 obj2);
		friend vec4 operator*(mat42 obj1, vec2 obj2);

		vec2 row(int num);
		vec4 col(int num);
		void set(int i, int j, double x);
		void row_set(int num, vec2 obj);
		void row_set(int num, double x0, double x1);
		void col_set(int num, vec4 obj);
		void col_set(int num, double x0, double x1);
		void disp(void);
		mat24 trans(void);
};

//================================================================================================//
// 4 x 3 matrix class                                                                             //
//================================================================================================//
class mat43{
	public:
		double A[4][3];
		static const int r = 4, c = 3;
		friend mat43 operator+(mat43 obj1, mat43 obj2);
		friend mat43 operator-(mat43 obj1, mat43 obj2);
		friend mat43 operator-(mat43 obj);

		friend mat43 operator*(double a, mat43 obj);
		friend mat43 operator*(mat43 obj, double a);
		friend vec4 operator*(vec3 obj1, mat43 obj2);
		friend vec4 operator*(mat43 obj1, vec3 obj2);

		vec3 row(int num);
		vec4 col(int num);
		void set(int i, int j, double x);
		void row_set(int num, vec3 obj);
		void row_set(int num, double x0, double x1, double x2);
		void col_set(int num, vec4 obj);
		void col_set(int num, double x0, double x1, double x2);
		void disp(void);
		mat34 trans(void);
};

//================================================================================================//
// 4 x 4 matrix class                                                                             //
//================================================================================================//
class mat44{
	public:
		double A[4][4];
		static const int r = 4, c = 4;
		friend mat44 operator+(mat44 obj1, mat44 obj2);
		friend mat44 operator-(mat44 obj1, mat44 obj2);
		friend mat44 operator-(mat44 obj);

		friend mat44 operator*(double a, mat44 obj);
		friend mat44 operator*(mat44 obj, double a);
		friend vec4 operator*(vec4 obj1, mat44 obj2);
		friend vec4 operator*(mat44 obj1, vec4 obj2);

		vec4 row(int num);
		vec4 col(int num);
		void set(int i, int j, double x);
		void row_set(int num, vec4 obj);
		void row_set(int num, double x0, double x1, double x2, double x3);
		void col_set(int num, vec4 obj);
		void col_set(int num, double x0, double x1, double x2, double x3);
		void disp(void);
		mat44 trans(void);
		double det(void);
		mat44 inv(void);
};

//================================================================================================//
// 4 x 5 matrix class                                                                             //
//================================================================================================//
class mat45{
	public:
		double A[4][5];
		static const int r = 4, c = 5;
		friend mat45 operator+(mat45 obj1, mat45 obj2);
		friend mat45 operator-(mat45 obj1, mat45 obj2);
		friend mat45 operator-(mat45 obj);

		friend mat45 operator*(double a, mat45 obj);
		friend mat45 operator*(mat45 obj, double a);
		friend vec4 operator*(vec5 obj1, mat45 obj2);
		friend vec4 operator*(mat45 obj1, vec5 obj2);

		vec5 row(int num);
		vec4 col(int num);
		void set(int i, int j, double x);
		void row_set(int num, vec5 obj);
		void row_set(int num, double x0, double x1, double x2, double x3, double x4);
		void col_set(int num, vec4 obj);
		void col_set(int num, double x0, double x1, double x2, double x3, double x4);
		void disp(void);
		mat54 trans(void);
};

//================================================================================================//
// 4 x 6 matrix class                                                                             //
//================================================================================================//
class mat46{
	public:
		double A[4][6];
		static const int r = 4, c = 6;
		friend mat46 operator+(mat46 obj1, mat46 obj2);
		friend mat46 operator-(mat46 obj1, mat46 obj2);
		friend mat46 operator-(mat46 obj);

		friend mat46 operator*(double a, mat46 obj);
		friend mat46 operator*(mat46 obj, double a);
		friend vec4 operator*(vec6 obj1, mat46 obj2);
		friend vec4 operator*(mat46 obj1, vec6 obj2);

		vec6 row(int num);
		vec4 col(int num);
		void set(int i, int j, double x);
		void row_set(int num, vec6 obj);
		void row_set(int num, double x0, double x1, double x2, double x3, double x4, double x5);
		void col_set(int num, vec4 obj);
		void col_set(int num, double x0, double x1, double x2, double x3, double x4, double x5);
		void disp(void);
		mat64 trans(void);
};

//================================================================================================//
// 4 x 7 matrix class                                                                             //
//================================================================================================//
class mat47{
	public:
		double A[4][7];
		static const int r = 4, c = 7;
		friend mat47 operator+(mat47 obj1, mat47 obj2);
		friend mat47 operator-(mat47 obj1, mat47 obj2);
		friend mat47 operator-(mat47 obj);

		friend mat47 operator*(double a, mat47 obj);
		friend mat47 operator*(mat47 obj, double a);
		friend vec4 operator*(vec7 obj1, mat47 obj2);
		friend vec4 operator*(mat47 obj1, vec7 obj2);

		vec7 row(int num);
		vec4 col(int num);
		void set(int i, int j, double x);
		void row_set(int num, vec7 obj);
		void row_set(int num, double x0, double x1, double x2, double x3, double x4, double x5, double x6);
		void col_set(int num, vec4 obj);
		void col_set(int num, double x0, double x1, double x2, double x3, double x4, double x5, double x6);
		void disp(void);
		mat74 trans(void);
};

//================================================================================================//
// 4 x 8 matrix class                                                                             //
//================================================================================================//
class mat48{
	public:
		double A[4][8];
		static const int r = 4, c = 8;
		friend mat48 operator+(mat48 obj1, mat48 obj2);
		friend mat48 operator-(mat48 obj1, mat48 obj2);
		friend mat48 operator-(mat48 obj);

		friend mat48 operator*(double a, mat48 obj);
		friend mat48 operator*(mat48 obj, double a);
		friend vec4 operator*(vec8 obj1, mat48 obj2);
		friend vec4 operator*(mat48 obj1, vec8 obj2);

		vec8 row(int num);
		vec4 col(int num);
		void set(int i, int j, double x);
		void row_set(int num, vec8 obj);
		void row_set(int num, double x0, double x1, double x2, double x3, double x4, double x5, double x6, double x7);
		void col_set(int num, vec4 obj);
		void col_set(int num, double x0, double x1, double x2, double x3, double x4, double x5, double x6, double x7);
		void disp(void);
		mat84 trans(void);
};

//================================================================================================//
// 4 x 9 matrix class                                                                             //
//================================================================================================//
class mat49{
	public:
		double A[4][9];
		static const int r = 4, c = 9;
		friend mat49 operator+(mat49 obj1, mat49 obj2);
		friend mat49 operator-(mat49 obj1, mat49 obj2);
		friend mat49 operator-(mat49 obj);

		friend mat49 operator*(double a, mat49 obj);
		friend mat49 operator*(mat49 obj, double a);
		friend vec4 operator*(vec9 obj1, mat49 obj2);
		friend vec4 operator*(mat49 obj1, vec9 obj2);

		vec9 row(int num);
		vec4 col(int num);
		void set(int i, int j, double x);
		void row_set(int num, vec9 obj);
		void row_set(int num, double x0, double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8);
		void col_set(int num, vec4 obj);
		void col_set(int num, double x0, double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8);
		void disp(void);
		mat94 trans(void);
};

//================================================================================================//
// 5 x 2 matrix class                                                                             //
//================================================================================================//
class mat52{
	public:
		double A[5][2];
		static const int r = 5, c = 2;
		friend mat52 operator+(mat52 obj1, mat52 obj2);
		friend mat52 operator-(mat52 obj1, mat52 obj2);
		friend mat52 operator-(mat52 obj);

		friend mat52 operator*(double a, mat52 obj);
		friend mat52 operator*(mat52 obj, double a);
		friend vec5 operator*(vec2 obj1, mat52 obj2);
		friend vec5 operator*(mat52 obj1, vec2 obj2);

		vec2 row(int num);
		vec5 col(int num);
		void set(int i, int j, double x);
		void row_set(int num, vec2 obj);
		void row_set(int num, double x0, double x1);
		void col_set(int num, vec5 obj);
		void col_set(int num, double x0, double x1);
		void disp(void);
		mat25 trans(void);
};

//================================================================================================//
// 5 x 3 matrix class                                                                             //
//================================================================================================//
class mat53{
	public:
		double A[5][3];
		static const int r = 5, c = 3;
		friend mat53 operator+(mat53 obj1, mat53 obj2);
		friend mat53 operator-(mat53 obj1, mat53 obj2);
		friend mat53 operator-(mat53 obj);

		friend mat53 operator*(double a, mat53 obj);
		friend mat53 operator*(mat53 obj, double a);
		friend vec5 operator*(vec3 obj1, mat53 obj2);
		friend vec5 operator*(mat53 obj1, vec3 obj2);

		vec3 row(int num);
		vec5 col(int num);
		void set(int i, int j, double x);
		void row_set(int num, vec3 obj);
		void row_set(int num, double x0, double x1, double x2);
		void col_set(int num, vec5 obj);
		void col_set(int num, double x0, double x1, double x2);
		void disp(void);
		mat35 trans(void);
};

//================================================================================================//
// 5 x 4 matrix class                                                                             //
//================================================================================================//
class mat54{
	public:
		double A[5][4];
		static const int r = 5, c = 4;
		friend mat54 operator+(mat54 obj1, mat54 obj2);
		friend mat54 operator-(mat54 obj1, mat54 obj2);
		friend mat54 operator-(mat54 obj);

		friend mat54 operator*(double a, mat54 obj);
		friend mat54 operator*(mat54 obj, double a);
		friend vec5 operator*(vec4 obj1, mat54 obj2);
		friend vec5 operator*(mat54 obj1, vec4 obj2);

		vec4 row(int num);
		vec5 col(int num);
		void set(int i, int j, double x);
		void row_set(int num, vec4 obj);
		void row_set(int num, double x0, double x1, double x2, double x3);
		void col_set(int num, vec5 obj);
		void col_set(int num, double x0, double x1, double x2, double x3);
		void disp(void);
		mat45 trans(void);
};

//================================================================================================//
// 5 x 5 matrix class                                                                             //
//================================================================================================//
class mat55{
	public:
		double A[5][5];
		static const int r = 5, c = 5;
		friend mat55 operator+(mat55 obj1, mat55 obj2);
		friend mat55 operator-(mat55 obj1, mat55 obj2);
		friend mat55 operator-(mat55 obj);

		friend mat55 operator*(double a, mat55 obj);
		friend mat55 operator*(mat55 obj, double a);
		friend vec5 operator*(vec5 obj1, mat55 obj2);
		friend vec5 operator*(mat55 obj1, vec5 obj2);

		vec5 row(int num);
		vec5 col(int num);
		void set(int i, int j, double x);
		void row_set(int num, vec5 obj);
		void row_set(int num, double x0, double x1, double x2, double x3, double x4);
		void col_set(int num, vec5 obj);
		void col_set(int num, double x0, double x1, double x2, double x3, double x4);
		void disp(void);
		mat55 trans(void);
		double det(void);
		mat55 inv(void);
};

//================================================================================================//
// 5 x 6 matrix class                                                                             //
//================================================================================================//
class mat56{
	public:
		double A[5][6];
		static const int r = 5, c = 6;
		friend mat56 operator+(mat56 obj1, mat56 obj2);
		friend mat56 operator-(mat56 obj1, mat56 obj2);
		friend mat56 operator-(mat56 obj);

		friend mat56 operator*(double a, mat56 obj);
		friend mat56 operator*(mat56 obj, double a);
		friend vec5 operator*(vec6 obj1, mat56 obj2);
		friend vec5 operator*(mat56 obj1, vec6 obj2);

		vec6 row(int num);
		vec5 col(int num);
		void set(int i, int j, double x);
		void row_set(int num, vec6 obj);
		void row_set(int num, double x0, double x1, double x2, double x3, double x4, double x5);
		void col_set(int num, vec5 obj);
		void col_set(int num, double x0, double x1, double x2, double x3, double x4, double x5);
		void disp(void);
		mat65 trans(void);
};

//================================================================================================//
// 5 x 7 matrix class                                                                             //
//================================================================================================//
class mat57{
	public:
		double A[5][7];
		static const int r = 5, c = 7;
		friend mat57 operator+(mat57 obj1, mat57 obj2);
		friend mat57 operator-(mat57 obj1, mat57 obj2);
		friend mat57 operator-(mat57 obj);

		friend mat57 operator*(double a, mat57 obj);
		friend mat57 operator*(mat57 obj, double a);
		friend vec5 operator*(vec7 obj1, mat57 obj2);
		friend vec5 operator*(mat57 obj1, vec7 obj2);

		vec7 row(int num);
		vec5 col(int num);
		void set(int i, int j, double x);
		void row_set(int num, vec7 obj);
		void row_set(int num, double x0, double x1, double x2, double x3, double x4, double x5, double x6);
		void col_set(int num, vec5 obj);
		void col_set(int num, double x0, double x1, double x2, double x3, double x4, double x5, double x6);
		void disp(void);
		mat75 trans(void);
};

//================================================================================================//
// 5 x 8 matrix class                                                                             //
//================================================================================================//
class mat58{
	public:
		double A[5][8];
		static const int r = 5, c = 8;
		friend mat58 operator+(mat58 obj1, mat58 obj2);
		friend mat58 operator-(mat58 obj1, mat58 obj2);
		friend mat58 operator-(mat58 obj);

		friend mat58 operator*(double a, mat58 obj);
		friend mat58 operator*(mat58 obj, double a);
		friend vec5 operator*(vec8 obj1, mat58 obj2);
		friend vec5 operator*(mat58 obj1, vec8 obj2);

		vec8 row(int num);
		vec5 col(int num);
		void set(int i, int j, double x);
		void row_set(int num, vec8 obj);
		void row_set(int num, double x0, double x1, double x2, double x3, double x4, double x5, double x6, double x7);
		void col_set(int num, vec5 obj);
		void col_set(int num, double x0, double x1, double x2, double x3, double x4, double x5, double x6, double x7);
		void disp(void);
		mat85 trans(void);
};

//================================================================================================//
// 5 x 9 matrix class                                                                             //
//================================================================================================//
class mat59{
	public:
		double A[5][9];
		static const int r = 5, c = 9;
		friend mat59 operator+(mat59 obj1, mat59 obj2);
		friend mat59 operator-(mat59 obj1, mat59 obj2);
		friend mat59 operator-(mat59 obj);

		friend mat59 operator*(double a, mat59 obj);
		friend mat59 operator*(mat59 obj, double a);
		friend vec5 operator*(vec9 obj1, mat59 obj2);
		friend vec5 operator*(mat59 obj1, vec9 obj2);

		vec9 row(int num);
		vec5 col(int num);
		void set(int i, int j, double x);
		void row_set(int num, vec9 obj);
		void row_set(int num, double x0, double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8);
		void col_set(int num, vec5 obj);
		void col_set(int num, double x0, double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8);
		void disp(void);
		mat95 trans(void);
};

//================================================================================================//
// 6 x 2 matrix class                                                                             //
//================================================================================================//
class mat62{
	public:
		double A[6][2];
		static const int r = 6, c = 2;
		friend mat62 operator+(mat62 obj1, mat62 obj2);
		friend mat62 operator-(mat62 obj1, mat62 obj2);
		friend mat62 operator-(mat62 obj);

		friend mat62 operator*(double a, mat62 obj);
		friend mat62 operator*(mat62 obj, double a);
		friend vec6 operator*(vec2 obj1, mat62 obj2);
		friend vec6 operator*(mat62 obj1, vec2 obj2);

		vec2 row(int num);
		vec6 col(int num);
		void set(int i, int j, double x);
		void row_set(int num, vec2 obj);
		void row_set(int num, double x0, double x1);
		void col_set(int num, vec6 obj);
		void col_set(int num, double x0, double x1);
		void disp(void);
		mat26 trans(void);
};

//================================================================================================//
// 6 x 3 matrix class                                                                             //
//================================================================================================//
class mat63{
	public:
		double A[6][3];
		static const int r = 6, c = 3;
		friend mat63 operator+(mat63 obj1, mat63 obj2);
		friend mat63 operator-(mat63 obj1, mat63 obj2);
		friend mat63 operator-(mat63 obj);

		friend mat63 operator*(double a, mat63 obj);
		friend mat63 operator*(mat63 obj, double a);
		friend vec6 operator*(vec3 obj1, mat63 obj2);
		friend vec6 operator*(mat63 obj1, vec3 obj2);

		vec3 row(int num);
		vec6 col(int num);
		void set(int i, int j, double x);
		void row_set(int num, vec3 obj);
		void row_set(int num, double x0, double x1, double x2);
		void col_set(int num, vec6 obj);
		void col_set(int num, double x0, double x1, double x2);
		void disp(void);
		mat36 trans(void);
};

//================================================================================================//
// 6 x 4 matrix class                                                                             //
//================================================================================================//
class mat64{
	public:
		double A[6][4];
		static const int r = 6, c = 4;
		friend mat64 operator+(mat64 obj1, mat64 obj2);
		friend mat64 operator-(mat64 obj1, mat64 obj2);
		friend mat64 operator-(mat64 obj);

		friend mat64 operator*(double a, mat64 obj);
		friend mat64 operator*(mat64 obj, double a);
		friend vec6 operator*(vec4 obj1, mat64 obj2);
		friend vec6 operator*(mat64 obj1, vec4 obj2);

		vec4 row(int num);
		vec6 col(int num);
		void set(int i, int j, double x);
		void row_set(int num, vec4 obj);
		void row_set(int num, double x0, double x1, double x2, double x3);
		void col_set(int num, vec6 obj);
		void col_set(int num, double x0, double x1, double x2, double x3);
		void disp(void);
		mat46 trans(void);
};

//================================================================================================//
// 6 x 5 matrix class                                                                             //
//================================================================================================//
class mat65{
	public:
		double A[6][5];
		static const int r = 6, c = 5;
		friend mat65 operator+(mat65 obj1, mat65 obj2);
		friend mat65 operator-(mat65 obj1, mat65 obj2);
		friend mat65 operator-(mat65 obj);

		friend mat65 operator*(double a, mat65 obj);
		friend mat65 operator*(mat65 obj, double a);
		friend vec6 operator*(vec5 obj1, mat65 obj2);
		friend vec6 operator*(mat65 obj1, vec5 obj2);

		vec5 row(int num);
		vec6 col(int num);
		void set(int i, int j, double x);
		void row_set(int num, vec5 obj);
		void row_set(int num, double x0, double x1, double x2, double x3, double x4);
		void col_set(int num, vec6 obj);
		void col_set(int num, double x0, double x1, double x2, double x3, double x4);
		void disp(void);
		mat56 trans(void);
};

//================================================================================================//
// 6 x 6 matrix class                                                                             //
//================================================================================================//
class mat66{
	public:
		double A[6][6];
		static const int r = 6, c = 6;
		friend mat66 operator+(mat66 obj1, mat66 obj2);
		friend mat66 operator-(mat66 obj1, mat66 obj2);
		friend mat66 operator-(mat66 obj);

		friend mat66 operator*(double a, mat66 obj);
		friend mat66 operator*(mat66 obj, double a);
		friend vec6 operator*(vec6 obj1, mat66 obj2);
		friend vec6 operator*(mat66 obj1, vec6 obj2);

		vec6 row(int num);
		vec6 col(int num);
		void set(int i, int j, double x);
		void row_set(int num, vec6 obj);
		void row_set(int num, double x0, double x1, double x2, double x3, double x4, double x5);
		void col_set(int num, vec6 obj);
		void col_set(int num, double x0, double x1, double x2, double x3, double x4, double x5);
		void disp(void);
		mat66 trans(void);
		double det(void);
		mat66 inv(void);
};

//================================================================================================//
// 6 x 7 matrix class                                                                             //
//================================================================================================//
class mat67{
	public:
		double A[6][7];
		static const int r = 6, c = 7;
		friend mat67 operator+(mat67 obj1, mat67 obj2);
		friend mat67 operator-(mat67 obj1, mat67 obj2);
		friend mat67 operator-(mat67 obj);

		friend mat67 operator*(double a, mat67 obj);
		friend mat67 operator*(mat67 obj, double a);
		friend vec6 operator*(vec7 obj1, mat67 obj2);
		friend vec6 operator*(mat67 obj1, vec7 obj2);

		vec7 row(int num);
		vec6 col(int num);
		void set(int i, int j, double x);
		void row_set(int num, vec7 obj);
		void row_set(int num, double x0, double x1, double x2, double x3, double x4, double x5, double x6);
		void col_set(int num, vec6 obj);
		void col_set(int num, double x0, double x1, double x2, double x3, double x4, double x5, double x6);
		void disp(void);
		mat76 trans(void);
};

//================================================================================================//
// 6 x 8 matrix class                                                                             //
//================================================================================================//
class mat68{
	public:
		double A[6][8];
		static const int r = 6, c = 8;
		friend mat68 operator+(mat68 obj1, mat68 obj2);
		friend mat68 operator-(mat68 obj1, mat68 obj2);
		friend mat68 operator-(mat68 obj);

		friend mat68 operator*(double a, mat68 obj);
		friend mat68 operator*(mat68 obj, double a);
		friend vec6 operator*(vec8 obj1, mat68 obj2);
		friend vec6 operator*(mat68 obj1, vec8 obj2);

		vec8 row(int num);
		vec6 col(int num);
		void set(int i, int j, double x);
		void row_set(int num, vec8 obj);
		void row_set(int num, double x0, double x1, double x2, double x3, double x4, double x5, double x6, double x7);
		void col_set(int num, vec6 obj);
		void col_set(int num, double x0, double x1, double x2, double x3, double x4, double x5, double x6, double x7);
		void disp(void);
		mat86 trans(void);
};

//================================================================================================//
// 6 x 9 matrix class                                                                             //
//================================================================================================//
class mat69{
	public:
		double A[6][9];
		static const int r = 6, c = 9;
		friend mat69 operator+(mat69 obj1, mat69 obj2);
		friend mat69 operator-(mat69 obj1, mat69 obj2);
		friend mat69 operator-(mat69 obj);

		friend mat69 operator*(double a, mat69 obj);
		friend mat69 operator*(mat69 obj, double a);
		friend vec6 operator*(vec9 obj1, mat69 obj2);
		friend vec6 operator*(mat69 obj1, vec9 obj2);

		vec9 row(int num);
		vec6 col(int num);
		void set(int i, int j, double x);
		void row_set(int num, vec9 obj);
		void row_set(int num, double x0, double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8);
		void col_set(int num, vec6 obj);
		void col_set(int num, double x0, double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8);
		void disp(void);
		mat96 trans(void);
};

//================================================================================================//
// 7 x 2 matrix class                                                                             //
//================================================================================================//
class mat72{
	public:
		double A[7][2];
		static const int r = 7, c = 2;
		friend mat72 operator+(mat72 obj1, mat72 obj2);
		friend mat72 operator-(mat72 obj1, mat72 obj2);
		friend mat72 operator-(mat72 obj);

		friend mat72 operator*(double a, mat72 obj);
		friend mat72 operator*(mat72 obj, double a);
		friend vec7 operator*(vec2 obj1, mat72 obj2);
		friend vec7 operator*(mat72 obj1, vec2 obj2);

		vec2 row(int num);
		vec7 col(int num);
		void set(int i, int j, double x);
		void row_set(int num, vec2 obj);
		void row_set(int num, double x0, double x1);
		void col_set(int num, vec7 obj);
		void col_set(int num, double x0, double x1);
		void disp(void);
		mat27 trans(void);
};

//================================================================================================//
// 7 x 3 matrix class                                                                             //
//================================================================================================//
class mat73{
	public:
		double A[7][3];
		static const int r = 7, c = 3;
		friend mat73 operator+(mat73 obj1, mat73 obj2);
		friend mat73 operator-(mat73 obj1, mat73 obj2);
		friend mat73 operator-(mat73 obj);

		friend mat73 operator*(double a, mat73 obj);
		friend mat73 operator*(mat73 obj, double a);
		friend vec7 operator*(vec3 obj1, mat73 obj2);
		friend vec7 operator*(mat73 obj1, vec3 obj2);

		vec3 row(int num);
		vec7 col(int num);
		void set(int i, int j, double x);
		void row_set(int num, vec3 obj);
		void row_set(int num, double x0, double x1, double x2);
		void col_set(int num, vec7 obj);
		void col_set(int num, double x0, double x1, double x2);
		void disp(void);
		mat37 trans(void);
};

//================================================================================================//
// 7 x 4 matrix class                                                                             //
//================================================================================================//
class mat74{
	public:
		double A[7][4];
		static const int r = 7, c = 4;
		friend mat74 operator+(mat74 obj1, mat74 obj2);
		friend mat74 operator-(mat74 obj1, mat74 obj2);
		friend mat74 operator-(mat74 obj);

		friend mat74 operator*(double a, mat74 obj);
		friend mat74 operator*(mat74 obj, double a);
		friend vec7 operator*(vec4 obj1, mat74 obj2);
		friend vec7 operator*(mat74 obj1, vec4 obj2);

		vec4 row(int num);
		vec7 col(int num);
		void set(int i, int j, double x);
		void row_set(int num, vec4 obj);
		void row_set(int num, double x0, double x1, double x2, double x3);
		void col_set(int num, vec7 obj);
		void col_set(int num, double x0, double x1, double x2, double x3);
		void disp(void);
		mat47 trans(void);
};

//================================================================================================//
// 7 x 5 matrix class                                                                             //
//================================================================================================//
class mat75{
	public:
		double A[7][5];
		static const int r = 7, c = 5;
		friend mat75 operator+(mat75 obj1, mat75 obj2);
		friend mat75 operator-(mat75 obj1, mat75 obj2);
		friend mat75 operator-(mat75 obj);

		friend mat75 operator*(double a, mat75 obj);
		friend mat75 operator*(mat75 obj, double a);
		friend vec7 operator*(vec5 obj1, mat75 obj2);
		friend vec7 operator*(mat75 obj1, vec5 obj2);

		vec5 row(int num);
		vec7 col(int num);
		void set(int i, int j, double x);
		void row_set(int num, vec5 obj);
		void row_set(int num, double x0, double x1, double x2, double x3, double x4);
		void col_set(int num, vec7 obj);
		void col_set(int num, double x0, double x1, double x2, double x3, double x4);
		void disp(void);
		mat57 trans(void);
};

//================================================================================================//
// 7 x 6 matrix class                                                                             //
//================================================================================================//
class mat76{
	public:
		double A[7][6];
		static const int r = 7, c = 6;
		friend mat76 operator+(mat76 obj1, mat76 obj2);
		friend mat76 operator-(mat76 obj1, mat76 obj2);
		friend mat76 operator-(mat76 obj);

		friend mat76 operator*(double a, mat76 obj);
		friend mat76 operator*(mat76 obj, double a);
		friend vec7 operator*(vec6 obj1, mat76 obj2);
		friend vec7 operator*(mat76 obj1, vec6 obj2);

		vec6 row(int num);
		vec7 col(int num);
		void set(int i, int j, double x);
		void row_set(int num, vec6 obj);
		void row_set(int num, double x0, double x1, double x2, double x3, double x4, double x5);
		void col_set(int num, vec7 obj);
		void col_set(int num, double x0, double x1, double x2, double x3, double x4, double x5);
		void disp(void);
		mat67 trans(void);
};

//================================================================================================//
// 7 x 7 matrix class                                                                             //
//================================================================================================//
class mat77{
	public:
		double A[7][7];
		static const int r = 7, c = 7;
		friend mat77 operator+(mat77 obj1, mat77 obj2);
		friend mat77 operator-(mat77 obj1, mat77 obj2);
		friend mat77 operator-(mat77 obj);

		friend mat77 operator*(double a, mat77 obj);
		friend mat77 operator*(mat77 obj, double a);
		friend vec7 operator*(vec7 obj1, mat77 obj2);
		friend vec7 operator*(mat77 obj1, vec7 obj2);

		vec7 row(int num);
		vec7 col(int num);
		void set(int i, int j, double x);
		void row_set(int num, vec7 obj);
		void row_set(int num, double x0, double x1, double x2, double x3, double x4, double x5, double x6);
		void col_set(int num, vec7 obj);
		void col_set(int num, double x0, double x1, double x2, double x3, double x4, double x5, double x6);
		void disp(void);
		mat77 trans(void);
		double det(void);
		mat77 inv(void);
};

//================================================================================================//
// 7 x 8 matrix class                                                                             //
//================================================================================================//
class mat78{
	public:
		double A[7][8];
		static const int r = 7, c = 8;
		friend mat78 operator+(mat78 obj1, mat78 obj2);
		friend mat78 operator-(mat78 obj1, mat78 obj2);
		friend mat78 operator-(mat78 obj);

		friend mat78 operator*(double a, mat78 obj);
		friend mat78 operator*(mat78 obj, double a);
		friend vec7 operator*(vec8 obj1, mat78 obj2);
		friend vec7 operator*(mat78 obj1, vec8 obj2);

		vec8 row(int num);
		vec7 col(int num);
		void set(int i, int j, double x);
		void row_set(int num, vec8 obj);
		void row_set(int num, double x0, double x1, double x2, double x3, double x4, double x5, double x6, double x7);
		void col_set(int num, vec7 obj);
		void col_set(int num, double x0, double x1, double x2, double x3, double x4, double x5, double x6, double x7);
		void disp(void);
		mat87 trans(void);
};

//================================================================================================//
// 7 x 9 matrix class                                                                             //
//================================================================================================//
class mat79{
	public:
		double A[7][9];
		static const int r = 7, c = 9;
		friend mat79 operator+(mat79 obj1, mat79 obj2);
		friend mat79 operator-(mat79 obj1, mat79 obj2);
		friend mat79 operator-(mat79 obj);

		friend mat79 operator*(double a, mat79 obj);
		friend mat79 operator*(mat79 obj, double a);
		friend vec7 operator*(vec9 obj1, mat79 obj2);
		friend vec7 operator*(mat79 obj1, vec9 obj2);

		vec9 row(int num);
		vec7 col(int num);
		void set(int i, int j, double x);
		void row_set(int num, vec9 obj);
		void row_set(int num, double x0, double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8);
		void col_set(int num, vec7 obj);
		void col_set(int num, double x0, double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8);
		void disp(void);
		mat97 trans(void);
};

//================================================================================================//
// 8 x 2 matrix class                                                                             //
//================================================================================================//
class mat82{
	public:
		double A[8][2];
		static const int r = 8, c = 2;
		friend mat82 operator+(mat82 obj1, mat82 obj2);
		friend mat82 operator-(mat82 obj1, mat82 obj2);
		friend mat82 operator-(mat82 obj);

		friend mat82 operator*(double a, mat82 obj);
		friend mat82 operator*(mat82 obj, double a);
		friend vec8 operator*(vec2 obj1, mat82 obj2);
		friend vec8 operator*(mat82 obj1, vec2 obj2);

		vec2 row(int num);
		vec8 col(int num);
		void set(int i, int j, double x);
		void row_set(int num, vec2 obj);
		void row_set(int num, double x0, double x1);
		void col_set(int num, vec8 obj);
		void col_set(int num, double x0, double x1);
		void disp(void);
		mat28 trans(void);
};

//================================================================================================//
// 8 x 3 matrix class                                                                             //
//================================================================================================//
class mat83{
	public:
		double A[8][3];
		static const int r = 8, c = 3;
		friend mat83 operator+(mat83 obj1, mat83 obj2);
		friend mat83 operator-(mat83 obj1, mat83 obj2);
		friend mat83 operator-(mat83 obj);

		friend mat83 operator*(double a, mat83 obj);
		friend mat83 operator*(mat83 obj, double a);
		friend vec8 operator*(vec3 obj1, mat83 obj2);
		friend vec8 operator*(mat83 obj1, vec3 obj2);

		vec3 row(int num);
		vec8 col(int num);
		void set(int i, int j, double x);
		void row_set(int num, vec3 obj);
		void row_set(int num, double x0, double x1, double x2);
		void col_set(int num, vec8 obj);
		void col_set(int num, double x0, double x1, double x2);
		void disp(void);
		mat38 trans(void);
};

//================================================================================================//
// 8 x 4 matrix class                                                                             //
//================================================================================================//
class mat84{
	public:
		double A[8][4];
		static const int r = 8, c = 4;
		friend mat84 operator+(mat84 obj1, mat84 obj2);
		friend mat84 operator-(mat84 obj1, mat84 obj2);
		friend mat84 operator-(mat84 obj);

		friend mat84 operator*(double a, mat84 obj);
		friend mat84 operator*(mat84 obj, double a);
		friend vec8 operator*(vec4 obj1, mat84 obj2);
		friend vec8 operator*(mat84 obj1, vec4 obj2);

		vec4 row(int num);
		vec8 col(int num);
		void set(int i, int j, double x);
		void row_set(int num, vec4 obj);
		void row_set(int num, double x0, double x1, double x2, double x3);
		void col_set(int num, vec8 obj);
		void col_set(int num, double x0, double x1, double x2, double x3);
		void disp(void);
		mat48 trans(void);
};

//================================================================================================//
// 8 x 5 matrix class                                                                             //
//================================================================================================//
class mat85{
	public:
		double A[8][5];
		static const int r = 8, c = 5;
		friend mat85 operator+(mat85 obj1, mat85 obj2);
		friend mat85 operator-(mat85 obj1, mat85 obj2);
		friend mat85 operator-(mat85 obj);

		friend mat85 operator*(double a, mat85 obj);
		friend mat85 operator*(mat85 obj, double a);
		friend vec8 operator*(vec5 obj1, mat85 obj2);
		friend vec8 operator*(mat85 obj1, vec5 obj2);

		vec5 row(int num);
		vec8 col(int num);
		void set(int i, int j, double x);
		void row_set(int num, vec5 obj);
		void row_set(int num, double x0, double x1, double x2, double x3, double x4);
		void col_set(int num, vec8 obj);
		void col_set(int num, double x0, double x1, double x2, double x3, double x4);
		void disp(void);
		mat58 trans(void);
};

//================================================================================================//
// 8 x 6 matrix class                                                                             //
//================================================================================================//
class mat86{
	public:
		double A[8][6];
		static const int r = 8, c = 6;
		friend mat86 operator+(mat86 obj1, mat86 obj2);
		friend mat86 operator-(mat86 obj1, mat86 obj2);
		friend mat86 operator-(mat86 obj);

		friend mat86 operator*(double a, mat86 obj);
		friend mat86 operator*(mat86 obj, double a);
		friend vec8 operator*(vec6 obj1, mat86 obj2);
		friend vec8 operator*(mat86 obj1, vec6 obj2);

		vec6 row(int num);
		vec8 col(int num);
		void set(int i, int j, double x);
		void row_set(int num, vec6 obj);
		void row_set(int num, double x0, double x1, double x2, double x3, double x4, double x5);
		void col_set(int num, vec8 obj);
		void col_set(int num, double x0, double x1, double x2, double x3, double x4, double x5);
		void disp(void);
		mat68 trans(void);
};

//================================================================================================//
// 8 x 7 matrix class                                                                             //
//================================================================================================//
class mat87{
	public:
		double A[8][7];
		static const int r = 8, c = 7;
		friend mat87 operator+(mat87 obj1, mat87 obj2);
		friend mat87 operator-(mat87 obj1, mat87 obj2);
		friend mat87 operator-(mat87 obj);

		friend mat87 operator*(double a, mat87 obj);
		friend mat87 operator*(mat87 obj, double a);
		friend vec8 operator*(vec7 obj1, mat87 obj2);
		friend vec8 operator*(mat87 obj1, vec7 obj2);

		vec7 row(int num);
		vec8 col(int num);
		void set(int i, int j, double x);
		void row_set(int num, vec7 obj);
		void row_set(int num, double x0, double x1, double x2, double x3, double x4, double x5, double x6);
		void col_set(int num, vec8 obj);
		void col_set(int num, double x0, double x1, double x2, double x3, double x4, double x5, double x6);
		void disp(void);
		mat78 trans(void);
};

//================================================================================================//
// 8 x 8 matrix class                                                                             //
//================================================================================================//
class mat88{
	public:
		double A[8][8];
		static const int r = 8, c = 8;
		friend mat88 operator+(mat88 obj1, mat88 obj2);
		friend mat88 operator-(mat88 obj1, mat88 obj2);
		friend mat88 operator-(mat88 obj);

		friend mat88 operator*(double a, mat88 obj);
		friend mat88 operator*(mat88 obj, double a);
		friend vec8 operator*(vec8 obj1, mat88 obj2);
		friend vec8 operator*(mat88 obj1, vec8 obj2);

		vec8 row(int num);
		vec8 col(int num);
		void set(int i, int j, double x);
		void row_set(int num, vec8 obj);
		void row_set(int num, double x0, double x1, double x2, double x3, double x4, double x5, double x6, double x7);
		void col_set(int num, vec8 obj);
		void col_set(int num, double x0, double x1, double x2, double x3, double x4, double x5, double x6, double x7);
		void disp(void);
		mat88 trans(void);
		double det(void);
		mat88 inv(void);
};

//================================================================================================//
// 8 x 9 matrix class                                                                             //
//================================================================================================//
class mat89{
	public:
		double A[8][9];
		static const int r = 8, c = 9;
		friend mat89 operator+(mat89 obj1, mat89 obj2);
		friend mat89 operator-(mat89 obj1, mat89 obj2);
		friend mat89 operator-(mat89 obj);

		friend mat89 operator*(double a, mat89 obj);
		friend mat89 operator*(mat89 obj, double a);
		friend vec8 operator*(vec9 obj1, mat89 obj2);
		friend vec8 operator*(mat89 obj1, vec9 obj2);

		vec9 row(int num);
		vec8 col(int num);
		void set(int i, int j, double x);
		void row_set(int num, vec9 obj);
		void row_set(int num, double x0, double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8);
		void col_set(int num, vec8 obj);
		void col_set(int num, double x0, double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8);
		void disp(void);
		mat98 trans(void);
};

//================================================================================================//
// 9 x 2 matrix class                                                                             //
//================================================================================================//
class mat92{
	public:
		double A[9][2];
		static const int r = 9, c = 2;
		friend mat92 operator+(mat92 obj1, mat92 obj2);
		friend mat92 operator-(mat92 obj1, mat92 obj2);
		friend mat92 operator-(mat92 obj);

		friend mat92 operator*(double a, mat92 obj);
		friend mat92 operator*(mat92 obj, double a);
		friend vec9 operator*(vec2 obj1, mat92 obj2);
		friend vec9 operator*(mat92 obj1, vec2 obj2);

		vec2 row(int num);
		vec9 col(int num);
		void set(int i, int j, double x);
		void row_set(int num, vec2 obj);
		void row_set(int num, double x0, double x1);
		void col_set(int num, vec9 obj);
		void col_set(int num, double x0, double x1);
		void disp(void);
		mat29 trans(void);
};

//================================================================================================//
// 9 x 3 matrix class                                                                             //
//================================================================================================//
class mat93{
	public:
		double A[9][3];
		static const int r = 9, c = 3;
		friend mat93 operator+(mat93 obj1, mat93 obj2);
		friend mat93 operator-(mat93 obj1, mat93 obj2);
		friend mat93 operator-(mat93 obj);

		friend mat93 operator*(double a, mat93 obj);
		friend mat93 operator*(mat93 obj, double a);
		friend vec9 operator*(vec3 obj1, mat93 obj2);
		friend vec9 operator*(mat93 obj1, vec3 obj2);

		vec3 row(int num);
		vec9 col(int num);
		void set(int i, int j, double x);
		void row_set(int num, vec3 obj);
		void row_set(int num, double x0, double x1, double x2);
		void col_set(int num, vec9 obj);
		void col_set(int num, double x0, double x1, double x2);
		void disp(void);
		mat39 trans(void);
};

//================================================================================================//
// 9 x 4 matrix class                                                                             //
//================================================================================================//
class mat94{
	public:
		double A[9][4];
		static const int r = 9, c = 4;
		friend mat94 operator+(mat94 obj1, mat94 obj2);
		friend mat94 operator-(mat94 obj1, mat94 obj2);
		friend mat94 operator-(mat94 obj);

		friend mat94 operator*(double a, mat94 obj);
		friend mat94 operator*(mat94 obj, double a);
		friend vec9 operator*(vec4 obj1, mat94 obj2);
		friend vec9 operator*(mat94 obj1, vec4 obj2);

		vec4 row(int num);
		vec9 col(int num);
		void set(int i, int j, double x);
		void row_set(int num, vec4 obj);
		void row_set(int num, double x0, double x1, double x2, double x3);
		void col_set(int num, vec9 obj);
		void col_set(int num, double x0, double x1, double x2, double x3);
		void disp(void);
		mat49 trans(void);
};

//================================================================================================//
// 9 x 5 matrix class                                                                             //
//================================================================================================//
class mat95{
	public:
		double A[9][5];
		static const int r = 9, c = 5;
		friend mat95 operator+(mat95 obj1, mat95 obj2);
		friend mat95 operator-(mat95 obj1, mat95 obj2);
		friend mat95 operator-(mat95 obj);

		friend mat95 operator*(double a, mat95 obj);
		friend mat95 operator*(mat95 obj, double a);
		friend vec9 operator*(vec5 obj1, mat95 obj2);
		friend vec9 operator*(mat95 obj1, vec5 obj2);

		vec5 row(int num);
		vec9 col(int num);
		void set(int i, int j, double x);
		void row_set(int num, vec5 obj);
		void row_set(int num, double x0, double x1, double x2, double x3, double x4);
		void col_set(int num, vec9 obj);
		void col_set(int num, double x0, double x1, double x2, double x3, double x4);
		void disp(void);
		mat59 trans(void);
};

//================================================================================================//
// 9 x 6 matrix class                                                                             //
//================================================================================================//
class mat96{
	public:
		double A[9][6];
		static const int r = 9, c = 6;
		friend mat96 operator+(mat96 obj1, mat96 obj2);
		friend mat96 operator-(mat96 obj1, mat96 obj2);
		friend mat96 operator-(mat96 obj);

		friend mat96 operator*(double a, mat96 obj);
		friend mat96 operator*(mat96 obj, double a);
		friend vec9 operator*(vec6 obj1, mat96 obj2);
		friend vec9 operator*(mat96 obj1, vec6 obj2);

		vec6 row(int num);
		vec9 col(int num);
		void set(int i, int j, double x);
		void row_set(int num, vec6 obj);
		void row_set(int num, double x0, double x1, double x2, double x3, double x4, double x5);
		void col_set(int num, vec9 obj);
		void col_set(int num, double x0, double x1, double x2, double x3, double x4, double x5);
		void disp(void);
		mat69 trans(void);
};

//================================================================================================//
// 9 x 7 matrix class                                                                             //
//================================================================================================//
class mat97{
	public:
		double A[9][7];
		static const int r = 9, c = 7;
		friend mat97 operator+(mat97 obj1, mat97 obj2);
		friend mat97 operator-(mat97 obj1, mat97 obj2);
		friend mat97 operator-(mat97 obj);

		friend mat97 operator*(double a, mat97 obj);
		friend mat97 operator*(mat97 obj, double a);
		friend vec9 operator*(vec7 obj1, mat97 obj2);
		friend vec9 operator*(mat97 obj1, vec7 obj2);

		vec7 row(int num);
		vec9 col(int num);
		void set(int i, int j, double x);
		void row_set(int num, vec7 obj);
		void row_set(int num, double x0, double x1, double x2, double x3, double x4, double x5, double x6);
		void col_set(int num, vec9 obj);
		void col_set(int num, double x0, double x1, double x2, double x3, double x4, double x5, double x6);
		void disp(void);
		mat79 trans(void);
};

//================================================================================================//
// 9 x 8 matrix class                                                                             //
//================================================================================================//
class mat98{
	public:
		double A[9][8];
		static const int r = 9, c = 8;
		friend mat98 operator+(mat98 obj1, mat98 obj2);
		friend mat98 operator-(mat98 obj1, mat98 obj2);
		friend mat98 operator-(mat98 obj);

		friend mat98 operator*(double a, mat98 obj);
		friend mat98 operator*(mat98 obj, double a);
		friend vec9 operator*(vec8 obj1, mat98 obj2);
		friend vec9 operator*(mat98 obj1, vec8 obj2);

		vec8 row(int num);
		vec9 col(int num);
		void set(int i, int j, double x);
		void row_set(int num, vec8 obj);
		void row_set(int num, double x0, double x1, double x2, double x3, double x4, double x5, double x6, double x7);
		void col_set(int num, vec9 obj);
		void col_set(int num, double x0, double x1, double x2, double x3, double x4, double x5, double x6, double x7);
		void disp(void);
		mat89 trans(void);
};

//================================================================================================//
// 9 x 9 matrix class                                                                             //
//================================================================================================//
class mat99{
	public:
		double A[9][9];
		static const int r = 9, c = 9;
		friend mat99 operator+(mat99 obj1, mat99 obj2);
		friend mat99 operator-(mat99 obj1, mat99 obj2);
		friend mat99 operator-(mat99 obj);

		friend mat99 operator*(double a, mat99 obj);
		friend mat99 operator*(mat99 obj, double a);
		friend vec9 operator*(vec9 obj1, mat99 obj2);
		friend vec9 operator*(mat99 obj1, vec9 obj2);

		vec9 row(int num);
		vec9 col(int num);
		void set(int i, int j, double x);
		void row_set(int num, vec9 obj);
		void row_set(int num, double x0, double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8);
		void col_set(int num, vec9 obj);
		void col_set(int num, double x0, double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8);
		void disp(void);
		mat99 trans(void);
		double det(void);
		mat99 inv(void);
};

//================================================================================================//
// Identity matrix                                                                                //
//================================================================================================//
mat22 eye2(void);
mat33 eye3(void);
mat44 eye4(void);
mat55 eye5(void);
mat66 eye6(void);
mat77 eye7(void);
mat88 eye8(void);
mat99 eye9(void);

//================================================================================================//
// Unit vector                                                                                    //
//================================================================================================//
vec2 unit2(int num);
vec3 unit3(int num);
vec4 unit4(int num);
vec5 unit5(int num);
vec6 unit6(int num);
vec7 unit7(int num);
vec8 unit8(int num);
vec9 unit9(int num);

//================================================================================================//
// Null vector                                                                                    //
//================================================================================================//
static const vec2 null_vec2(0.0, 0.0);
static const vec3 null_vec3(0.0, 0.0, 0.0);
static const vec4 null_vec4(0.0, 0.0, 0.0, 0.0);
static const vec5 null_vec5(0.0, 0.0, 0.0, 0.0, 0.0);
static const vec6 null_vec6(0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
static const vec7 null_vec7(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
static const vec8 null_vec8(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
static const vec9 null_vec9(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

//================================================================================================//
// Outer product                                                                                  //
//================================================================================================//
vec3 outer_product(vec3 obj1, vec3 obj2);

//================================================================================================//
// Matrix multiplication                                                                          //
//================================================================================================//
inline mat22 operator*(mat22 obj1, mat22 obj2);
inline mat23 operator*(mat22 obj1, mat23 obj2);
inline mat24 operator*(mat22 obj1, mat24 obj2);
inline mat25 operator*(mat22 obj1, mat25 obj2);
inline mat26 operator*(mat22 obj1, mat26 obj2);
inline mat27 operator*(mat22 obj1, mat27 obj2);
inline mat28 operator*(mat22 obj1, mat28 obj2);
inline mat29 operator*(mat22 obj1, mat29 obj2);
inline mat22 operator*(mat23 obj1, mat32 obj2);
inline mat23 operator*(mat23 obj1, mat33 obj2);
inline mat24 operator*(mat23 obj1, mat34 obj2);
inline mat25 operator*(mat23 obj1, mat35 obj2);
inline mat26 operator*(mat23 obj1, mat36 obj2);
inline mat27 operator*(mat23 obj1, mat37 obj2);
inline mat28 operator*(mat23 obj1, mat38 obj2);
inline mat29 operator*(mat23 obj1, mat39 obj2);
inline mat22 operator*(mat24 obj1, mat42 obj2);
inline mat23 operator*(mat24 obj1, mat43 obj2);
inline mat24 operator*(mat24 obj1, mat44 obj2);
inline mat25 operator*(mat24 obj1, mat45 obj2);
inline mat26 operator*(mat24 obj1, mat46 obj2);
inline mat27 operator*(mat24 obj1, mat47 obj2);
inline mat28 operator*(mat24 obj1, mat48 obj2);
inline mat29 operator*(mat24 obj1, mat49 obj2);
inline mat22 operator*(mat25 obj1, mat52 obj2);
inline mat23 operator*(mat25 obj1, mat53 obj2);
inline mat24 operator*(mat25 obj1, mat54 obj2);
inline mat25 operator*(mat25 obj1, mat55 obj2);
inline mat26 operator*(mat25 obj1, mat56 obj2);
inline mat27 operator*(mat25 obj1, mat57 obj2);
inline mat28 operator*(mat25 obj1, mat58 obj2);
inline mat29 operator*(mat25 obj1, mat59 obj2);
inline mat22 operator*(mat26 obj1, mat62 obj2);
inline mat23 operator*(mat26 obj1, mat63 obj2);
inline mat24 operator*(mat26 obj1, mat64 obj2);
inline mat25 operator*(mat26 obj1, mat65 obj2);
inline mat26 operator*(mat26 obj1, mat66 obj2);
inline mat27 operator*(mat26 obj1, mat67 obj2);
inline mat28 operator*(mat26 obj1, mat68 obj2);
inline mat29 operator*(mat26 obj1, mat69 obj2);
inline mat22 operator*(mat27 obj1, mat72 obj2);
inline mat23 operator*(mat27 obj1, mat73 obj2);
inline mat24 operator*(mat27 obj1, mat74 obj2);
inline mat25 operator*(mat27 obj1, mat75 obj2);
inline mat26 operator*(mat27 obj1, mat76 obj2);
inline mat27 operator*(mat27 obj1, mat77 obj2);
inline mat28 operator*(mat27 obj1, mat78 obj2);
inline mat29 operator*(mat27 obj1, mat79 obj2);
inline mat22 operator*(mat28 obj1, mat82 obj2);
inline mat23 operator*(mat28 obj1, mat83 obj2);
inline mat24 operator*(mat28 obj1, mat84 obj2);
inline mat25 operator*(mat28 obj1, mat85 obj2);
inline mat26 operator*(mat28 obj1, mat86 obj2);
inline mat27 operator*(mat28 obj1, mat87 obj2);
inline mat28 operator*(mat28 obj1, mat88 obj2);
inline mat29 operator*(mat28 obj1, mat89 obj2);
inline mat22 operator*(mat29 obj1, mat92 obj2);
inline mat23 operator*(mat29 obj1, mat93 obj2);
inline mat24 operator*(mat29 obj1, mat94 obj2);
inline mat25 operator*(mat29 obj1, mat95 obj2);
inline mat26 operator*(mat29 obj1, mat96 obj2);
inline mat27 operator*(mat29 obj1, mat97 obj2);
inline mat28 operator*(mat29 obj1, mat98 obj2);
inline mat29 operator*(mat29 obj1, mat99 obj2);
inline mat32 operator*(mat32 obj1, mat22 obj2);
inline mat33 operator*(mat32 obj1, mat23 obj2);
inline mat34 operator*(mat32 obj1, mat24 obj2);
inline mat35 operator*(mat32 obj1, mat25 obj2);
inline mat36 operator*(mat32 obj1, mat26 obj2);
inline mat37 operator*(mat32 obj1, mat27 obj2);
inline mat38 operator*(mat32 obj1, mat28 obj2);
inline mat39 operator*(mat32 obj1, mat29 obj2);
inline mat32 operator*(mat33 obj1, mat32 obj2);
inline mat33 operator*(mat33 obj1, mat33 obj2);
inline mat34 operator*(mat33 obj1, mat34 obj2);
inline mat35 operator*(mat33 obj1, mat35 obj2);
inline mat36 operator*(mat33 obj1, mat36 obj2);
inline mat37 operator*(mat33 obj1, mat37 obj2);
inline mat38 operator*(mat33 obj1, mat38 obj2);
inline mat39 operator*(mat33 obj1, mat39 obj2);
inline mat32 operator*(mat34 obj1, mat42 obj2);
inline mat33 operator*(mat34 obj1, mat43 obj2);
inline mat34 operator*(mat34 obj1, mat44 obj2);
inline mat35 operator*(mat34 obj1, mat45 obj2);
inline mat36 operator*(mat34 obj1, mat46 obj2);
inline mat37 operator*(mat34 obj1, mat47 obj2);
inline mat38 operator*(mat34 obj1, mat48 obj2);
inline mat39 operator*(mat34 obj1, mat49 obj2);
inline mat32 operator*(mat35 obj1, mat52 obj2);
inline mat33 operator*(mat35 obj1, mat53 obj2);
inline mat34 operator*(mat35 obj1, mat54 obj2);
inline mat35 operator*(mat35 obj1, mat55 obj2);
inline mat36 operator*(mat35 obj1, mat56 obj2);
inline mat37 operator*(mat35 obj1, mat57 obj2);
inline mat38 operator*(mat35 obj1, mat58 obj2);
inline mat39 operator*(mat35 obj1, mat59 obj2);
inline mat32 operator*(mat36 obj1, mat62 obj2);
inline mat33 operator*(mat36 obj1, mat63 obj2);
inline mat34 operator*(mat36 obj1, mat64 obj2);
inline mat35 operator*(mat36 obj1, mat65 obj2);
inline mat36 operator*(mat36 obj1, mat66 obj2);
inline mat37 operator*(mat36 obj1, mat67 obj2);
inline mat38 operator*(mat36 obj1, mat68 obj2);
inline mat39 operator*(mat36 obj1, mat69 obj2);
inline mat32 operator*(mat37 obj1, mat72 obj2);
inline mat33 operator*(mat37 obj1, mat73 obj2);
inline mat34 operator*(mat37 obj1, mat74 obj2);
inline mat35 operator*(mat37 obj1, mat75 obj2);
inline mat36 operator*(mat37 obj1, mat76 obj2);
inline mat37 operator*(mat37 obj1, mat77 obj2);
inline mat38 operator*(mat37 obj1, mat78 obj2);
inline mat39 operator*(mat37 obj1, mat79 obj2);
inline mat32 operator*(mat38 obj1, mat82 obj2);
inline mat33 operator*(mat38 obj1, mat83 obj2);
inline mat34 operator*(mat38 obj1, mat84 obj2);
inline mat35 operator*(mat38 obj1, mat85 obj2);
inline mat36 operator*(mat38 obj1, mat86 obj2);
inline mat37 operator*(mat38 obj1, mat87 obj2);
inline mat38 operator*(mat38 obj1, mat88 obj2);
inline mat39 operator*(mat38 obj1, mat89 obj2);
inline mat32 operator*(mat39 obj1, mat92 obj2);
inline mat33 operator*(mat39 obj1, mat93 obj2);
inline mat34 operator*(mat39 obj1, mat94 obj2);
inline mat35 operator*(mat39 obj1, mat95 obj2);
inline mat36 operator*(mat39 obj1, mat96 obj2);
inline mat37 operator*(mat39 obj1, mat97 obj2);
inline mat38 operator*(mat39 obj1, mat98 obj2);
inline mat39 operator*(mat39 obj1, mat99 obj2);
inline mat42 operator*(mat42 obj1, mat22 obj2);
inline mat43 operator*(mat42 obj1, mat23 obj2);
inline mat44 operator*(mat42 obj1, mat24 obj2);
inline mat45 operator*(mat42 obj1, mat25 obj2);
inline mat46 operator*(mat42 obj1, mat26 obj2);
inline mat47 operator*(mat42 obj1, mat27 obj2);
inline mat48 operator*(mat42 obj1, mat28 obj2);
inline mat49 operator*(mat42 obj1, mat29 obj2);
inline mat42 operator*(mat43 obj1, mat32 obj2);
inline mat43 operator*(mat43 obj1, mat33 obj2);
inline mat44 operator*(mat43 obj1, mat34 obj2);
inline mat45 operator*(mat43 obj1, mat35 obj2);
inline mat46 operator*(mat43 obj1, mat36 obj2);
inline mat47 operator*(mat43 obj1, mat37 obj2);
inline mat48 operator*(mat43 obj1, mat38 obj2);
inline mat49 operator*(mat43 obj1, mat39 obj2);
inline mat42 operator*(mat44 obj1, mat42 obj2);
inline mat43 operator*(mat44 obj1, mat43 obj2);
inline mat44 operator*(mat44 obj1, mat44 obj2);
inline mat45 operator*(mat44 obj1, mat45 obj2);
inline mat46 operator*(mat44 obj1, mat46 obj2);
inline mat47 operator*(mat44 obj1, mat47 obj2);
inline mat48 operator*(mat44 obj1, mat48 obj2);
inline mat49 operator*(mat44 obj1, mat49 obj2);
inline mat42 operator*(mat45 obj1, mat52 obj2);
inline mat43 operator*(mat45 obj1, mat53 obj2);
inline mat44 operator*(mat45 obj1, mat54 obj2);
inline mat45 operator*(mat45 obj1, mat55 obj2);
inline mat46 operator*(mat45 obj1, mat56 obj2);
inline mat47 operator*(mat45 obj1, mat57 obj2);
inline mat48 operator*(mat45 obj1, mat58 obj2);
inline mat49 operator*(mat45 obj1, mat59 obj2);
inline mat42 operator*(mat46 obj1, mat62 obj2);
inline mat43 operator*(mat46 obj1, mat63 obj2);
inline mat44 operator*(mat46 obj1, mat64 obj2);
inline mat45 operator*(mat46 obj1, mat65 obj2);
inline mat46 operator*(mat46 obj1, mat66 obj2);
inline mat47 operator*(mat46 obj1, mat67 obj2);
inline mat48 operator*(mat46 obj1, mat68 obj2);
inline mat49 operator*(mat46 obj1, mat69 obj2);
inline mat42 operator*(mat47 obj1, mat72 obj2);
inline mat43 operator*(mat47 obj1, mat73 obj2);
inline mat44 operator*(mat47 obj1, mat74 obj2);
inline mat45 operator*(mat47 obj1, mat75 obj2);
inline mat46 operator*(mat47 obj1, mat76 obj2);
inline mat47 operator*(mat47 obj1, mat77 obj2);
inline mat48 operator*(mat47 obj1, mat78 obj2);
inline mat49 operator*(mat47 obj1, mat79 obj2);
inline mat42 operator*(mat48 obj1, mat82 obj2);
inline mat43 operator*(mat48 obj1, mat83 obj2);
inline mat44 operator*(mat48 obj1, mat84 obj2);
inline mat45 operator*(mat48 obj1, mat85 obj2);
inline mat46 operator*(mat48 obj1, mat86 obj2);
inline mat47 operator*(mat48 obj1, mat87 obj2);
inline mat48 operator*(mat48 obj1, mat88 obj2);
inline mat49 operator*(mat48 obj1, mat89 obj2);
inline mat42 operator*(mat49 obj1, mat92 obj2);
inline mat43 operator*(mat49 obj1, mat93 obj2);
inline mat44 operator*(mat49 obj1, mat94 obj2);
inline mat45 operator*(mat49 obj1, mat95 obj2);
inline mat46 operator*(mat49 obj1, mat96 obj2);
inline mat47 operator*(mat49 obj1, mat97 obj2);
inline mat48 operator*(mat49 obj1, mat98 obj2);
inline mat49 operator*(mat49 obj1, mat99 obj2);
inline mat52 operator*(mat52 obj1, mat22 obj2);
inline mat53 operator*(mat52 obj1, mat23 obj2);
inline mat54 operator*(mat52 obj1, mat24 obj2);
inline mat55 operator*(mat52 obj1, mat25 obj2);
inline mat56 operator*(mat52 obj1, mat26 obj2);
inline mat57 operator*(mat52 obj1, mat27 obj2);
inline mat58 operator*(mat52 obj1, mat28 obj2);
inline mat59 operator*(mat52 obj1, mat29 obj2);
inline mat52 operator*(mat53 obj1, mat32 obj2);
inline mat53 operator*(mat53 obj1, mat33 obj2);
inline mat54 operator*(mat53 obj1, mat34 obj2);
inline mat55 operator*(mat53 obj1, mat35 obj2);
inline mat56 operator*(mat53 obj1, mat36 obj2);
inline mat57 operator*(mat53 obj1, mat37 obj2);
inline mat58 operator*(mat53 obj1, mat38 obj2);
inline mat59 operator*(mat53 obj1, mat39 obj2);
inline mat52 operator*(mat54 obj1, mat42 obj2);
inline mat53 operator*(mat54 obj1, mat43 obj2);
inline mat54 operator*(mat54 obj1, mat44 obj2);
inline mat55 operator*(mat54 obj1, mat45 obj2);
inline mat56 operator*(mat54 obj1, mat46 obj2);
inline mat57 operator*(mat54 obj1, mat47 obj2);
inline mat58 operator*(mat54 obj1, mat48 obj2);
inline mat59 operator*(mat54 obj1, mat49 obj2);
inline mat52 operator*(mat55 obj1, mat52 obj2);
inline mat53 operator*(mat55 obj1, mat53 obj2);
inline mat54 operator*(mat55 obj1, mat54 obj2);
inline mat55 operator*(mat55 obj1, mat55 obj2);
inline mat56 operator*(mat55 obj1, mat56 obj2);
inline mat57 operator*(mat55 obj1, mat57 obj2);
inline mat58 operator*(mat55 obj1, mat58 obj2);
inline mat59 operator*(mat55 obj1, mat59 obj2);
inline mat52 operator*(mat56 obj1, mat62 obj2);
inline mat53 operator*(mat56 obj1, mat63 obj2);
inline mat54 operator*(mat56 obj1, mat64 obj2);
inline mat55 operator*(mat56 obj1, mat65 obj2);
inline mat56 operator*(mat56 obj1, mat66 obj2);
inline mat57 operator*(mat56 obj1, mat67 obj2);
inline mat58 operator*(mat56 obj1, mat68 obj2);
inline mat59 operator*(mat56 obj1, mat69 obj2);
inline mat52 operator*(mat57 obj1, mat72 obj2);
inline mat53 operator*(mat57 obj1, mat73 obj2);
inline mat54 operator*(mat57 obj1, mat74 obj2);
inline mat55 operator*(mat57 obj1, mat75 obj2);
inline mat56 operator*(mat57 obj1, mat76 obj2);
inline mat57 operator*(mat57 obj1, mat77 obj2);
inline mat58 operator*(mat57 obj1, mat78 obj2);
inline mat59 operator*(mat57 obj1, mat79 obj2);
inline mat52 operator*(mat58 obj1, mat82 obj2);
inline mat53 operator*(mat58 obj1, mat83 obj2);
inline mat54 operator*(mat58 obj1, mat84 obj2);
inline mat55 operator*(mat58 obj1, mat85 obj2);
inline mat56 operator*(mat58 obj1, mat86 obj2);
inline mat57 operator*(mat58 obj1, mat87 obj2);
inline mat58 operator*(mat58 obj1, mat88 obj2);
inline mat59 operator*(mat58 obj1, mat89 obj2);
inline mat52 operator*(mat59 obj1, mat92 obj2);
inline mat53 operator*(mat59 obj1, mat93 obj2);
inline mat54 operator*(mat59 obj1, mat94 obj2);
inline mat55 operator*(mat59 obj1, mat95 obj2);
inline mat56 operator*(mat59 obj1, mat96 obj2);
inline mat57 operator*(mat59 obj1, mat97 obj2);
inline mat58 operator*(mat59 obj1, mat98 obj2);
inline mat59 operator*(mat59 obj1, mat99 obj2);
inline mat62 operator*(mat62 obj1, mat22 obj2);
inline mat63 operator*(mat62 obj1, mat23 obj2);
inline mat64 operator*(mat62 obj1, mat24 obj2);
inline mat65 operator*(mat62 obj1, mat25 obj2);
inline mat66 operator*(mat62 obj1, mat26 obj2);
inline mat67 operator*(mat62 obj1, mat27 obj2);
inline mat68 operator*(mat62 obj1, mat28 obj2);
inline mat69 operator*(mat62 obj1, mat29 obj2);
inline mat62 operator*(mat63 obj1, mat32 obj2);
inline mat63 operator*(mat63 obj1, mat33 obj2);
inline mat64 operator*(mat63 obj1, mat34 obj2);
inline mat65 operator*(mat63 obj1, mat35 obj2);
inline mat66 operator*(mat63 obj1, mat36 obj2);
inline mat67 operator*(mat63 obj1, mat37 obj2);
inline mat68 operator*(mat63 obj1, mat38 obj2);
inline mat69 operator*(mat63 obj1, mat39 obj2);
inline mat62 operator*(mat64 obj1, mat42 obj2);
inline mat63 operator*(mat64 obj1, mat43 obj2);
inline mat64 operator*(mat64 obj1, mat44 obj2);
inline mat65 operator*(mat64 obj1, mat45 obj2);
inline mat66 operator*(mat64 obj1, mat46 obj2);
inline mat67 operator*(mat64 obj1, mat47 obj2);
inline mat68 operator*(mat64 obj1, mat48 obj2);
inline mat69 operator*(mat64 obj1, mat49 obj2);
inline mat62 operator*(mat65 obj1, mat52 obj2);
inline mat63 operator*(mat65 obj1, mat53 obj2);
inline mat64 operator*(mat65 obj1, mat54 obj2);
inline mat65 operator*(mat65 obj1, mat55 obj2);
inline mat66 operator*(mat65 obj1, mat56 obj2);
inline mat67 operator*(mat65 obj1, mat57 obj2);
inline mat68 operator*(mat65 obj1, mat58 obj2);
inline mat69 operator*(mat65 obj1, mat59 obj2);
inline mat62 operator*(mat66 obj1, mat62 obj2);
inline mat63 operator*(mat66 obj1, mat63 obj2);
inline mat64 operator*(mat66 obj1, mat64 obj2);
inline mat65 operator*(mat66 obj1, mat65 obj2);
inline mat66 operator*(mat66 obj1, mat66 obj2);
inline mat67 operator*(mat66 obj1, mat67 obj2);
inline mat68 operator*(mat66 obj1, mat68 obj2);
inline mat69 operator*(mat66 obj1, mat69 obj2);
inline mat62 operator*(mat67 obj1, mat72 obj2);
inline mat63 operator*(mat67 obj1, mat73 obj2);
inline mat64 operator*(mat67 obj1, mat74 obj2);
inline mat65 operator*(mat67 obj1, mat75 obj2);
inline mat66 operator*(mat67 obj1, mat76 obj2);
inline mat67 operator*(mat67 obj1, mat77 obj2);
inline mat68 operator*(mat67 obj1, mat78 obj2);
inline mat69 operator*(mat67 obj1, mat79 obj2);
inline mat62 operator*(mat68 obj1, mat82 obj2);
inline mat63 operator*(mat68 obj1, mat83 obj2);
inline mat64 operator*(mat68 obj1, mat84 obj2);
inline mat65 operator*(mat68 obj1, mat85 obj2);
inline mat66 operator*(mat68 obj1, mat86 obj2);
inline mat67 operator*(mat68 obj1, mat87 obj2);
inline mat68 operator*(mat68 obj1, mat88 obj2);
inline mat69 operator*(mat68 obj1, mat89 obj2);
inline mat62 operator*(mat69 obj1, mat92 obj2);
inline mat63 operator*(mat69 obj1, mat93 obj2);
inline mat64 operator*(mat69 obj1, mat94 obj2);
inline mat65 operator*(mat69 obj1, mat95 obj2);
inline mat66 operator*(mat69 obj1, mat96 obj2);
inline mat67 operator*(mat69 obj1, mat97 obj2);
inline mat68 operator*(mat69 obj1, mat98 obj2);
inline mat69 operator*(mat69 obj1, mat99 obj2);
inline mat72 operator*(mat72 obj1, mat22 obj2);
inline mat73 operator*(mat72 obj1, mat23 obj2);
inline mat74 operator*(mat72 obj1, mat24 obj2);
inline mat75 operator*(mat72 obj1, mat25 obj2);
inline mat76 operator*(mat72 obj1, mat26 obj2);
inline mat77 operator*(mat72 obj1, mat27 obj2);
inline mat78 operator*(mat72 obj1, mat28 obj2);
inline mat79 operator*(mat72 obj1, mat29 obj2);
inline mat72 operator*(mat73 obj1, mat32 obj2);
inline mat73 operator*(mat73 obj1, mat33 obj2);
inline mat74 operator*(mat73 obj1, mat34 obj2);
inline mat75 operator*(mat73 obj1, mat35 obj2);
inline mat76 operator*(mat73 obj1, mat36 obj2);
inline mat77 operator*(mat73 obj1, mat37 obj2);
inline mat78 operator*(mat73 obj1, mat38 obj2);
inline mat79 operator*(mat73 obj1, mat39 obj2);
inline mat72 operator*(mat74 obj1, mat42 obj2);
inline mat73 operator*(mat74 obj1, mat43 obj2);
inline mat74 operator*(mat74 obj1, mat44 obj2);
inline mat75 operator*(mat74 obj1, mat45 obj2);
inline mat76 operator*(mat74 obj1, mat46 obj2);
inline mat77 operator*(mat74 obj1, mat47 obj2);
inline mat78 operator*(mat74 obj1, mat48 obj2);
inline mat79 operator*(mat74 obj1, mat49 obj2);
inline mat72 operator*(mat75 obj1, mat52 obj2);
inline mat73 operator*(mat75 obj1, mat53 obj2);
inline mat74 operator*(mat75 obj1, mat54 obj2);
inline mat75 operator*(mat75 obj1, mat55 obj2);
inline mat76 operator*(mat75 obj1, mat56 obj2);
inline mat77 operator*(mat75 obj1, mat57 obj2);
inline mat78 operator*(mat75 obj1, mat58 obj2);
inline mat79 operator*(mat75 obj1, mat59 obj2);
inline mat72 operator*(mat76 obj1, mat62 obj2);
inline mat73 operator*(mat76 obj1, mat63 obj2);
inline mat74 operator*(mat76 obj1, mat64 obj2);
inline mat75 operator*(mat76 obj1, mat65 obj2);
inline mat76 operator*(mat76 obj1, mat66 obj2);
inline mat77 operator*(mat76 obj1, mat67 obj2);
inline mat78 operator*(mat76 obj1, mat68 obj2);
inline mat79 operator*(mat76 obj1, mat69 obj2);
inline mat72 operator*(mat77 obj1, mat72 obj2);
inline mat73 operator*(mat77 obj1, mat73 obj2);
inline mat74 operator*(mat77 obj1, mat74 obj2);
inline mat75 operator*(mat77 obj1, mat75 obj2);
inline mat76 operator*(mat77 obj1, mat76 obj2);
inline mat77 operator*(mat77 obj1, mat77 obj2);
inline mat78 operator*(mat77 obj1, mat78 obj2);
inline mat79 operator*(mat77 obj1, mat79 obj2);
inline mat72 operator*(mat78 obj1, mat82 obj2);
inline mat73 operator*(mat78 obj1, mat83 obj2);
inline mat74 operator*(mat78 obj1, mat84 obj2);
inline mat75 operator*(mat78 obj1, mat85 obj2);
inline mat76 operator*(mat78 obj1, mat86 obj2);
inline mat77 operator*(mat78 obj1, mat87 obj2);
inline mat78 operator*(mat78 obj1, mat88 obj2);
inline mat79 operator*(mat78 obj1, mat89 obj2);
inline mat72 operator*(mat79 obj1, mat92 obj2);
inline mat73 operator*(mat79 obj1, mat93 obj2);
inline mat74 operator*(mat79 obj1, mat94 obj2);
inline mat75 operator*(mat79 obj1, mat95 obj2);
inline mat76 operator*(mat79 obj1, mat96 obj2);
inline mat77 operator*(mat79 obj1, mat97 obj2);
inline mat78 operator*(mat79 obj1, mat98 obj2);
inline mat79 operator*(mat79 obj1, mat99 obj2);
inline mat82 operator*(mat82 obj1, mat22 obj2);
inline mat83 operator*(mat82 obj1, mat23 obj2);
inline mat84 operator*(mat82 obj1, mat24 obj2);
inline mat85 operator*(mat82 obj1, mat25 obj2);
inline mat86 operator*(mat82 obj1, mat26 obj2);
inline mat87 operator*(mat82 obj1, mat27 obj2);
inline mat88 operator*(mat82 obj1, mat28 obj2);
inline mat89 operator*(mat82 obj1, mat29 obj2);
inline mat82 operator*(mat83 obj1, mat32 obj2);
inline mat83 operator*(mat83 obj1, mat33 obj2);
inline mat84 operator*(mat83 obj1, mat34 obj2);
inline mat85 operator*(mat83 obj1, mat35 obj2);
inline mat86 operator*(mat83 obj1, mat36 obj2);
inline mat87 operator*(mat83 obj1, mat37 obj2);
inline mat88 operator*(mat83 obj1, mat38 obj2);
inline mat89 operator*(mat83 obj1, mat39 obj2);
inline mat82 operator*(mat84 obj1, mat42 obj2);
inline mat83 operator*(mat84 obj1, mat43 obj2);
inline mat84 operator*(mat84 obj1, mat44 obj2);
inline mat85 operator*(mat84 obj1, mat45 obj2);
inline mat86 operator*(mat84 obj1, mat46 obj2);
inline mat87 operator*(mat84 obj1, mat47 obj2);
inline mat88 operator*(mat84 obj1, mat48 obj2);
inline mat89 operator*(mat84 obj1, mat49 obj2);
inline mat82 operator*(mat85 obj1, mat52 obj2);
inline mat83 operator*(mat85 obj1, mat53 obj2);
inline mat84 operator*(mat85 obj1, mat54 obj2);
inline mat85 operator*(mat85 obj1, mat55 obj2);
inline mat86 operator*(mat85 obj1, mat56 obj2);
inline mat87 operator*(mat85 obj1, mat57 obj2);
inline mat88 operator*(mat85 obj1, mat58 obj2);
inline mat89 operator*(mat85 obj1, mat59 obj2);
inline mat82 operator*(mat86 obj1, mat62 obj2);
inline mat83 operator*(mat86 obj1, mat63 obj2);
inline mat84 operator*(mat86 obj1, mat64 obj2);
inline mat85 operator*(mat86 obj1, mat65 obj2);
inline mat86 operator*(mat86 obj1, mat66 obj2);
inline mat87 operator*(mat86 obj1, mat67 obj2);
inline mat88 operator*(mat86 obj1, mat68 obj2);
inline mat89 operator*(mat86 obj1, mat69 obj2);
inline mat82 operator*(mat87 obj1, mat72 obj2);
inline mat83 operator*(mat87 obj1, mat73 obj2);
inline mat84 operator*(mat87 obj1, mat74 obj2);
inline mat85 operator*(mat87 obj1, mat75 obj2);
inline mat86 operator*(mat87 obj1, mat76 obj2);
inline mat87 operator*(mat87 obj1, mat77 obj2);
inline mat88 operator*(mat87 obj1, mat78 obj2);
inline mat89 operator*(mat87 obj1, mat79 obj2);
inline mat82 operator*(mat88 obj1, mat82 obj2);
inline mat83 operator*(mat88 obj1, mat83 obj2);
inline mat84 operator*(mat88 obj1, mat84 obj2);
inline mat85 operator*(mat88 obj1, mat85 obj2);
inline mat86 operator*(mat88 obj1, mat86 obj2);
inline mat87 operator*(mat88 obj1, mat87 obj2);
inline mat88 operator*(mat88 obj1, mat88 obj2);
inline mat89 operator*(mat88 obj1, mat89 obj2);
inline mat82 operator*(mat89 obj1, mat92 obj2);
inline mat83 operator*(mat89 obj1, mat93 obj2);
inline mat84 operator*(mat89 obj1, mat94 obj2);
inline mat85 operator*(mat89 obj1, mat95 obj2);
inline mat86 operator*(mat89 obj1, mat96 obj2);
inline mat87 operator*(mat89 obj1, mat97 obj2);
inline mat88 operator*(mat89 obj1, mat98 obj2);
inline mat89 operator*(mat89 obj1, mat99 obj2);
inline mat92 operator*(mat92 obj1, mat22 obj2);
inline mat93 operator*(mat92 obj1, mat23 obj2);
inline mat94 operator*(mat92 obj1, mat24 obj2);
inline mat95 operator*(mat92 obj1, mat25 obj2);
inline mat96 operator*(mat92 obj1, mat26 obj2);
inline mat97 operator*(mat92 obj1, mat27 obj2);
inline mat98 operator*(mat92 obj1, mat28 obj2);
inline mat99 operator*(mat92 obj1, mat29 obj2);
inline mat92 operator*(mat93 obj1, mat32 obj2);
inline mat93 operator*(mat93 obj1, mat33 obj2);
inline mat94 operator*(mat93 obj1, mat34 obj2);
inline mat95 operator*(mat93 obj1, mat35 obj2);
inline mat96 operator*(mat93 obj1, mat36 obj2);
inline mat97 operator*(mat93 obj1, mat37 obj2);
inline mat98 operator*(mat93 obj1, mat38 obj2);
inline mat99 operator*(mat93 obj1, mat39 obj2);
inline mat92 operator*(mat94 obj1, mat42 obj2);
inline mat93 operator*(mat94 obj1, mat43 obj2);
inline mat94 operator*(mat94 obj1, mat44 obj2);
inline mat95 operator*(mat94 obj1, mat45 obj2);
inline mat96 operator*(mat94 obj1, mat46 obj2);
inline mat97 operator*(mat94 obj1, mat47 obj2);
inline mat98 operator*(mat94 obj1, mat48 obj2);
inline mat99 operator*(mat94 obj1, mat49 obj2);
inline mat92 operator*(mat95 obj1, mat52 obj2);
inline mat93 operator*(mat95 obj1, mat53 obj2);
inline mat94 operator*(mat95 obj1, mat54 obj2);
inline mat95 operator*(mat95 obj1, mat55 obj2);
inline mat96 operator*(mat95 obj1, mat56 obj2);
inline mat97 operator*(mat95 obj1, mat57 obj2);
inline mat98 operator*(mat95 obj1, mat58 obj2);
inline mat99 operator*(mat95 obj1, mat59 obj2);
inline mat92 operator*(mat96 obj1, mat62 obj2);
inline mat93 operator*(mat96 obj1, mat63 obj2);
inline mat94 operator*(mat96 obj1, mat64 obj2);
inline mat95 operator*(mat96 obj1, mat65 obj2);
inline mat96 operator*(mat96 obj1, mat66 obj2);
inline mat97 operator*(mat96 obj1, mat67 obj2);
inline mat98 operator*(mat96 obj1, mat68 obj2);
inline mat99 operator*(mat96 obj1, mat69 obj2);
inline mat92 operator*(mat97 obj1, mat72 obj2);
inline mat93 operator*(mat97 obj1, mat73 obj2);
inline mat94 operator*(mat97 obj1, mat74 obj2);
inline mat95 operator*(mat97 obj1, mat75 obj2);
inline mat96 operator*(mat97 obj1, mat76 obj2);
inline mat97 operator*(mat97 obj1, mat77 obj2);
inline mat98 operator*(mat97 obj1, mat78 obj2);
inline mat99 operator*(mat97 obj1, mat79 obj2);
inline mat92 operator*(mat98 obj1, mat82 obj2);
inline mat93 operator*(mat98 obj1, mat83 obj2);
inline mat94 operator*(mat98 obj1, mat84 obj2);
inline mat95 operator*(mat98 obj1, mat85 obj2);
inline mat96 operator*(mat98 obj1, mat86 obj2);
inline mat97 operator*(mat98 obj1, mat87 obj2);
inline mat98 operator*(mat98 obj1, mat88 obj2);
inline mat99 operator*(mat98 obj1, mat89 obj2);
inline mat92 operator*(mat99 obj1, mat92 obj2);
inline mat93 operator*(mat99 obj1, mat93 obj2);
inline mat94 operator*(mat99 obj1, mat94 obj2);
inline mat95 operator*(mat99 obj1, mat95 obj2);
inline mat96 operator*(mat99 obj1, mat96 obj2);
inline mat97 operator*(mat99 obj1, mat97 obj2);
inline mat98 operator*(mat99 obj1, mat98 obj2);
inline mat99 operator*(mat99 obj1, mat99 obj2);

// Set each element of vec2
inline void vec2::set(double x0, double x1)
{
	x[0] = x0; x[1] = x1; 
}

// Generate diagonal matrix with each element
inline mat22 vec2::diag()
{
	int i, j;
	mat22 ans;
	for(i=0; i<2; i++) for(j=0; j<2; j++) ans.A[i][j] = 0.0;
	for(i=0; i<2; i++) ans.A[i][i] = x[i];
	return(ans);
}

// Overload of '[]' operator
inline double vec2::operator[](int i)
{
	return(x[i]);
}

// Overload of '+' operator --------------------------------------------------//
// vec2 + vec2
inline vec2 operator+(vec2 obj1, vec2 obj2)
{
	vec2 ans;
	ans.x[0] = obj1.x[0] + obj2.x[0];
	ans.x[1] = obj1.x[1] + obj2.x[1];
	return(ans);
}

// Overload of '-' operator --------------------------------------------------//
// vec2 - vec2
inline vec2 operator-(vec2 obj1, vec2 obj2)
{
	vec2 ans;
	ans.x[0] = obj1.x[0] - obj2.x[0];
	ans.x[1] = obj1.x[1] - obj2.x[1];
	return(ans);
}

// Overload of '-' operator(-vec2)
inline vec2 operator-(vec2 obj)
{
	vec2 ans;
	ans.x[0] = -obj.x[0];
	ans.x[1] = -obj.x[1];
	return(ans);
}

// Overload of '*' operator --------------------------------------------------//
// vec2 * vec2 = inner product
inline double operator*(vec2 obj1, vec2 obj2)
{
	double ans;
	ans = obj1.x[0]*obj2.x[0] + obj1.x[1]*obj2.x[1];
	return(ans);
}

// Overload of '*' operator(vec2 * double)
inline vec2 operator*(vec2 obj, double a)
{
	vec2 ans;
	ans.x[0] = obj.x[0] * a;
	ans.x[1] = obj.x[1] * a;
	return(ans);
}

// Overload of '*' operator(double * vec2)
inline vec2 operator*(double a, vec2 obj)
{
	vec2 ans;
	ans.x[0] = a * obj.x[0];
	ans.x[1] = a * obj.x[1];
	return(ans);
}

// Clear each element
inline void vec2::clear(void)
{
	x[0] = 0.0; x[1] = 0.0;
}

// Set each element of vec3
inline void vec3::set(double x0, double x1, double x2)
{
	x[0] = x0; x[1] = x1; x[2] = x2; 
}

// Generate diagonal matrix with each element
inline mat33 vec3::diag()
{
	int i, j;
	mat33 ans;
	for(i=0; i<3; i++) for(j=0; j<3; j++) ans.A[i][j] = 0.0;
	for(i=0; i<3; i++) ans.A[i][i] = x[i];
	return(ans);
}

// Overload of '[]' operator
inline double vec3::operator[](int i)
{
	return(x[i]);
}

// Overload of '+' operator --------------------------------------------------//
// vec3 + vec3
inline vec3 operator+(vec3 obj1, vec3 obj2)
{
	vec3 ans;
	ans.x[0] = obj1.x[0] + obj2.x[0];
	ans.x[1] = obj1.x[1] + obj2.x[1];
	ans.x[2] = obj1.x[2] + obj2.x[2];
	return(ans);
}

// Overload of '-' operator --------------------------------------------------//
// vec3 - vec3
inline vec3 operator-(vec3 obj1, vec3 obj2)
{
	vec3 ans;
	ans.x[0] = obj1.x[0] - obj2.x[0];
	ans.x[1] = obj1.x[1] - obj2.x[1];
	ans.x[2] = obj1.x[2] - obj2.x[2];
	return(ans);
}

// Overload of '-' operator(-vec3)
inline vec3 operator-(vec3 obj)
{
	vec3 ans;
	ans.x[0] = -obj.x[0];
	ans.x[1] = -obj.x[1];
	ans.x[2] = -obj.x[2];
	return(ans);
}

// Overload of '*' operator --------------------------------------------------//
// vec3 * vec3 = inner product
inline double operator*(vec3 obj1, vec3 obj2)
{
	double ans;
	ans = obj1.x[0]*obj2.x[0] + obj1.x[1]*obj2.x[1]+ obj1.x[2]*obj2.x[2];
	return(ans);
}

// Overload of '*' operator(vec3 * double)
inline vec3 operator*(vec3 obj, double a)
{
	vec3 ans;
	ans.x[0] = obj.x[0] * a;
	ans.x[1] = obj.x[1] * a;
	ans.x[2] = obj.x[2] * a;
	return(ans);
}

// Overload of '*' operator(double * vec3)
inline vec3 operator*(double a, vec3 obj)
{
	vec3 ans;
	ans.x[0] = a * obj.x[0];
	ans.x[1] = a * obj.x[1];
	ans.x[2] = a * obj.x[2];
	return(ans);
}

// Clear each element
inline void vec3::clear(void)
{
	x[0] = 0.0; x[1] = 0.0; x[2] = 0.0;
}

// Set each element of vec4
inline void vec4::set(double x0, double x1, double x2, double x3)
{
	x[0] = x0; x[1] = x1; x[2] = x2; x[3] = x3; 
}

// Generate diagonal matrix with each element
inline mat44 vec4::diag()
{
	int i, j;
	mat44 ans;
	for(i=0; i<4; i++) for(j=0; j<4; j++) ans.A[i][j] = 0.0;
	for(i=0; i<4; i++) ans.A[i][i] = x[i];
	return(ans);
}

// Overload of '[]' operator
inline double vec4::operator[](int i)
{
	return(x[i]);
}

// Overload of '+' operator --------------------------------------------------//
// vec4 + vec4
inline vec4 operator+(vec4 obj1, vec4 obj2)
{
	vec4 ans;
	ans.x[0] = obj1.x[0] + obj2.x[0];
	ans.x[1] = obj1.x[1] + obj2.x[1];
	ans.x[2] = obj1.x[2] + obj2.x[2];
	ans.x[3] = obj1.x[3] + obj2.x[3];
	return(ans);
}

// Overload of '-' operator --------------------------------------------------//
// vec4 - vec4
inline vec4 operator-(vec4 obj1, vec4 obj2)
{
	vec4 ans;
	ans.x[0] = obj1.x[0] - obj2.x[0];
	ans.x[1] = obj1.x[1] - obj2.x[1];
	ans.x[2] = obj1.x[2] - obj2.x[2];
	ans.x[3] = obj1.x[3] - obj2.x[3];
	return(ans);
}

// Overload of '-' operator(-vec4)
inline vec4 operator-(vec4 obj)
{
	vec4 ans;
	ans.x[0] = -obj.x[0];
	ans.x[1] = -obj.x[1];
	ans.x[2] = -obj.x[2];
	ans.x[3] = -obj.x[3];
	return(ans);
}

// Overload of '*' operator --------------------------------------------------//
// vec4 * vec4 = inner product
inline double operator*(vec4 obj1, vec4 obj2)
{
	double ans;
	ans = obj1.x[0]*obj2.x[0] + obj1.x[1]*obj2.x[1]+ obj1.x[2]*obj2.x[2]+ obj1.x[3]*obj2.x[3];
	return(ans);
}

// Overload of '*' operator(vec4 * double)
inline vec4 operator*(vec4 obj, double a)
{
	vec4 ans;
	ans.x[0] = obj.x[0] * a;
	ans.x[1] = obj.x[1] * a;
	ans.x[2] = obj.x[2] * a;
	ans.x[3] = obj.x[3] * a;
	return(ans);
}

// Overload of '*' operator(double * vec4)
inline vec4 operator*(double a, vec4 obj)
{
	vec4 ans;
	ans.x[0] = a * obj.x[0];
	ans.x[1] = a * obj.x[1];
	ans.x[2] = a * obj.x[2];
	ans.x[3] = a * obj.x[3];
	return(ans);
}

// Clear each element
inline void vec4::clear(void)
{
	x[0] = 0.0; x[1] = 0.0; x[2] = 0.0; x[3] = 0.0;
}

// Set each element of vec5
inline void vec5::set(double x0, double x1, double x2, double x3, double x4)
{
	x[0] = x0; x[1] = x1; x[2] = x2; x[3] = x3; x[4] = x4; 
}

// Generate diagonal matrix with each element
inline mat55 vec5::diag()
{
	int i, j;
	mat55 ans;
	for(i=0; i<5; i++) for(j=0; j<5; j++) ans.A[i][j] = 0.0;
	for(i=0; i<5; i++) ans.A[i][i] = x[i];
	return(ans);
}

// Overload of '[]' operator
inline double vec5::operator[](int i)
{
	return(x[i]);
}

// Overload of '+' operator --------------------------------------------------//
// vec5 + vec5
inline vec5 operator+(vec5 obj1, vec5 obj2)
{
	vec5 ans;
	ans.x[0] = obj1.x[0] + obj2.x[0];
	ans.x[1] = obj1.x[1] + obj2.x[1];
	ans.x[2] = obj1.x[2] + obj2.x[2];
	ans.x[3] = obj1.x[3] + obj2.x[3];
	ans.x[4] = obj1.x[4] + obj2.x[4];
	return(ans);
}

// Overload of '-' operator --------------------------------------------------//
// vec5 - vec5
inline vec5 operator-(vec5 obj1, vec5 obj2)
{
	vec5 ans;
	ans.x[0] = obj1.x[0] - obj2.x[0];
	ans.x[1] = obj1.x[1] - obj2.x[1];
	ans.x[2] = obj1.x[2] - obj2.x[2];
	ans.x[3] = obj1.x[3] - obj2.x[3];
	ans.x[4] = obj1.x[4] - obj2.x[4];
	return(ans);
}

// Overload of '-' operator(-vec5)
inline vec5 operator-(vec5 obj)
{
	vec5 ans;
	ans.x[0] = -obj.x[0];
	ans.x[1] = -obj.x[1];
	ans.x[2] = -obj.x[2];
	ans.x[3] = -obj.x[3];
	ans.x[4] = -obj.x[4];
	return(ans);
}

// Overload of '*' operator --------------------------------------------------//
// vec5 * vec5 = inner product
inline double operator*(vec5 obj1, vec5 obj2)
{
	double ans;
	ans = obj1.x[0]*obj2.x[0] + obj1.x[1]*obj2.x[1]+ obj1.x[2]*obj2.x[2]+ obj1.x[3]*obj2.x[3]+ obj1.x[4]*obj2.x[4];
	return(ans);
}

// Overload of '*' operator(vec5 * double)
inline vec5 operator*(vec5 obj, double a)
{
	vec5 ans;
	ans.x[0] = obj.x[0] * a;
	ans.x[1] = obj.x[1] * a;
	ans.x[2] = obj.x[2] * a;
	ans.x[3] = obj.x[3] * a;
	ans.x[4] = obj.x[4] * a;
	return(ans);
}

// Overload of '*' operator(double * vec5)
inline vec5 operator*(double a, vec5 obj)
{
	vec5 ans;
	ans.x[0] = a * obj.x[0];
	ans.x[1] = a * obj.x[1];
	ans.x[2] = a * obj.x[2];
	ans.x[3] = a * obj.x[3];
	ans.x[4] = a * obj.x[4];
	return(ans);
}

// Clear each element
inline void vec5::clear(void)
{
	x[0] = 0.0; x[1] = 0.0; x[2] = 0.0; x[3] = 0.0; x[4] = 0.0;
}

// Set each element of vec6
inline void vec6::set(double x0, double x1, double x2, double x3, double x4, double x5)
{
	x[0] = x0; x[1] = x1; x[2] = x2; x[3] = x3; x[4] = x4; x[5] = x5; 
}

// Generate diagonal matrix with each element
inline mat66 vec6::diag()
{
	int i, j;
	mat66 ans;
	for(i=0; i<6; i++) for(j=0; j<6; j++) ans.A[i][j] = 0.0;
	for(i=0; i<6; i++) ans.A[i][i] = x[i];
	return(ans);
}

// Overload of '[]' operator
inline double vec6::operator[](int i)
{
	return(x[i]);
}

// Overload of '+' operator --------------------------------------------------//
// vec6 + vec6
inline vec6 operator+(vec6 obj1, vec6 obj2)
{
	vec6 ans;
	ans.x[0] = obj1.x[0] + obj2.x[0];
	ans.x[1] = obj1.x[1] + obj2.x[1];
	ans.x[2] = obj1.x[2] + obj2.x[2];
	ans.x[3] = obj1.x[3] + obj2.x[3];
	ans.x[4] = obj1.x[4] + obj2.x[4];
	ans.x[5] = obj1.x[5] + obj2.x[5];
	return(ans);
}

// Overload of '-' operator --------------------------------------------------//
// vec6 - vec6
inline vec6 operator-(vec6 obj1, vec6 obj2)
{
	vec6 ans;
	ans.x[0] = obj1.x[0] - obj2.x[0];
	ans.x[1] = obj1.x[1] - obj2.x[1];
	ans.x[2] = obj1.x[2] - obj2.x[2];
	ans.x[3] = obj1.x[3] - obj2.x[3];
	ans.x[4] = obj1.x[4] - obj2.x[4];
	ans.x[5] = obj1.x[5] - obj2.x[5];
	return(ans);
}

// Overload of '-' operator(-vec6)
inline vec6 operator-(vec6 obj)
{
	vec6 ans;
	ans.x[0] = -obj.x[0];
	ans.x[1] = -obj.x[1];
	ans.x[2] = -obj.x[2];
	ans.x[3] = -obj.x[3];
	ans.x[4] = -obj.x[4];
	ans.x[5] = -obj.x[5];
	return(ans);
}

// Overload of '*' operator --------------------------------------------------//
// vec6 * vec6 = inner product
inline double operator*(vec6 obj1, vec6 obj2)
{
	double ans;
	ans = obj1.x[0]*obj2.x[0] + obj1.x[1]*obj2.x[1]+ obj1.x[2]*obj2.x[2]+ obj1.x[3]*obj2.x[3]+ obj1.x[4]*obj2.x[4]+ obj1.x[5]*obj2.x[5];
	return(ans);
}

// Overload of '*' operator(vec6 * double)
inline vec6 operator*(vec6 obj, double a)
{
	vec6 ans;
	ans.x[0] = obj.x[0] * a;
	ans.x[1] = obj.x[1] * a;
	ans.x[2] = obj.x[2] * a;
	ans.x[3] = obj.x[3] * a;
	ans.x[4] = obj.x[4] * a;
	ans.x[5] = obj.x[5] * a;
	return(ans);
}

// Overload of '*' operator(double * vec6)
inline vec6 operator*(double a, vec6 obj)
{
	vec6 ans;
	ans.x[0] = a * obj.x[0];
	ans.x[1] = a * obj.x[1];
	ans.x[2] = a * obj.x[2];
	ans.x[3] = a * obj.x[3];
	ans.x[4] = a * obj.x[4];
	ans.x[5] = a * obj.x[5];
	return(ans);
}

// Clear each element
inline void vec6::clear(void)
{
	x[0] = 0.0; x[1] = 0.0; x[2] = 0.0; x[3] = 0.0; x[4] = 0.0; x[5] = 0.0;
}

// Set each element of vec7
inline void vec7::set(double x0, double x1, double x2, double x3, double x4, double x5, double x6)
{
	x[0] = x0; x[1] = x1; x[2] = x2; x[3] = x3; x[4] = x4; x[5] = x5; x[6] = x6; 
}

// Generate diagonal matrix with each element
inline mat77 vec7::diag()
{
	int i, j;
	mat77 ans;
	for(i=0; i<7; i++) for(j=0; j<7; j++) ans.A[i][j] = 0.0;
	for(i=0; i<7; i++) ans.A[i][i] = x[i];
	return(ans);
}

// Overload of '[]' operator
inline double vec7::operator[](int i)
{
	return(x[i]);
}

// Overload of '+' operator --------------------------------------------------//
// vec7 + vec7
inline vec7 operator+(vec7 obj1, vec7 obj2)
{
	vec7 ans;
	ans.x[0] = obj1.x[0] + obj2.x[0];
	ans.x[1] = obj1.x[1] + obj2.x[1];
	ans.x[2] = obj1.x[2] + obj2.x[2];
	ans.x[3] = obj1.x[3] + obj2.x[3];
	ans.x[4] = obj1.x[4] + obj2.x[4];
	ans.x[5] = obj1.x[5] + obj2.x[5];
	ans.x[6] = obj1.x[6] + obj2.x[6];
	return(ans);
}

// Overload of '-' operator --------------------------------------------------//
// vec7 - vec7
inline vec7 operator-(vec7 obj1, vec7 obj2)
{
	vec7 ans;
	ans.x[0] = obj1.x[0] - obj2.x[0];
	ans.x[1] = obj1.x[1] - obj2.x[1];
	ans.x[2] = obj1.x[2] - obj2.x[2];
	ans.x[3] = obj1.x[3] - obj2.x[3];
	ans.x[4] = obj1.x[4] - obj2.x[4];
	ans.x[5] = obj1.x[5] - obj2.x[5];
	ans.x[6] = obj1.x[6] - obj2.x[6];
	return(ans);
}

// Overload of '-' operator(-vec7)
inline vec7 operator-(vec7 obj)
{
	vec7 ans;
	ans.x[0] = -obj.x[0];
	ans.x[1] = -obj.x[1];
	ans.x[2] = -obj.x[2];
	ans.x[3] = -obj.x[3];
	ans.x[4] = -obj.x[4];
	ans.x[5] = -obj.x[5];
	ans.x[6] = -obj.x[6];
	return(ans);
}

// Overload of '*' operator --------------------------------------------------//
// vec7 * vec7 = inner product
inline double operator*(vec7 obj1, vec7 obj2)
{
	double ans;
	ans = obj1.x[0]*obj2.x[0] + obj1.x[1]*obj2.x[1]+ obj1.x[2]*obj2.x[2]+ obj1.x[3]*obj2.x[3]+ obj1.x[4]*obj2.x[4]+ obj1.x[5]*obj2.x[5]+ obj1.x[6]*obj2.x[6];
	return(ans);
}

// Overload of '*' operator(vec7 * double)
inline vec7 operator*(vec7 obj, double a)
{
	vec7 ans;
	ans.x[0] = obj.x[0] * a;
	ans.x[1] = obj.x[1] * a;
	ans.x[2] = obj.x[2] * a;
	ans.x[3] = obj.x[3] * a;
	ans.x[4] = obj.x[4] * a;
	ans.x[5] = obj.x[5] * a;
	ans.x[6] = obj.x[6] * a;
	return(ans);
}

// Overload of '*' operator(double * vec7)
inline vec7 operator*(double a, vec7 obj)
{
	vec7 ans;
	ans.x[0] = a * obj.x[0];
	ans.x[1] = a * obj.x[1];
	ans.x[2] = a * obj.x[2];
	ans.x[3] = a * obj.x[3];
	ans.x[4] = a * obj.x[4];
	ans.x[5] = a * obj.x[5];
	ans.x[6] = a * obj.x[6];
	return(ans);
}

// Clear each element
inline void vec7::clear(void)
{
	x[0] = 0.0; x[1] = 0.0; x[2] = 0.0; x[3] = 0.0; x[4] = 0.0; x[5] = 0.0; x[6] = 0.0;
}

// Set each element of vec8
inline void vec8::set(double x0, double x1, double x2, double x3, double x4, double x5, double x6, double x7)
{
	x[0] = x0; x[1] = x1; x[2] = x2; x[3] = x3; x[4] = x4; x[5] = x5; x[6] = x6; x[7] = x7; 
}

// Generate diagonal matrix with each element
inline mat88 vec8::diag()
{
	int i, j;
	mat88 ans;
	for(i=0; i<8; i++) for(j=0; j<8; j++) ans.A[i][j] = 0.0;
	for(i=0; i<8; i++) ans.A[i][i] = x[i];
	return(ans);
}

// Overload of '[]' operator
inline double vec8::operator[](int i)
{
	return(x[i]);
}

// Overload of '+' operator --------------------------------------------------//
// vec8 + vec8
inline vec8 operator+(vec8 obj1, vec8 obj2)
{
	vec8 ans;
	ans.x[0] = obj1.x[0] + obj2.x[0];
	ans.x[1] = obj1.x[1] + obj2.x[1];
	ans.x[2] = obj1.x[2] + obj2.x[2];
	ans.x[3] = obj1.x[3] + obj2.x[3];
	ans.x[4] = obj1.x[4] + obj2.x[4];
	ans.x[5] = obj1.x[5] + obj2.x[5];
	ans.x[6] = obj1.x[6] + obj2.x[6];
	ans.x[7] = obj1.x[7] + obj2.x[7];
	return(ans);
}

// Overload of '-' operator --------------------------------------------------//
// vec8 - vec8
inline vec8 operator-(vec8 obj1, vec8 obj2)
{
	vec8 ans;
	ans.x[0] = obj1.x[0] - obj2.x[0];
	ans.x[1] = obj1.x[1] - obj2.x[1];
	ans.x[2] = obj1.x[2] - obj2.x[2];
	ans.x[3] = obj1.x[3] - obj2.x[3];
	ans.x[4] = obj1.x[4] - obj2.x[4];
	ans.x[5] = obj1.x[5] - obj2.x[5];
	ans.x[6] = obj1.x[6] - obj2.x[6];
	ans.x[7] = obj1.x[7] - obj2.x[7];
	return(ans);
}

// Overload of '-' operator(-vec8)
inline vec8 operator-(vec8 obj)
{
	vec8 ans;
	ans.x[0] = -obj.x[0];
	ans.x[1] = -obj.x[1];
	ans.x[2] = -obj.x[2];
	ans.x[3] = -obj.x[3];
	ans.x[4] = -obj.x[4];
	ans.x[5] = -obj.x[5];
	ans.x[6] = -obj.x[6];
	ans.x[7] = -obj.x[7];
	return(ans);
}

// Overload of '*' operator --------------------------------------------------//
// vec8 * vec8 = inner product
inline double operator*(vec8 obj1, vec8 obj2)
{
	double ans;
	ans = obj1.x[0]*obj2.x[0] + obj1.x[1]*obj2.x[1]+ obj1.x[2]*obj2.x[2]+ obj1.x[3]*obj2.x[3]+ obj1.x[4]*obj2.x[4]+ obj1.x[5]*obj2.x[5]+ obj1.x[6]*obj2.x[6]+ obj1.x[7]*obj2.x[7];
	return(ans);
}

// Overload of '*' operator(vec8 * double)
inline vec8 operator*(vec8 obj, double a)
{
	vec8 ans;
	ans.x[0] = obj.x[0] * a;
	ans.x[1] = obj.x[1] * a;
	ans.x[2] = obj.x[2] * a;
	ans.x[3] = obj.x[3] * a;
	ans.x[4] = obj.x[4] * a;
	ans.x[5] = obj.x[5] * a;
	ans.x[6] = obj.x[6] * a;
	ans.x[7] = obj.x[7] * a;
	return(ans);
}

// Overload of '*' operator(double * vec8)
inline vec8 operator*(double a, vec8 obj)
{
	vec8 ans;
	ans.x[0] = a * obj.x[0];
	ans.x[1] = a * obj.x[1];
	ans.x[2] = a * obj.x[2];
	ans.x[3] = a * obj.x[3];
	ans.x[4] = a * obj.x[4];
	ans.x[5] = a * obj.x[5];
	ans.x[6] = a * obj.x[6];
	ans.x[7] = a * obj.x[7];
	return(ans);
}

// Clear each element
inline void vec8::clear(void)
{
	x[0] = 0.0; x[1] = 0.0; x[2] = 0.0; x[3] = 0.0; x[4] = 0.0; x[5] = 0.0; x[6] = 0.0; x[7] = 0.0;
}

// Set each element of vec9
inline void vec9::set(double x0, double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8)
{
	x[0] = x0; x[1] = x1; x[2] = x2; x[3] = x3; x[4] = x4; x[5] = x5; x[6] = x6; x[7] = x7; x[8] = x8; 
}

// Generate diagonal matrix with each element
inline mat99 vec9::diag()
{
	int i, j;
	mat99 ans;
	for(i=0; i<9; i++) for(j=0; j<9; j++) ans.A[i][j] = 0.0;
	for(i=0; i<9; i++) ans.A[i][i] = x[i];
	return(ans);
}

// Overload of '[]' operator
inline double vec9::operator[](int i)
{
	return(x[i]);
}

// Overload of '+' operator --------------------------------------------------//
// vec9 + vec9
inline vec9 operator+(vec9 obj1, vec9 obj2)
{
	vec9 ans;
	ans.x[0] = obj1.x[0] + obj2.x[0];
	ans.x[1] = obj1.x[1] + obj2.x[1];
	ans.x[2] = obj1.x[2] + obj2.x[2];
	ans.x[3] = obj1.x[3] + obj2.x[3];
	ans.x[4] = obj1.x[4] + obj2.x[4];
	ans.x[5] = obj1.x[5] + obj2.x[5];
	ans.x[6] = obj1.x[6] + obj2.x[6];
	ans.x[7] = obj1.x[7] + obj2.x[7];
	ans.x[8] = obj1.x[8] + obj2.x[8];
	return(ans);
}

// Overload of '-' operator --------------------------------------------------//
// vec9 - vec9
inline vec9 operator-(vec9 obj1, vec9 obj2)
{
	vec9 ans;
	ans.x[0] = obj1.x[0] - obj2.x[0];
	ans.x[1] = obj1.x[1] - obj2.x[1];
	ans.x[2] = obj1.x[2] - obj2.x[2];
	ans.x[3] = obj1.x[3] - obj2.x[3];
	ans.x[4] = obj1.x[4] - obj2.x[4];
	ans.x[5] = obj1.x[5] - obj2.x[5];
	ans.x[6] = obj1.x[6] - obj2.x[6];
	ans.x[7] = obj1.x[7] - obj2.x[7];
	ans.x[8] = obj1.x[8] - obj2.x[8];
	return(ans);
}

// Overload of '-' operator(-vec9)
inline vec9 operator-(vec9 obj)
{
	vec9 ans;
	ans.x[0] = -obj.x[0];
	ans.x[1] = -obj.x[1];
	ans.x[2] = -obj.x[2];
	ans.x[3] = -obj.x[3];
	ans.x[4] = -obj.x[4];
	ans.x[5] = -obj.x[5];
	ans.x[6] = -obj.x[6];
	ans.x[7] = -obj.x[7];
	ans.x[8] = -obj.x[8];
	return(ans);
}

// Overload of '*' operator --------------------------------------------------//
// vec9 * vec9 = inner product
inline double operator*(vec9 obj1, vec9 obj2)
{
	double ans;
	ans = obj1.x[0]*obj2.x[0] + obj1.x[1]*obj2.x[1]+ obj1.x[2]*obj2.x[2]+ obj1.x[3]*obj2.x[3]+ obj1.x[4]*obj2.x[4]+ obj1.x[5]*obj2.x[5]+ obj1.x[6]*obj2.x[6]+ obj1.x[7]*obj2.x[7]+ obj1.x[8]*obj2.x[8];
	return(ans);
}

// Overload of '*' operator(vec9 * double)
inline vec9 operator*(vec9 obj, double a)
{
	vec9 ans;
	ans.x[0] = obj.x[0] * a;
	ans.x[1] = obj.x[1] * a;
	ans.x[2] = obj.x[2] * a;
	ans.x[3] = obj.x[3] * a;
	ans.x[4] = obj.x[4] * a;
	ans.x[5] = obj.x[5] * a;
	ans.x[6] = obj.x[6] * a;
	ans.x[7] = obj.x[7] * a;
	ans.x[8] = obj.x[8] * a;
	return(ans);
}

// Overload of '*' operator(double * vec9)
inline vec9 operator*(double a, vec9 obj)
{
	vec9 ans;
	ans.x[0] = a * obj.x[0];
	ans.x[1] = a * obj.x[1];
	ans.x[2] = a * obj.x[2];
	ans.x[3] = a * obj.x[3];
	ans.x[4] = a * obj.x[4];
	ans.x[5] = a * obj.x[5];
	ans.x[6] = a * obj.x[6];
	ans.x[7] = a * obj.x[7];
	ans.x[8] = a * obj.x[8];
	return(ans);
}

// Clear each element
inline void vec9::clear(void)
{
	x[0] = 0.0; x[1] = 0.0; x[2] = 0.0; x[3] = 0.0; x[4] = 0.0; x[5] = 0.0; x[6] = 0.0; x[7] = 0.0; x[8] = 0.0;
}

// Overload of '+' operator --------------------------------------------------//
// mat22 + mat22
inline mat22 operator+(mat22 obj1, mat22 obj2)
{
	int i, j;
	mat22 ans;
	for(i=0; i<2; i++){
		for(j=0; j<2; j++){
			ans.A[i][j] = obj1.A[i][j] + obj2.A[i][j];
		}
	}
	return(ans);
}

// Overload of '-' operator --------------------------------------------------//
// mat22 - mat22
inline mat22 operator-(mat22 obj1, mat22 obj2)
{
	int i, j;
	mat22 ans;
	for(i=0; i<2; i++){
		for(j=0; j<2; j++){
			ans.A[i][j] = obj1.A[i][j] - obj2.A[i][j];
		}
	}
	return(ans);
}

// Overload of '-' operator(-mat22)
inline mat22 operator-(mat22 obj)
{
	int i, j;
	mat22 ans;
	for(i=0; i<2; i++) for(j=0; j<2; j++) ans.A[i][j] = -obj.A[i][j];
	return(ans);
}

// Overload of '*' operator --------------------------------------------------//
// double * mat22
inline mat22 operator*(double a, mat22 obj)
{
	int i, j;
	mat22 ans;
	for(i=0; i<2; i++){
		for(j=0; j<2; j++){
			ans.A[i][j] = a * obj.A[i][j];
		}
	}
	return(ans);
}

// mat22 * double
inline mat22 operator*(mat22 obj, double a)
{
	int i, j;
	mat22 ans;
	for(i=0; i<2; i++){
		for(j=0; j<2; j++){
			ans.A[i][j] = obj.A[i][j] * a;
		}
	}
	return(ans);
}

// vec2 * mat22
inline vec2 operator*(vec2 obj1, mat22 obj2)
{
	int i, j;
	vec2 ans;
	for(i=0; i<2; i++){
		ans.x[i] = 0.0;
		for(j=0; j<2; j++){
			ans.x[i] += obj1.x[j] * obj2.A[j][i];
		}
	}
	return(ans);
}

// mat22 * vec2
inline vec2 operator*(mat22 obj1, vec2 obj2)
{
	int i, j;
	vec2 ans;
	for(i=0; i<2; i++){
		ans.x[i] = 0.0;
		for(j=0; j<2; j++){
			ans.x[i] += obj1.A[i][j] * obj2.x[j];
		}
	}
	return(ans);
}

// Extract row vector
inline vec2 mat22::row(int num)
{
	int i;
	vec2 ans;
	for(i=0; i<2; i++) ans.x[i] = A[num][i];
	return(ans);
}

// Extract column vector
inline vec2 mat22::col(int num)
{
	int i;
	vec2 ans;
	for(i=0; i<2; i++) ans.x[i] = A[i][num];
	return(ans);
}

// Set number into (i, j) element
inline void mat22::set(int i, int j, double x){ A[i][j] = x; }

// Set row vector of the specified number
inline void mat22::row_set(int num, vec2 obj)
{
	int i;
	for(i=0; i<2; i++) A[num][i] = obj.x[i];
}

// Set row vector of the specified number
inline void mat22::row_set(int num, double x0, double x1)
{
	A[num][0] = x0; A[num][1] = x1; 
}

// Set column vector of the specified number
inline void mat22::col_set(int num, vec2 obj)
{
	int i;
	for(i=0; i<2; i++) A[i][num] = obj.x[i];
}

// Set column vector of the specified number
inline void mat22::col_set(int num, double x0, double x1)
{
	A[0][num] = x0; A[1][num] = x1; 
}

// Return transposed matrix
inline mat22 mat22::trans(void)
{
	int i, j; mat22 ans;
	for(i=0; i<c; i++) for(j=0; j<r; j++) ans.A[i][j] = A[j][i];
	return(ans);
}

// Overload of '+' operator --------------------------------------------------//
// mat23 + mat23
inline mat23 operator+(mat23 obj1, mat23 obj2)
{
	int i, j;
	mat23 ans;
	for(i=0; i<2; i++){
		for(j=0; j<3; j++){
			ans.A[i][j] = obj1.A[i][j] + obj2.A[i][j];
		}
	}
	return(ans);
}

// Overload of '-' operator --------------------------------------------------//
// mat23 - mat23
inline mat23 operator-(mat23 obj1, mat23 obj2)
{
	int i, j;
	mat23 ans;
	for(i=0; i<2; i++){
		for(j=0; j<3; j++){
			ans.A[i][j] = obj1.A[i][j] - obj2.A[i][j];
		}
	}
	return(ans);
}

// Overload of '-' operator(-mat23)
inline mat23 operator-(mat23 obj)
{
	int i, j;
	mat23 ans;
	for(i=0; i<2; i++) for(j=0; j<3; j++) ans.A[i][j] = -obj.A[i][j];
	return(ans);
}

// Overload of '*' operator --------------------------------------------------//
// double * mat23
inline mat23 operator*(double a, mat23 obj)
{
	int i, j;
	mat23 ans;
	for(i=0; i<2; i++){
		for(j=0; j<3; j++){
			ans.A[i][j] = a * obj.A[i][j];
		}
	}
	return(ans);
}

// mat23 * double
inline mat23 operator*(mat23 obj, double a)
{
	int i, j;
	mat23 ans;
	for(i=0; i<2; i++){
		for(j=0; j<3; j++){
			ans.A[i][j] = obj.A[i][j] * a;
		}
	}
	return(ans);
}

// vec2 * mat23
inline vec3 operator*(vec2 obj1, mat23 obj2)
{
	int i, j;
	vec3 ans;
	for(i=0; i<3; i++){
		ans.x[i] = 0.0;
		for(j=0; j<2; j++){
			ans.x[i] += obj1.x[j] * obj2.A[j][i];
		}
	}
	return(ans);
}

// mat23 * vec3
inline vec2 operator*(mat23 obj1, vec3 obj2)
{
	int i, j;
	vec2 ans;
	for(i=0; i<2; i++){
		ans.x[i] = 0.0;
		for(j=0; j<3; j++){
			ans.x[i] += obj1.A[i][j] * obj2.x[j];
		}
	}
	return(ans);
}

// Extract row vector
inline vec3 mat23::row(int num)
{
	int i;
	vec3 ans;
	for(i=0; i<3; i++) ans.x[i] = A[num][i];
	return(ans);
}

// Extract column vector
inline vec2 mat23::col(int num)
{
	int i;
	vec2 ans;
	for(i=0; i<2; i++) ans.x[i] = A[i][num];
	return(ans);
}

// Set number into (i, j) element
inline void mat23::set(int i, int j, double x){ A[i][j] = x; }

// Set row vector of the specified number
inline void mat23::row_set(int num, vec3 obj)
{
	int i;
	for(i=0; i<3; i++) A[num][i] = obj.x[i];
}

// Set row vector of the specified number
inline void mat23::row_set(int num, double x0, double x1, double x2)
{
	A[num][0] = x0; A[num][1] = x1; A[num][2] = x2; 
}

// Set column vector of the specified number
inline void mat23::col_set(int num, vec2 obj)
{
	int i;
	for(i=0; i<2; i++) A[i][num] = obj.x[i];
}

// Set column vector of the specified number
inline void mat23::col_set(int num, double x0, double x1, double x2)
{
	A[0][num] = x0; A[1][num] = x1; A[2][num] = x2; 
}

// Return transposed matrix
inline mat32 mat23::trans(void)
{
	int i, j; mat32 ans;
	for(i=0; i<c; i++) for(j=0; j<r; j++) ans.A[i][j] = A[j][i];
	return(ans);
}

// Overload of '+' operator --------------------------------------------------//
// mat24 + mat24
inline mat24 operator+(mat24 obj1, mat24 obj2)
{
	int i, j;
	mat24 ans;
	for(i=0; i<2; i++){
		for(j=0; j<4; j++){
			ans.A[i][j] = obj1.A[i][j] + obj2.A[i][j];
		}
	}
	return(ans);
}

// Overload of '-' operator --------------------------------------------------//
// mat24 - mat24
inline mat24 operator-(mat24 obj1, mat24 obj2)
{
	int i, j;
	mat24 ans;
	for(i=0; i<2; i++){
		for(j=0; j<4; j++){
			ans.A[i][j] = obj1.A[i][j] - obj2.A[i][j];
		}
	}
	return(ans);
}

// Overload of '-' operator(-mat24)
inline mat24 operator-(mat24 obj)
{
	int i, j;
	mat24 ans;
	for(i=0; i<2; i++) for(j=0; j<4; j++) ans.A[i][j] = -obj.A[i][j];
	return(ans);
}

// Overload of '*' operator --------------------------------------------------//
// double * mat24
inline mat24 operator*(double a, mat24 obj)
{
	int i, j;
	mat24 ans;
	for(i=0; i<2; i++){
		for(j=0; j<4; j++){
			ans.A[i][j] = a * obj.A[i][j];
		}
	}
	return(ans);
}

// mat24 * double
inline mat24 operator*(mat24 obj, double a)
{
	int i, j;
	mat24 ans;
	for(i=0; i<2; i++){
		for(j=0; j<4; j++){
			ans.A[i][j] = obj.A[i][j] * a;
		}
	}
	return(ans);
}

// vec2 * mat24
inline vec4 operator*(vec2 obj1, mat24 obj2)
{
	int i, j;
	vec4 ans;
	for(i=0; i<4; i++){
		ans.x[i] = 0.0;
		for(j=0; j<2; j++){
			ans.x[i] += obj1.x[j] * obj2.A[j][i];
		}
	}
	return(ans);
}

// mat24 * vec4
inline vec2 operator*(mat24 obj1, vec4 obj2)
{
	int i, j;
	vec2 ans;
	for(i=0; i<2; i++){
		ans.x[i] = 0.0;
		for(j=0; j<4; j++){
			ans.x[i] += obj1.A[i][j] * obj2.x[j];
		}
	}
	return(ans);
}

// Extract row vector
inline vec4 mat24::row(int num)
{
	int i;
	vec4 ans;
	for(i=0; i<4; i++) ans.x[i] = A[num][i];
	return(ans);
}

// Extract column vector
inline vec2 mat24::col(int num)
{
	int i;
	vec2 ans;
	for(i=0; i<2; i++) ans.x[i] = A[i][num];
	return(ans);
}

// Set number into (i, j) element
inline void mat24::set(int i, int j, double x){ A[i][j] = x; }

// Set row vector of the specified number
inline void mat24::row_set(int num, vec4 obj)
{
	int i;
	for(i=0; i<4; i++) A[num][i] = obj.x[i];
}

// Set row vector of the specified number
inline void mat24::row_set(int num, double x0, double x1, double x2, double x3)
{
	A[num][0] = x0; A[num][1] = x1; A[num][2] = x2; A[num][3] = x3; 
}

// Set column vector of the specified number
inline void mat24::col_set(int num, vec2 obj)
{
	int i;
	for(i=0; i<2; i++) A[i][num] = obj.x[i];
}

// Set column vector of the specified number
inline void mat24::col_set(int num, double x0, double x1, double x2, double x3)
{
	A[0][num] = x0; A[1][num] = x1; A[2][num] = x2; A[3][num] = x3; 
}

// Return transposed matrix
inline mat42 mat24::trans(void)
{
	int i, j; mat42 ans;
	for(i=0; i<c; i++) for(j=0; j<r; j++) ans.A[i][j] = A[j][i];
	return(ans);
}

// Overload of '+' operator --------------------------------------------------//
// mat25 + mat25
inline mat25 operator+(mat25 obj1, mat25 obj2)
{
	int i, j;
	mat25 ans;
	for(i=0; i<2; i++){
		for(j=0; j<5; j++){
			ans.A[i][j] = obj1.A[i][j] + obj2.A[i][j];
		}
	}
	return(ans);
}

// Overload of '-' operator --------------------------------------------------//
// mat25 - mat25
inline mat25 operator-(mat25 obj1, mat25 obj2)
{
	int i, j;
	mat25 ans;
	for(i=0; i<2; i++){
		for(j=0; j<5; j++){
			ans.A[i][j] = obj1.A[i][j] - obj2.A[i][j];
		}
	}
	return(ans);
}

// Overload of '-' operator(-mat25)
inline mat25 operator-(mat25 obj)
{
	int i, j;
	mat25 ans;
	for(i=0; i<2; i++) for(j=0; j<5; j++) ans.A[i][j] = -obj.A[i][j];
	return(ans);
}

// Overload of '*' operator --------------------------------------------------//
// double * mat25
inline mat25 operator*(double a, mat25 obj)
{
	int i, j;
	mat25 ans;
	for(i=0; i<2; i++){
		for(j=0; j<5; j++){
			ans.A[i][j] = a * obj.A[i][j];
		}
	}
	return(ans);
}

// mat25 * double
inline mat25 operator*(mat25 obj, double a)
{
	int i, j;
	mat25 ans;
	for(i=0; i<2; i++){
		for(j=0; j<5; j++){
			ans.A[i][j] = obj.A[i][j] * a;
		}
	}
	return(ans);
}

// vec2 * mat25
inline vec5 operator*(vec2 obj1, mat25 obj2)
{
	int i, j;
	vec5 ans;
	for(i=0; i<5; i++){
		ans.x[i] = 0.0;
		for(j=0; j<2; j++){
			ans.x[i] += obj1.x[j] * obj2.A[j][i];
		}
	}
	return(ans);
}

// mat25 * vec5
inline vec2 operator*(mat25 obj1, vec5 obj2)
{
	int i, j;
	vec2 ans;
	for(i=0; i<2; i++){
		ans.x[i] = 0.0;
		for(j=0; j<5; j++){
			ans.x[i] += obj1.A[i][j] * obj2.x[j];
		}
	}
	return(ans);
}

// Extract row vector
inline vec5 mat25::row(int num)
{
	int i;
	vec5 ans;
	for(i=0; i<5; i++) ans.x[i] = A[num][i];
	return(ans);
}

// Extract column vector
inline vec2 mat25::col(int num)
{
	int i;
	vec2 ans;
	for(i=0; i<2; i++) ans.x[i] = A[i][num];
	return(ans);
}

// Set number into (i, j) element
inline void mat25::set(int i, int j, double x){ A[i][j] = x; }

// Set row vector of the specified number
inline void mat25::row_set(int num, vec5 obj)
{
	int i;
	for(i=0; i<5; i++) A[num][i] = obj.x[i];
}

// Set row vector of the specified number
inline void mat25::row_set(int num, double x0, double x1, double x2, double x3, double x4)
{
	A[num][0] = x0; A[num][1] = x1; A[num][2] = x2; A[num][3] = x3; A[num][4] = x4; 
}

// Set column vector of the specified number
inline void mat25::col_set(int num, vec2 obj)
{
	int i;
	for(i=0; i<2; i++) A[i][num] = obj.x[i];
}

// Set column vector of the specified number
inline void mat25::col_set(int num, double x0, double x1, double x2, double x3, double x4)
{
	A[0][num] = x0; A[1][num] = x1; A[2][num] = x2; A[3][num] = x3; A[4][num] = x4; 
}

// Return transposed matrix
inline mat52 mat25::trans(void)
{
	int i, j; mat52 ans;
	for(i=0; i<c; i++) for(j=0; j<r; j++) ans.A[i][j] = A[j][i];
	return(ans);
}

// Overload of '+' operator --------------------------------------------------//
// mat26 + mat26
inline mat26 operator+(mat26 obj1, mat26 obj2)
{
	int i, j;
	mat26 ans;
	for(i=0; i<2; i++){
		for(j=0; j<6; j++){
			ans.A[i][j] = obj1.A[i][j] + obj2.A[i][j];
		}
	}
	return(ans);
}

// Overload of '-' operator --------------------------------------------------//
// mat26 - mat26
inline mat26 operator-(mat26 obj1, mat26 obj2)
{
	int i, j;
	mat26 ans;
	for(i=0; i<2; i++){
		for(j=0; j<6; j++){
			ans.A[i][j] = obj1.A[i][j] - obj2.A[i][j];
		}
	}
	return(ans);
}

// Overload of '-' operator(-mat26)
inline mat26 operator-(mat26 obj)
{
	int i, j;
	mat26 ans;
	for(i=0; i<2; i++) for(j=0; j<6; j++) ans.A[i][j] = -obj.A[i][j];
	return(ans);
}

// Overload of '*' operator --------------------------------------------------//
// double * mat26
inline mat26 operator*(double a, mat26 obj)
{
	int i, j;
	mat26 ans;
	for(i=0; i<2; i++){
		for(j=0; j<6; j++){
			ans.A[i][j] = a * obj.A[i][j];
		}
	}
	return(ans);
}

// mat26 * double
inline mat26 operator*(mat26 obj, double a)
{
	int i, j;
	mat26 ans;
	for(i=0; i<2; i++){
		for(j=0; j<6; j++){
			ans.A[i][j] = obj.A[i][j] * a;
		}
	}
	return(ans);
}

// vec2 * mat26
inline vec6 operator*(vec2 obj1, mat26 obj2)
{
	int i, j;
	vec6 ans;
	for(i=0; i<6; i++){
		ans.x[i] = 0.0;
		for(j=0; j<2; j++){
			ans.x[i] += obj1.x[j] * obj2.A[j][i];
		}
	}
	return(ans);
}

// mat26 * vec6
inline vec2 operator*(mat26 obj1, vec6 obj2)
{
	int i, j;
	vec2 ans;
	for(i=0; i<2; i++){
		ans.x[i] = 0.0;
		for(j=0; j<6; j++){
			ans.x[i] += obj1.A[i][j] * obj2.x[j];
		}
	}
	return(ans);
}

// Extract row vector
inline vec6 mat26::row(int num)
{
	int i;
	vec6 ans;
	for(i=0; i<6; i++) ans.x[i] = A[num][i];
	return(ans);
}

// Extract column vector
inline vec2 mat26::col(int num)
{
	int i;
	vec2 ans;
	for(i=0; i<2; i++) ans.x[i] = A[i][num];
	return(ans);
}

// Set number into (i, j) element
inline void mat26::set(int i, int j, double x){ A[i][j] = x; }

// Set row vector of the specified number
inline void mat26::row_set(int num, vec6 obj)
{
	int i;
	for(i=0; i<6; i++) A[num][i] = obj.x[i];
}

// Set row vector of the specified number
inline void mat26::row_set(int num, double x0, double x1, double x2, double x3, double x4, double x5)
{
	A[num][0] = x0; A[num][1] = x1; A[num][2] = x2; A[num][3] = x3; A[num][4] = x4; A[num][5] = x5; 
}

// Set column vector of the specified number
inline void mat26::col_set(int num, vec2 obj)
{
	int i;
	for(i=0; i<2; i++) A[i][num] = obj.x[i];
}

// Set column vector of the specified number
inline void mat26::col_set(int num, double x0, double x1, double x2, double x3, double x4, double x5)
{
	A[0][num] = x0; A[1][num] = x1; A[2][num] = x2; A[3][num] = x3; A[4][num] = x4; A[5][num] = x5; 
}

// Return transposed matrix
inline mat62 mat26::trans(void)
{
	int i, j; mat62 ans;
	for(i=0; i<c; i++) for(j=0; j<r; j++) ans.A[i][j] = A[j][i];
	return(ans);
}

// Overload of '+' operator --------------------------------------------------//
// mat27 + mat27
inline mat27 operator+(mat27 obj1, mat27 obj2)
{
	int i, j;
	mat27 ans;
	for(i=0; i<2; i++){
		for(j=0; j<7; j++){
			ans.A[i][j] = obj1.A[i][j] + obj2.A[i][j];
		}
	}
	return(ans);
}

// Overload of '-' operator --------------------------------------------------//
// mat27 - mat27
inline mat27 operator-(mat27 obj1, mat27 obj2)
{
	int i, j;
	mat27 ans;
	for(i=0; i<2; i++){
		for(j=0; j<7; j++){
			ans.A[i][j] = obj1.A[i][j] - obj2.A[i][j];
		}
	}
	return(ans);
}

// Overload of '-' operator(-mat27)
inline mat27 operator-(mat27 obj)
{
	int i, j;
	mat27 ans;
	for(i=0; i<2; i++) for(j=0; j<7; j++) ans.A[i][j] = -obj.A[i][j];
	return(ans);
}

// Overload of '*' operator --------------------------------------------------//
// double * mat27
inline mat27 operator*(double a, mat27 obj)
{
	int i, j;
	mat27 ans;
	for(i=0; i<2; i++){
		for(j=0; j<7; j++){
			ans.A[i][j] = a * obj.A[i][j];
		}
	}
	return(ans);
}

// mat27 * double
inline mat27 operator*(mat27 obj, double a)
{
	int i, j;
	mat27 ans;
	for(i=0; i<2; i++){
		for(j=0; j<7; j++){
			ans.A[i][j] = obj.A[i][j] * a;
		}
	}
	return(ans);
}

// vec2 * mat27
inline vec7 operator*(vec2 obj1, mat27 obj2)
{
	int i, j;
	vec7 ans;
	for(i=0; i<7; i++){
		ans.x[i] = 0.0;
		for(j=0; j<2; j++){
			ans.x[i] += obj1.x[j] * obj2.A[j][i];
		}
	}
	return(ans);
}

// mat27 * vec7
inline vec2 operator*(mat27 obj1, vec7 obj2)
{
	int i, j;
	vec2 ans;
	for(i=0; i<2; i++){
		ans.x[i] = 0.0;
		for(j=0; j<7; j++){
			ans.x[i] += obj1.A[i][j] * obj2.x[j];
		}
	}
	return(ans);
}

// Extract row vector
inline vec7 mat27::row(int num)
{
	int i;
	vec7 ans;
	for(i=0; i<7; i++) ans.x[i] = A[num][i];
	return(ans);
}

// Extract column vector
inline vec2 mat27::col(int num)
{
	int i;
	vec2 ans;
	for(i=0; i<2; i++) ans.x[i] = A[i][num];
	return(ans);
}

// Set number into (i, j) element
inline void mat27::set(int i, int j, double x){ A[i][j] = x; }

// Set row vector of the specified number
inline void mat27::row_set(int num, vec7 obj)
{
	int i;
	for(i=0; i<7; i++) A[num][i] = obj.x[i];
}

// Set row vector of the specified number
inline void mat27::row_set(int num, double x0, double x1, double x2, double x3, double x4, double x5, double x6)
{
	A[num][0] = x0; A[num][1] = x1; A[num][2] = x2; A[num][3] = x3; A[num][4] = x4; A[num][5] = x5; A[num][6] = x6; 
}

// Set column vector of the specified number
inline void mat27::col_set(int num, vec2 obj)
{
	int i;
	for(i=0; i<2; i++) A[i][num] = obj.x[i];
}

// Set column vector of the specified number
inline void mat27::col_set(int num, double x0, double x1, double x2, double x3, double x4, double x5, double x6)
{
	A[0][num] = x0; A[1][num] = x1; A[2][num] = x2; A[3][num] = x3; A[4][num] = x4; A[5][num] = x5; A[6][num] = x6; 
}

// Return transposed matrix
inline mat72 mat27::trans(void)
{
	int i, j; mat72 ans;
	for(i=0; i<c; i++) for(j=0; j<r; j++) ans.A[i][j] = A[j][i];
	return(ans);
}

// Overload of '+' operator --------------------------------------------------//
// mat28 + mat28
inline mat28 operator+(mat28 obj1, mat28 obj2)
{
	int i, j;
	mat28 ans;
	for(i=0; i<2; i++){
		for(j=0; j<8; j++){
			ans.A[i][j] = obj1.A[i][j] + obj2.A[i][j];
		}
	}
	return(ans);
}

// Overload of '-' operator --------------------------------------------------//
// mat28 - mat28
inline mat28 operator-(mat28 obj1, mat28 obj2)
{
	int i, j;
	mat28 ans;
	for(i=0; i<2; i++){
		for(j=0; j<8; j++){
			ans.A[i][j] = obj1.A[i][j] - obj2.A[i][j];
		}
	}
	return(ans);
}

// Overload of '-' operator(-mat28)
inline mat28 operator-(mat28 obj)
{
	int i, j;
	mat28 ans;
	for(i=0; i<2; i++) for(j=0; j<8; j++) ans.A[i][j] = -obj.A[i][j];
	return(ans);
}

// Overload of '*' operator --------------------------------------------------//
// double * mat28
inline mat28 operator*(double a, mat28 obj)
{
	int i, j;
	mat28 ans;
	for(i=0; i<2; i++){
		for(j=0; j<8; j++){
			ans.A[i][j] = a * obj.A[i][j];
		}
	}
	return(ans);
}

// mat28 * double
inline mat28 operator*(mat28 obj, double a)
{
	int i, j;
	mat28 ans;
	for(i=0; i<2; i++){
		for(j=0; j<8; j++){
			ans.A[i][j] = obj.A[i][j] * a;
		}
	}
	return(ans);
}

// vec2 * mat28
inline vec8 operator*(vec2 obj1, mat28 obj2)
{
	int i, j;
	vec8 ans;
	for(i=0; i<8; i++){
		ans.x[i] = 0.0;
		for(j=0; j<2; j++){
			ans.x[i] += obj1.x[j] * obj2.A[j][i];
		}
	}
	return(ans);
}

// mat28 * vec8
inline vec2 operator*(mat28 obj1, vec8 obj2)
{
	int i, j;
	vec2 ans;
	for(i=0; i<2; i++){
		ans.x[i] = 0.0;
		for(j=0; j<8; j++){
			ans.x[i] += obj1.A[i][j] * obj2.x[j];
		}
	}
	return(ans);
}

// Extract row vector
inline vec8 mat28::row(int num)
{
	int i;
	vec8 ans;
	for(i=0; i<8; i++) ans.x[i] = A[num][i];
	return(ans);
}

// Extract column vector
inline vec2 mat28::col(int num)
{
	int i;
	vec2 ans;
	for(i=0; i<2; i++) ans.x[i] = A[i][num];
	return(ans);
}

// Set number into (i, j) element
inline void mat28::set(int i, int j, double x){ A[i][j] = x; }

// Set row vector of the specified number
inline void mat28::row_set(int num, vec8 obj)
{
	int i;
	for(i=0; i<8; i++) A[num][i] = obj.x[i];
}

// Set row vector of the specified number
inline void mat28::row_set(int num, double x0, double x1, double x2, double x3, double x4, double x5, double x6, double x7)
{
	A[num][0] = x0; A[num][1] = x1; A[num][2] = x2; A[num][3] = x3; A[num][4] = x4; A[num][5] = x5; A[num][6] = x6; A[num][7] = x7; 
}

// Set column vector of the specified number
inline void mat28::col_set(int num, vec2 obj)
{
	int i;
	for(i=0; i<2; i++) A[i][num] = obj.x[i];
}

// Set column vector of the specified number
inline void mat28::col_set(int num, double x0, double x1, double x2, double x3, double x4, double x5, double x6, double x7)
{
	A[0][num] = x0; A[1][num] = x1; A[2][num] = x2; A[3][num] = x3; A[4][num] = x4; A[5][num] = x5; A[6][num] = x6; A[7][num] = x7; 
}

// Return transposed matrix
inline mat82 mat28::trans(void)
{
	int i, j; mat82 ans;
	for(i=0; i<c; i++) for(j=0; j<r; j++) ans.A[i][j] = A[j][i];
	return(ans);
}

// Overload of '+' operator --------------------------------------------------//
// mat29 + mat29
inline mat29 operator+(mat29 obj1, mat29 obj2)
{
	int i, j;
	mat29 ans;
	for(i=0; i<2; i++){
		for(j=0; j<9; j++){
			ans.A[i][j] = obj1.A[i][j] + obj2.A[i][j];
		}
	}
	return(ans);
}

// Overload of '-' operator --------------------------------------------------//
// mat29 - mat29
inline mat29 operator-(mat29 obj1, mat29 obj2)
{
	int i, j;
	mat29 ans;
	for(i=0; i<2; i++){
		for(j=0; j<9; j++){
			ans.A[i][j] = obj1.A[i][j] - obj2.A[i][j];
		}
	}
	return(ans);
}

// Overload of '-' operator(-mat29)
inline mat29 operator-(mat29 obj)
{
	int i, j;
	mat29 ans;
	for(i=0; i<2; i++) for(j=0; j<9; j++) ans.A[i][j] = -obj.A[i][j];
	return(ans);
}

// Overload of '*' operator --------------------------------------------------//
// double * mat29
inline mat29 operator*(double a, mat29 obj)
{
	int i, j;
	mat29 ans;
	for(i=0; i<2; i++){
		for(j=0; j<9; j++){
			ans.A[i][j] = a * obj.A[i][j];
		}
	}
	return(ans);
}

// mat29 * double
inline mat29 operator*(mat29 obj, double a)
{
	int i, j;
	mat29 ans;
	for(i=0; i<2; i++){
		for(j=0; j<9; j++){
			ans.A[i][j] = obj.A[i][j] * a;
		}
	}
	return(ans);
}

// vec2 * mat29
inline vec9 operator*(vec2 obj1, mat29 obj2)
{
	int i, j;
	vec9 ans;
	for(i=0; i<9; i++){
		ans.x[i] = 0.0;
		for(j=0; j<2; j++){
			ans.x[i] += obj1.x[j] * obj2.A[j][i];
		}
	}
	return(ans);
}

// mat29 * vec9
inline vec2 operator*(mat29 obj1, vec9 obj2)
{
	int i, j;
	vec2 ans;
	for(i=0; i<2; i++){
		ans.x[i] = 0.0;
		for(j=0; j<9; j++){
			ans.x[i] += obj1.A[i][j] * obj2.x[j];
		}
	}
	return(ans);
}

// Extract row vector
inline vec9 mat29::row(int num)
{
	int i;
	vec9 ans;
	for(i=0; i<9; i++) ans.x[i] = A[num][i];
	return(ans);
}

// Extract column vector
inline vec2 mat29::col(int num)
{
	int i;
	vec2 ans;
	for(i=0; i<2; i++) ans.x[i] = A[i][num];
	return(ans);
}

// Set number into (i, j) element
inline void mat29::set(int i, int j, double x){ A[i][j] = x; }

// Set row vector of the specified number
inline void mat29::row_set(int num, vec9 obj)
{
	int i;
	for(i=0; i<9; i++) A[num][i] = obj.x[i];
}

// Set row vector of the specified number
inline void mat29::row_set(int num, double x0, double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8)
{
	A[num][0] = x0; A[num][1] = x1; A[num][2] = x2; A[num][3] = x3; A[num][4] = x4; A[num][5] = x5; A[num][6] = x6; A[num][7] = x7; A[num][8] = x8; 
}

// Set column vector of the specified number
inline void mat29::col_set(int num, vec2 obj)
{
	int i;
	for(i=0; i<2; i++) A[i][num] = obj.x[i];
}

// Set column vector of the specified number
inline void mat29::col_set(int num, double x0, double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8)
{
	A[0][num] = x0; A[1][num] = x1; A[2][num] = x2; A[3][num] = x3; A[4][num] = x4; A[5][num] = x5; A[6][num] = x6; A[7][num] = x7; A[8][num] = x8; 
}

// Return transposed matrix
inline mat92 mat29::trans(void)
{
	int i, j; mat92 ans;
	for(i=0; i<c; i++) for(j=0; j<r; j++) ans.A[i][j] = A[j][i];
	return(ans);
}

// Overload of '+' operator --------------------------------------------------//
// mat32 + mat32
inline mat32 operator+(mat32 obj1, mat32 obj2)
{
	int i, j;
	mat32 ans;
	for(i=0; i<3; i++){
		for(j=0; j<2; j++){
			ans.A[i][j] = obj1.A[i][j] + obj2.A[i][j];
		}
	}
	return(ans);
}

// Overload of '-' operator --------------------------------------------------//
// mat32 - mat32
inline mat32 operator-(mat32 obj1, mat32 obj2)
{
	int i, j;
	mat32 ans;
	for(i=0; i<3; i++){
		for(j=0; j<2; j++){
			ans.A[i][j] = obj1.A[i][j] - obj2.A[i][j];
		}
	}
	return(ans);
}

// Overload of '-' operator(-mat32)
inline mat32 operator-(mat32 obj)
{
	int i, j;
	mat32 ans;
	for(i=0; i<3; i++) for(j=0; j<2; j++) ans.A[i][j] = -obj.A[i][j];
	return(ans);
}

// Overload of '*' operator --------------------------------------------------//
// double * mat32
inline mat32 operator*(double a, mat32 obj)
{
	int i, j;
	mat32 ans;
	for(i=0; i<3; i++){
		for(j=0; j<2; j++){
			ans.A[i][j] = a * obj.A[i][j];
		}
	}
	return(ans);
}

// mat32 * double
inline mat32 operator*(mat32 obj, double a)
{
	int i, j;
	mat32 ans;
	for(i=0; i<3; i++){
		for(j=0; j<2; j++){
			ans.A[i][j] = obj.A[i][j] * a;
		}
	}
	return(ans);
}

// vec3 * mat32
inline vec2 operator*(vec3 obj1, mat32 obj2)
{
	int i, j;
	vec2 ans;
	for(i=0; i<2; i++){
		ans.x[i] = 0.0;
		for(j=0; j<3; j++){
			ans.x[i] += obj1.x[j] * obj2.A[j][i];
		}
	}
	return(ans);
}

// mat32 * vec2
inline vec3 operator*(mat32 obj1, vec2 obj2)
{
	int i, j;
	vec3 ans;
	for(i=0; i<3; i++){
		ans.x[i] = 0.0;
		for(j=0; j<2; j++){
			ans.x[i] += obj1.A[i][j] * obj2.x[j];
		}
	}
	return(ans);
}

// Extract row vector
inline vec2 mat32::row(int num)
{
	int i;
	vec2 ans;
	for(i=0; i<2; i++) ans.x[i] = A[num][i];
	return(ans);
}

// Extract column vector
inline vec3 mat32::col(int num)
{
	int i;
	vec3 ans;
	for(i=0; i<3; i++) ans.x[i] = A[i][num];
	return(ans);
}

// Set number into (i, j) element
inline void mat32::set(int i, int j, double x){ A[i][j] = x; }

// Set row vector of the specified number
inline void mat32::row_set(int num, vec2 obj)
{
	int i;
	for(i=0; i<2; i++) A[num][i] = obj.x[i];
}

// Set row vector of the specified number
inline void mat32::row_set(int num, double x0, double x1)
{
	A[num][0] = x0; A[num][1] = x1; 
}

// Set column vector of the specified number
inline void mat32::col_set(int num, vec3 obj)
{
	int i;
	for(i=0; i<3; i++) A[i][num] = obj.x[i];
}

// Set column vector of the specified number
inline void mat32::col_set(int num, double x0, double x1)
{
	A[0][num] = x0; A[1][num] = x1; 
}

// Return transposed matrix
inline mat23 mat32::trans(void)
{
	int i, j; mat23 ans;
	for(i=0; i<c; i++) for(j=0; j<r; j++) ans.A[i][j] = A[j][i];
	return(ans);
}

// Overload of '+' operator --------------------------------------------------//
// mat33 + mat33
inline mat33 operator+(mat33 obj1, mat33 obj2)
{
	int i, j;
	mat33 ans;
	for(i=0; i<3; i++){
		for(j=0; j<3; j++){
			ans.A[i][j] = obj1.A[i][j] + obj2.A[i][j];
		}
	}
	return(ans);
}

// Overload of '-' operator --------------------------------------------------//
// mat33 - mat33
inline mat33 operator-(mat33 obj1, mat33 obj2)
{
	int i, j;
	mat33 ans;
	for(i=0; i<3; i++){
		for(j=0; j<3; j++){
			ans.A[i][j] = obj1.A[i][j] - obj2.A[i][j];
		}
	}
	return(ans);
}

// Overload of '-' operator(-mat33)
inline mat33 operator-(mat33 obj)
{
	int i, j;
	mat33 ans;
	for(i=0; i<3; i++) for(j=0; j<3; j++) ans.A[i][j] = -obj.A[i][j];
	return(ans);
}

// Overload of '*' operator --------------------------------------------------//
// double * mat33
inline mat33 operator*(double a, mat33 obj)
{
	int i, j;
	mat33 ans;
	for(i=0; i<3; i++){
		for(j=0; j<3; j++){
			ans.A[i][j] = a * obj.A[i][j];
		}
	}
	return(ans);
}

// mat33 * double
inline mat33 operator*(mat33 obj, double a)
{
	int i, j;
	mat33 ans;
	for(i=0; i<3; i++){
		for(j=0; j<3; j++){
			ans.A[i][j] = obj.A[i][j] * a;
		}
	}
	return(ans);
}

// vec3 * mat33
inline vec3 operator*(vec3 obj1, mat33 obj2)
{
	int i, j;
	vec3 ans;
	for(i=0; i<3; i++){
		ans.x[i] = 0.0;
		for(j=0; j<3; j++){
			ans.x[i] += obj1.x[j] * obj2.A[j][i];
		}
	}
	return(ans);
}

// mat33 * vec3
inline vec3 operator*(mat33 obj1, vec3 obj2)
{
	int i, j;
	vec3 ans;
	for(i=0; i<3; i++){
		ans.x[i] = 0.0;
		for(j=0; j<3; j++){
			ans.x[i] += obj1.A[i][j] * obj2.x[j];
		}
	}
	return(ans);
}

// Extract row vector
inline vec3 mat33::row(int num)
{
	int i;
	vec3 ans;
	for(i=0; i<3; i++) ans.x[i] = A[num][i];
	return(ans);
}

// Extract column vector
inline vec3 mat33::col(int num)
{
	int i;
	vec3 ans;
	for(i=0; i<3; i++) ans.x[i] = A[i][num];
	return(ans);
}

// Set number into (i, j) element
inline void mat33::set(int i, int j, double x){ A[i][j] = x; }

// Set row vector of the specified number
inline void mat33::row_set(int num, vec3 obj)
{
	int i;
	for(i=0; i<3; i++) A[num][i] = obj.x[i];
}

// Set row vector of the specified number
inline void mat33::row_set(int num, double x0, double x1, double x2)
{
	A[num][0] = x0; A[num][1] = x1; A[num][2] = x2; 
}

// Set column vector of the specified number
inline void mat33::col_set(int num, vec3 obj)
{
	int i;
	for(i=0; i<3; i++) A[i][num] = obj.x[i];
}

// Set column vector of the specified number
inline void mat33::col_set(int num, double x0, double x1, double x2)
{
	A[0][num] = x0; A[1][num] = x1; A[2][num] = x2; 
}

// Return transposed matrix
inline mat33 mat33::trans(void)
{
	int i, j; mat33 ans;
	for(i=0; i<c; i++) for(j=0; j<r; j++) ans.A[i][j] = A[j][i];
	return(ans);
}

// Overload of '+' operator --------------------------------------------------//
// mat34 + mat34
inline mat34 operator+(mat34 obj1, mat34 obj2)
{
	int i, j;
	mat34 ans;
	for(i=0; i<3; i++){
		for(j=0; j<4; j++){
			ans.A[i][j] = obj1.A[i][j] + obj2.A[i][j];
		}
	}
	return(ans);
}

// Overload of '-' operator --------------------------------------------------//
// mat34 - mat34
inline mat34 operator-(mat34 obj1, mat34 obj2)
{
	int i, j;
	mat34 ans;
	for(i=0; i<3; i++){
		for(j=0; j<4; j++){
			ans.A[i][j] = obj1.A[i][j] - obj2.A[i][j];
		}
	}
	return(ans);
}

// Overload of '-' operator(-mat34)
inline mat34 operator-(mat34 obj)
{
	int i, j;
	mat34 ans;
	for(i=0; i<3; i++) for(j=0; j<4; j++) ans.A[i][j] = -obj.A[i][j];
	return(ans);
}

// Overload of '*' operator --------------------------------------------------//
// double * mat34
inline mat34 operator*(double a, mat34 obj)
{
	int i, j;
	mat34 ans;
	for(i=0; i<3; i++){
		for(j=0; j<4; j++){
			ans.A[i][j] = a * obj.A[i][j];
		}
	}
	return(ans);
}

// mat34 * double
inline mat34 operator*(mat34 obj, double a)
{
	int i, j;
	mat34 ans;
	for(i=0; i<3; i++){
		for(j=0; j<4; j++){
			ans.A[i][j] = obj.A[i][j] * a;
		}
	}
	return(ans);
}

// vec3 * mat34
inline vec4 operator*(vec3 obj1, mat34 obj2)
{
	int i, j;
	vec4 ans;
	for(i=0; i<4; i++){
		ans.x[i] = 0.0;
		for(j=0; j<3; j++){
			ans.x[i] += obj1.x[j] * obj2.A[j][i];
		}
	}
	return(ans);
}

// mat34 * vec4
inline vec3 operator*(mat34 obj1, vec4 obj2)
{
	int i, j;
	vec3 ans;
	for(i=0; i<3; i++){
		ans.x[i] = 0.0;
		for(j=0; j<4; j++){
			ans.x[i] += obj1.A[i][j] * obj2.x[j];
		}
	}
	return(ans);
}

// Extract row vector
inline vec4 mat34::row(int num)
{
	int i;
	vec4 ans;
	for(i=0; i<4; i++) ans.x[i] = A[num][i];
	return(ans);
}

// Extract column vector
inline vec3 mat34::col(int num)
{
	int i;
	vec3 ans;
	for(i=0; i<3; i++) ans.x[i] = A[i][num];
	return(ans);
}

// Set number into (i, j) element
inline void mat34::set(int i, int j, double x){ A[i][j] = x; }

// Set row vector of the specified number
inline void mat34::row_set(int num, vec4 obj)
{
	int i;
	for(i=0; i<4; i++) A[num][i] = obj.x[i];
}

// Set row vector of the specified number
inline void mat34::row_set(int num, double x0, double x1, double x2, double x3)
{
	A[num][0] = x0; A[num][1] = x1; A[num][2] = x2; A[num][3] = x3; 
}

// Set column vector of the specified number
inline void mat34::col_set(int num, vec3 obj)
{
	int i;
	for(i=0; i<3; i++) A[i][num] = obj.x[i];
}

// Set column vector of the specified number
inline void mat34::col_set(int num, double x0, double x1, double x2, double x3)
{
	A[0][num] = x0; A[1][num] = x1; A[2][num] = x2; A[3][num] = x3; 
}

// Return transposed matrix
inline mat43 mat34::trans(void)
{
	int i, j; mat43 ans;
	for(i=0; i<c; i++) for(j=0; j<r; j++) ans.A[i][j] = A[j][i];
	return(ans);
}

// Overload of '+' operator --------------------------------------------------//
// mat35 + mat35
inline mat35 operator+(mat35 obj1, mat35 obj2)
{
	int i, j;
	mat35 ans;
	for(i=0; i<3; i++){
		for(j=0; j<5; j++){
			ans.A[i][j] = obj1.A[i][j] + obj2.A[i][j];
		}
	}
	return(ans);
}

// Overload of '-' operator --------------------------------------------------//
// mat35 - mat35
inline mat35 operator-(mat35 obj1, mat35 obj2)
{
	int i, j;
	mat35 ans;
	for(i=0; i<3; i++){
		for(j=0; j<5; j++){
			ans.A[i][j] = obj1.A[i][j] - obj2.A[i][j];
		}
	}
	return(ans);
}

// Overload of '-' operator(-mat35)
inline mat35 operator-(mat35 obj)
{
	int i, j;
	mat35 ans;
	for(i=0; i<3; i++) for(j=0; j<5; j++) ans.A[i][j] = -obj.A[i][j];
	return(ans);
}

// Overload of '*' operator --------------------------------------------------//
// double * mat35
inline mat35 operator*(double a, mat35 obj)
{
	int i, j;
	mat35 ans;
	for(i=0; i<3; i++){
		for(j=0; j<5; j++){
			ans.A[i][j] = a * obj.A[i][j];
		}
	}
	return(ans);
}

// mat35 * double
inline mat35 operator*(mat35 obj, double a)
{
	int i, j;
	mat35 ans;
	for(i=0; i<3; i++){
		for(j=0; j<5; j++){
			ans.A[i][j] = obj.A[i][j] * a;
		}
	}
	return(ans);
}

// vec3 * mat35
inline vec5 operator*(vec3 obj1, mat35 obj2)
{
	int i, j;
	vec5 ans;
	for(i=0; i<5; i++){
		ans.x[i] = 0.0;
		for(j=0; j<3; j++){
			ans.x[i] += obj1.x[j] * obj2.A[j][i];
		}
	}
	return(ans);
}

// mat35 * vec5
inline vec3 operator*(mat35 obj1, vec5 obj2)
{
	int i, j;
	vec3 ans;
	for(i=0; i<3; i++){
		ans.x[i] = 0.0;
		for(j=0; j<5; j++){
			ans.x[i] += obj1.A[i][j] * obj2.x[j];
		}
	}
	return(ans);
}

// Extract row vector
inline vec5 mat35::row(int num)
{
	int i;
	vec5 ans;
	for(i=0; i<5; i++) ans.x[i] = A[num][i];
	return(ans);
}

// Extract column vector
inline vec3 mat35::col(int num)
{
	int i;
	vec3 ans;
	for(i=0; i<3; i++) ans.x[i] = A[i][num];
	return(ans);
}

// Set number into (i, j) element
inline void mat35::set(int i, int j, double x){ A[i][j] = x; }

// Set row vector of the specified number
inline void mat35::row_set(int num, vec5 obj)
{
	int i;
	for(i=0; i<5; i++) A[num][i] = obj.x[i];
}

// Set row vector of the specified number
inline void mat35::row_set(int num, double x0, double x1, double x2, double x3, double x4)
{
	A[num][0] = x0; A[num][1] = x1; A[num][2] = x2; A[num][3] = x3; A[num][4] = x4; 
}

// Set column vector of the specified number
inline void mat35::col_set(int num, vec3 obj)
{
	int i;
	for(i=0; i<3; i++) A[i][num] = obj.x[i];
}

// Set column vector of the specified number
inline void mat35::col_set(int num, double x0, double x1, double x2, double x3, double x4)
{
	A[0][num] = x0; A[1][num] = x1; A[2][num] = x2; A[3][num] = x3; A[4][num] = x4; 
}

// Return transposed matrix
inline mat53 mat35::trans(void)
{
	int i, j; mat53 ans;
	for(i=0; i<c; i++) for(j=0; j<r; j++) ans.A[i][j] = A[j][i];
	return(ans);
}

// Overload of '+' operator --------------------------------------------------//
// mat36 + mat36
inline mat36 operator+(mat36 obj1, mat36 obj2)
{
	int i, j;
	mat36 ans;
	for(i=0; i<3; i++){
		for(j=0; j<6; j++){
			ans.A[i][j] = obj1.A[i][j] + obj2.A[i][j];
		}
	}
	return(ans);
}

// Overload of '-' operator --------------------------------------------------//
// mat36 - mat36
inline mat36 operator-(mat36 obj1, mat36 obj2)
{
	int i, j;
	mat36 ans;
	for(i=0; i<3; i++){
		for(j=0; j<6; j++){
			ans.A[i][j] = obj1.A[i][j] - obj2.A[i][j];
		}
	}
	return(ans);
}

// Overload of '-' operator(-mat36)
inline mat36 operator-(mat36 obj)
{
	int i, j;
	mat36 ans;
	for(i=0; i<3; i++) for(j=0; j<6; j++) ans.A[i][j] = -obj.A[i][j];
	return(ans);
}

// Overload of '*' operator --------------------------------------------------//
// double * mat36
inline mat36 operator*(double a, mat36 obj)
{
	int i, j;
	mat36 ans;
	for(i=0; i<3; i++){
		for(j=0; j<6; j++){
			ans.A[i][j] = a * obj.A[i][j];
		}
	}
	return(ans);
}

// mat36 * double
inline mat36 operator*(mat36 obj, double a)
{
	int i, j;
	mat36 ans;
	for(i=0; i<3; i++){
		for(j=0; j<6; j++){
			ans.A[i][j] = obj.A[i][j] * a;
		}
	}
	return(ans);
}

// vec3 * mat36
inline vec6 operator*(vec3 obj1, mat36 obj2)
{
	int i, j;
	vec6 ans;
	for(i=0; i<6; i++){
		ans.x[i] = 0.0;
		for(j=0; j<3; j++){
			ans.x[i] += obj1.x[j] * obj2.A[j][i];
		}
	}
	return(ans);
}

// mat36 * vec6
inline vec3 operator*(mat36 obj1, vec6 obj2)
{
	int i, j;
	vec3 ans;
	for(i=0; i<3; i++){
		ans.x[i] = 0.0;
		for(j=0; j<6; j++){
			ans.x[i] += obj1.A[i][j] * obj2.x[j];
		}
	}
	return(ans);
}

// Extract row vector
inline vec6 mat36::row(int num)
{
	int i;
	vec6 ans;
	for(i=0; i<6; i++) ans.x[i] = A[num][i];
	return(ans);
}

// Extract column vector
inline vec3 mat36::col(int num)
{
	int i;
	vec3 ans;
	for(i=0; i<3; i++) ans.x[i] = A[i][num];
	return(ans);
}

// Set number into (i, j) element
inline void mat36::set(int i, int j, double x){ A[i][j] = x; }

// Set row vector of the specified number
inline void mat36::row_set(int num, vec6 obj)
{
	int i;
	for(i=0; i<6; i++) A[num][i] = obj.x[i];
}

// Set row vector of the specified number
inline void mat36::row_set(int num, double x0, double x1, double x2, double x3, double x4, double x5)
{
	A[num][0] = x0; A[num][1] = x1; A[num][2] = x2; A[num][3] = x3; A[num][4] = x4; A[num][5] = x5; 
}

// Set column vector of the specified number
inline void mat36::col_set(int num, vec3 obj)
{
	int i;
	for(i=0; i<3; i++) A[i][num] = obj.x[i];
}

// Set column vector of the specified number
inline void mat36::col_set(int num, double x0, double x1, double x2, double x3, double x4, double x5)
{
	A[0][num] = x0; A[1][num] = x1; A[2][num] = x2; A[3][num] = x3; A[4][num] = x4; A[5][num] = x5; 
}

// Return transposed matrix
inline mat63 mat36::trans(void)
{
	int i, j; mat63 ans;
	for(i=0; i<c; i++) for(j=0; j<r; j++) ans.A[i][j] = A[j][i];
	return(ans);
}

// Overload of '+' operator --------------------------------------------------//
// mat37 + mat37
inline mat37 operator+(mat37 obj1, mat37 obj2)
{
	int i, j;
	mat37 ans;
	for(i=0; i<3; i++){
		for(j=0; j<7; j++){
			ans.A[i][j] = obj1.A[i][j] + obj2.A[i][j];
		}
	}
	return(ans);
}

// Overload of '-' operator --------------------------------------------------//
// mat37 - mat37
inline mat37 operator-(mat37 obj1, mat37 obj2)
{
	int i, j;
	mat37 ans;
	for(i=0; i<3; i++){
		for(j=0; j<7; j++){
			ans.A[i][j] = obj1.A[i][j] - obj2.A[i][j];
		}
	}
	return(ans);
}

// Overload of '-' operator(-mat37)
inline mat37 operator-(mat37 obj)
{
	int i, j;
	mat37 ans;
	for(i=0; i<3; i++) for(j=0; j<7; j++) ans.A[i][j] = -obj.A[i][j];
	return(ans);
}

// Overload of '*' operator --------------------------------------------------//
// double * mat37
inline mat37 operator*(double a, mat37 obj)
{
	int i, j;
	mat37 ans;
	for(i=0; i<3; i++){
		for(j=0; j<7; j++){
			ans.A[i][j] = a * obj.A[i][j];
		}
	}
	return(ans);
}

// mat37 * double
inline mat37 operator*(mat37 obj, double a)
{
	int i, j;
	mat37 ans;
	for(i=0; i<3; i++){
		for(j=0; j<7; j++){
			ans.A[i][j] = obj.A[i][j] * a;
		}
	}
	return(ans);
}

// vec3 * mat37
inline vec7 operator*(vec3 obj1, mat37 obj2)
{
	int i, j;
	vec7 ans;
	for(i=0; i<7; i++){
		ans.x[i] = 0.0;
		for(j=0; j<3; j++){
			ans.x[i] += obj1.x[j] * obj2.A[j][i];
		}
	}
	return(ans);
}

// mat37 * vec7
inline vec3 operator*(mat37 obj1, vec7 obj2)
{
	int i, j;
	vec3 ans;
	for(i=0; i<3; i++){
		ans.x[i] = 0.0;
		for(j=0; j<7; j++){
			ans.x[i] += obj1.A[i][j] * obj2.x[j];
		}
	}
	return(ans);
}

// Extract row vector
inline vec7 mat37::row(int num)
{
	int i;
	vec7 ans;
	for(i=0; i<7; i++) ans.x[i] = A[num][i];
	return(ans);
}

// Extract column vector
inline vec3 mat37::col(int num)
{
	int i;
	vec3 ans;
	for(i=0; i<3; i++) ans.x[i] = A[i][num];
	return(ans);
}

// Set number into (i, j) element
inline void mat37::set(int i, int j, double x){ A[i][j] = x; }

// Set row vector of the specified number
inline void mat37::row_set(int num, vec7 obj)
{
	int i;
	for(i=0; i<7; i++) A[num][i] = obj.x[i];
}

// Set row vector of the specified number
inline void mat37::row_set(int num, double x0, double x1, double x2, double x3, double x4, double x5, double x6)
{
	A[num][0] = x0; A[num][1] = x1; A[num][2] = x2; A[num][3] = x3; A[num][4] = x4; A[num][5] = x5; A[num][6] = x6; 
}

// Set column vector of the specified number
inline void mat37::col_set(int num, vec3 obj)
{
	int i;
	for(i=0; i<3; i++) A[i][num] = obj.x[i];
}

// Set column vector of the specified number
inline void mat37::col_set(int num, double x0, double x1, double x2, double x3, double x4, double x5, double x6)
{
	A[0][num] = x0; A[1][num] = x1; A[2][num] = x2; A[3][num] = x3; A[4][num] = x4; A[5][num] = x5; A[6][num] = x6; 
}

// Return transposed matrix
inline mat73 mat37::trans(void)
{
	int i, j; mat73 ans;
	for(i=0; i<c; i++) for(j=0; j<r; j++) ans.A[i][j] = A[j][i];
	return(ans);
}

// Overload of '+' operator --------------------------------------------------//
// mat38 + mat38
inline mat38 operator+(mat38 obj1, mat38 obj2)
{
	int i, j;
	mat38 ans;
	for(i=0; i<3; i++){
		for(j=0; j<8; j++){
			ans.A[i][j] = obj1.A[i][j] + obj2.A[i][j];
		}
	}
	return(ans);
}

// Overload of '-' operator --------------------------------------------------//
// mat38 - mat38
inline mat38 operator-(mat38 obj1, mat38 obj2)
{
	int i, j;
	mat38 ans;
	for(i=0; i<3; i++){
		for(j=0; j<8; j++){
			ans.A[i][j] = obj1.A[i][j] - obj2.A[i][j];
		}
	}
	return(ans);
}

// Overload of '-' operator(-mat38)
inline mat38 operator-(mat38 obj)
{
	int i, j;
	mat38 ans;
	for(i=0; i<3; i++) for(j=0; j<8; j++) ans.A[i][j] = -obj.A[i][j];
	return(ans);
}

// Overload of '*' operator --------------------------------------------------//
// double * mat38
inline mat38 operator*(double a, mat38 obj)
{
	int i, j;
	mat38 ans;
	for(i=0; i<3; i++){
		for(j=0; j<8; j++){
			ans.A[i][j] = a * obj.A[i][j];
		}
	}
	return(ans);
}

// mat38 * double
inline mat38 operator*(mat38 obj, double a)
{
	int i, j;
	mat38 ans;
	for(i=0; i<3; i++){
		for(j=0; j<8; j++){
			ans.A[i][j] = obj.A[i][j] * a;
		}
	}
	return(ans);
}

// vec3 * mat38
inline vec8 operator*(vec3 obj1, mat38 obj2)
{
	int i, j;
	vec8 ans;
	for(i=0; i<8; i++){
		ans.x[i] = 0.0;
		for(j=0; j<3; j++){
			ans.x[i] += obj1.x[j] * obj2.A[j][i];
		}
	}
	return(ans);
}

// mat38 * vec8
inline vec3 operator*(mat38 obj1, vec8 obj2)
{
	int i, j;
	vec3 ans;
	for(i=0; i<3; i++){
		ans.x[i] = 0.0;
		for(j=0; j<8; j++){
			ans.x[i] += obj1.A[i][j] * obj2.x[j];
		}
	}
	return(ans);
}

// Extract row vector
inline vec8 mat38::row(int num)
{
	int i;
	vec8 ans;
	for(i=0; i<8; i++) ans.x[i] = A[num][i];
	return(ans);
}

// Extract column vector
inline vec3 mat38::col(int num)
{
	int i;
	vec3 ans;
	for(i=0; i<3; i++) ans.x[i] = A[i][num];
	return(ans);
}

// Set number into (i, j) element
inline void mat38::set(int i, int j, double x){ A[i][j] = x; }

// Set row vector of the specified number
inline void mat38::row_set(int num, vec8 obj)
{
	int i;
	for(i=0; i<8; i++) A[num][i] = obj.x[i];
}

// Set row vector of the specified number
inline void mat38::row_set(int num, double x0, double x1, double x2, double x3, double x4, double x5, double x6, double x7)
{
	A[num][0] = x0; A[num][1] = x1; A[num][2] = x2; A[num][3] = x3; A[num][4] = x4; A[num][5] = x5; A[num][6] = x6; A[num][7] = x7; 
}

// Set column vector of the specified number
inline void mat38::col_set(int num, vec3 obj)
{
	int i;
	for(i=0; i<3; i++) A[i][num] = obj.x[i];
}

// Set column vector of the specified number
inline void mat38::col_set(int num, double x0, double x1, double x2, double x3, double x4, double x5, double x6, double x7)
{
	A[0][num] = x0; A[1][num] = x1; A[2][num] = x2; A[3][num] = x3; A[4][num] = x4; A[5][num] = x5; A[6][num] = x6; A[7][num] = x7; 
}

// Return transposed matrix
inline mat83 mat38::trans(void)
{
	int i, j; mat83 ans;
	for(i=0; i<c; i++) for(j=0; j<r; j++) ans.A[i][j] = A[j][i];
	return(ans);
}

// Overload of '+' operator --------------------------------------------------//
// mat39 + mat39
inline mat39 operator+(mat39 obj1, mat39 obj2)
{
	int i, j;
	mat39 ans;
	for(i=0; i<3; i++){
		for(j=0; j<9; j++){
			ans.A[i][j] = obj1.A[i][j] + obj2.A[i][j];
		}
	}
	return(ans);
}

// Overload of '-' operator --------------------------------------------------//
// mat39 - mat39
inline mat39 operator-(mat39 obj1, mat39 obj2)
{
	int i, j;
	mat39 ans;
	for(i=0; i<3; i++){
		for(j=0; j<9; j++){
			ans.A[i][j] = obj1.A[i][j] - obj2.A[i][j];
		}
	}
	return(ans);
}

// Overload of '-' operator(-mat39)
inline mat39 operator-(mat39 obj)
{
	int i, j;
	mat39 ans;
	for(i=0; i<3; i++) for(j=0; j<9; j++) ans.A[i][j] = -obj.A[i][j];
	return(ans);
}

// Overload of '*' operator --------------------------------------------------//
// double * mat39
inline mat39 operator*(double a, mat39 obj)
{
	int i, j;
	mat39 ans;
	for(i=0; i<3; i++){
		for(j=0; j<9; j++){
			ans.A[i][j] = a * obj.A[i][j];
		}
	}
	return(ans);
}

// mat39 * double
inline mat39 operator*(mat39 obj, double a)
{
	int i, j;
	mat39 ans;
	for(i=0; i<3; i++){
		for(j=0; j<9; j++){
			ans.A[i][j] = obj.A[i][j] * a;
		}
	}
	return(ans);
}

// vec3 * mat39
inline vec9 operator*(vec3 obj1, mat39 obj2)
{
	int i, j;
	vec9 ans;
	for(i=0; i<9; i++){
		ans.x[i] = 0.0;
		for(j=0; j<3; j++){
			ans.x[i] += obj1.x[j] * obj2.A[j][i];
		}
	}
	return(ans);
}

// mat39 * vec9
inline vec3 operator*(mat39 obj1, vec9 obj2)
{
	int i, j;
	vec3 ans;
	for(i=0; i<3; i++){
		ans.x[i] = 0.0;
		for(j=0; j<9; j++){
			ans.x[i] += obj1.A[i][j] * obj2.x[j];
		}
	}
	return(ans);
}

// Extract row vector
inline vec9 mat39::row(int num)
{
	int i;
	vec9 ans;
	for(i=0; i<9; i++) ans.x[i] = A[num][i];
	return(ans);
}

// Extract column vector
inline vec3 mat39::col(int num)
{
	int i;
	vec3 ans;
	for(i=0; i<3; i++) ans.x[i] = A[i][num];
	return(ans);
}

// Set number into (i, j) element
inline void mat39::set(int i, int j, double x){ A[i][j] = x; }

// Set row vector of the specified number
inline void mat39::row_set(int num, vec9 obj)
{
	int i;
	for(i=0; i<9; i++) A[num][i] = obj.x[i];
}

// Set row vector of the specified number
inline void mat39::row_set(int num, double x0, double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8)
{
	A[num][0] = x0; A[num][1] = x1; A[num][2] = x2; A[num][3] = x3; A[num][4] = x4; A[num][5] = x5; A[num][6] = x6; A[num][7] = x7; A[num][8] = x8; 
}

// Set column vector of the specified number
inline void mat39::col_set(int num, vec3 obj)
{
	int i;
	for(i=0; i<3; i++) A[i][num] = obj.x[i];
}

// Set column vector of the specified number
inline void mat39::col_set(int num, double x0, double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8)
{
	A[0][num] = x0; A[1][num] = x1; A[2][num] = x2; A[3][num] = x3; A[4][num] = x4; A[5][num] = x5; A[6][num] = x6; A[7][num] = x7; A[8][num] = x8; 
}

// Return transposed matrix
inline mat93 mat39::trans(void)
{
	int i, j; mat93 ans;
	for(i=0; i<c; i++) for(j=0; j<r; j++) ans.A[i][j] = A[j][i];
	return(ans);
}

// Overload of '+' operator --------------------------------------------------//
// mat42 + mat42
inline mat42 operator+(mat42 obj1, mat42 obj2)
{
	int i, j;
	mat42 ans;
	for(i=0; i<4; i++){
		for(j=0; j<2; j++){
			ans.A[i][j] = obj1.A[i][j] + obj2.A[i][j];
		}
	}
	return(ans);
}

// Overload of '-' operator --------------------------------------------------//
// mat42 - mat42
inline mat42 operator-(mat42 obj1, mat42 obj2)
{
	int i, j;
	mat42 ans;
	for(i=0; i<4; i++){
		for(j=0; j<2; j++){
			ans.A[i][j] = obj1.A[i][j] - obj2.A[i][j];
		}
	}
	return(ans);
}

// Overload of '-' operator(-mat42)
inline mat42 operator-(mat42 obj)
{
	int i, j;
	mat42 ans;
	for(i=0; i<4; i++) for(j=0; j<2; j++) ans.A[i][j] = -obj.A[i][j];
	return(ans);
}

// Overload of '*' operator --------------------------------------------------//
// double * mat42
inline mat42 operator*(double a, mat42 obj)
{
	int i, j;
	mat42 ans;
	for(i=0; i<4; i++){
		for(j=0; j<2; j++){
			ans.A[i][j] = a * obj.A[i][j];
		}
	}
	return(ans);
}

// mat42 * double
inline mat42 operator*(mat42 obj, double a)
{
	int i, j;
	mat42 ans;
	for(i=0; i<4; i++){
		for(j=0; j<2; j++){
			ans.A[i][j] = obj.A[i][j] * a;
		}
	}
	return(ans);
}

// vec4 * mat42
inline vec2 operator*(vec4 obj1, mat42 obj2)
{
	int i, j;
	vec2 ans;
	for(i=0; i<2; i++){
		ans.x[i] = 0.0;
		for(j=0; j<4; j++){
			ans.x[i] += obj1.x[j] * obj2.A[j][i];
		}
	}
	return(ans);
}

// mat42 * vec2
inline vec4 operator*(mat42 obj1, vec2 obj2)
{
	int i, j;
	vec4 ans;
	for(i=0; i<4; i++){
		ans.x[i] = 0.0;
		for(j=0; j<2; j++){
			ans.x[i] += obj1.A[i][j] * obj2.x[j];
		}
	}
	return(ans);
}

// Extract row vector
inline vec2 mat42::row(int num)
{
	int i;
	vec2 ans;
	for(i=0; i<2; i++) ans.x[i] = A[num][i];
	return(ans);
}

// Extract column vector
inline vec4 mat42::col(int num)
{
	int i;
	vec4 ans;
	for(i=0; i<4; i++) ans.x[i] = A[i][num];
	return(ans);
}

// Set number into (i, j) element
inline void mat42::set(int i, int j, double x){ A[i][j] = x; }

// Set row vector of the specified number
inline void mat42::row_set(int num, vec2 obj)
{
	int i;
	for(i=0; i<2; i++) A[num][i] = obj.x[i];
}

// Set row vector of the specified number
inline void mat42::row_set(int num, double x0, double x1)
{
	A[num][0] = x0; A[num][1] = x1; 
}

// Set column vector of the specified number
inline void mat42::col_set(int num, vec4 obj)
{
	int i;
	for(i=0; i<4; i++) A[i][num] = obj.x[i];
}

// Set column vector of the specified number
inline void mat42::col_set(int num, double x0, double x1)
{
	A[0][num] = x0; A[1][num] = x1; 
}

// Return transposed matrix
inline mat24 mat42::trans(void)
{
	int i, j; mat24 ans;
	for(i=0; i<c; i++) for(j=0; j<r; j++) ans.A[i][j] = A[j][i];
	return(ans);
}

// Overload of '+' operator --------------------------------------------------//
// mat43 + mat43
inline mat43 operator+(mat43 obj1, mat43 obj2)
{
	int i, j;
	mat43 ans;
	for(i=0; i<4; i++){
		for(j=0; j<3; j++){
			ans.A[i][j] = obj1.A[i][j] + obj2.A[i][j];
		}
	}
	return(ans);
}

// Overload of '-' operator --------------------------------------------------//
// mat43 - mat43
inline mat43 operator-(mat43 obj1, mat43 obj2)
{
	int i, j;
	mat43 ans;
	for(i=0; i<4; i++){
		for(j=0; j<3; j++){
			ans.A[i][j] = obj1.A[i][j] - obj2.A[i][j];
		}
	}
	return(ans);
}

// Overload of '-' operator(-mat43)
inline mat43 operator-(mat43 obj)
{
	int i, j;
	mat43 ans;
	for(i=0; i<4; i++) for(j=0; j<3; j++) ans.A[i][j] = -obj.A[i][j];
	return(ans);
}

// Overload of '*' operator --------------------------------------------------//
// double * mat43
inline mat43 operator*(double a, mat43 obj)
{
	int i, j;
	mat43 ans;
	for(i=0; i<4; i++){
		for(j=0; j<3; j++){
			ans.A[i][j] = a * obj.A[i][j];
		}
	}
	return(ans);
}

// mat43 * double
inline mat43 operator*(mat43 obj, double a)
{
	int i, j;
	mat43 ans;
	for(i=0; i<4; i++){
		for(j=0; j<3; j++){
			ans.A[i][j] = obj.A[i][j] * a;
		}
	}
	return(ans);
}

// vec4 * mat43
inline vec3 operator*(vec4 obj1, mat43 obj2)
{
	int i, j;
	vec3 ans;
	for(i=0; i<3; i++){
		ans.x[i] = 0.0;
		for(j=0; j<4; j++){
			ans.x[i] += obj1.x[j] * obj2.A[j][i];
		}
	}
	return(ans);
}

// mat43 * vec3
inline vec4 operator*(mat43 obj1, vec3 obj2)
{
	int i, j;
	vec4 ans;
	for(i=0; i<4; i++){
		ans.x[i] = 0.0;
		for(j=0; j<3; j++){
			ans.x[i] += obj1.A[i][j] * obj2.x[j];
		}
	}
	return(ans);
}

// Extract row vector
inline vec3 mat43::row(int num)
{
	int i;
	vec3 ans;
	for(i=0; i<3; i++) ans.x[i] = A[num][i];
	return(ans);
}

// Extract column vector
inline vec4 mat43::col(int num)
{
	int i;
	vec4 ans;
	for(i=0; i<4; i++) ans.x[i] = A[i][num];
	return(ans);
}

// Set number into (i, j) element
inline void mat43::set(int i, int j, double x){ A[i][j] = x; }

// Set row vector of the specified number
inline void mat43::row_set(int num, vec3 obj)
{
	int i;
	for(i=0; i<3; i++) A[num][i] = obj.x[i];
}

// Set row vector of the specified number
inline void mat43::row_set(int num, double x0, double x1, double x2)
{
	A[num][0] = x0; A[num][1] = x1; A[num][2] = x2; 
}

// Set column vector of the specified number
inline void mat43::col_set(int num, vec4 obj)
{
	int i;
	for(i=0; i<4; i++) A[i][num] = obj.x[i];
}

// Set column vector of the specified number
inline void mat43::col_set(int num, double x0, double x1, double x2)
{
	A[0][num] = x0; A[1][num] = x1; A[2][num] = x2; 
}

// Return transposed matrix
inline mat34 mat43::trans(void)
{
	int i, j; mat34 ans;
	for(i=0; i<c; i++) for(j=0; j<r; j++) ans.A[i][j] = A[j][i];
	return(ans);
}

// Overload of '+' operator --------------------------------------------------//
// mat44 + mat44
inline mat44 operator+(mat44 obj1, mat44 obj2)
{
	int i, j;
	mat44 ans;
	for(i=0; i<4; i++){
		for(j=0; j<4; j++){
			ans.A[i][j] = obj1.A[i][j] + obj2.A[i][j];
		}
	}
	return(ans);
}

// Overload of '-' operator --------------------------------------------------//
// mat44 - mat44
inline mat44 operator-(mat44 obj1, mat44 obj2)
{
	int i, j;
	mat44 ans;
	for(i=0; i<4; i++){
		for(j=0; j<4; j++){
			ans.A[i][j] = obj1.A[i][j] - obj2.A[i][j];
		}
	}
	return(ans);
}

// Overload of '-' operator(-mat44)
inline mat44 operator-(mat44 obj)
{
	int i, j;
	mat44 ans;
	for(i=0; i<4; i++) for(j=0; j<4; j++) ans.A[i][j] = -obj.A[i][j];
	return(ans);
}

// Overload of '*' operator --------------------------------------------------//
// double * mat44
inline mat44 operator*(double a, mat44 obj)
{
	int i, j;
	mat44 ans;
	for(i=0; i<4; i++){
		for(j=0; j<4; j++){
			ans.A[i][j] = a * obj.A[i][j];
		}
	}
	return(ans);
}

// mat44 * double
inline mat44 operator*(mat44 obj, double a)
{
	int i, j;
	mat44 ans;
	for(i=0; i<4; i++){
		for(j=0; j<4; j++){
			ans.A[i][j] = obj.A[i][j] * a;
		}
	}
	return(ans);
}

// vec4 * mat44
inline vec4 operator*(vec4 obj1, mat44 obj2)
{
	int i, j;
	vec4 ans;
	for(i=0; i<4; i++){
		ans.x[i] = 0.0;
		for(j=0; j<4; j++){
			ans.x[i] += obj1.x[j] * obj2.A[j][i];
		}
	}
	return(ans);
}

// mat44 * vec4
inline vec4 operator*(mat44 obj1, vec4 obj2)
{
	int i, j;
	vec4 ans;
	for(i=0; i<4; i++){
		ans.x[i] = 0.0;
		for(j=0; j<4; j++){
			ans.x[i] += obj1.A[i][j] * obj2.x[j];
		}
	}
	return(ans);
}

// Extract row vector
inline vec4 mat44::row(int num)
{
	int i;
	vec4 ans;
	for(i=0; i<4; i++) ans.x[i] = A[num][i];
	return(ans);
}

// Extract column vector
inline vec4 mat44::col(int num)
{
	int i;
	vec4 ans;
	for(i=0; i<4; i++) ans.x[i] = A[i][num];
	return(ans);
}

// Set number into (i, j) element
inline void mat44::set(int i, int j, double x){ A[i][j] = x; }

// Set row vector of the specified number
inline void mat44::row_set(int num, vec4 obj)
{
	int i;
	for(i=0; i<4; i++) A[num][i] = obj.x[i];
}

// Set row vector of the specified number
inline void mat44::row_set(int num, double x0, double x1, double x2, double x3)
{
	A[num][0] = x0; A[num][1] = x1; A[num][2] = x2; A[num][3] = x3; 
}

// Set column vector of the specified number
inline void mat44::col_set(int num, vec4 obj)
{
	int i;
	for(i=0; i<4; i++) A[i][num] = obj.x[i];
}

// Set column vector of the specified number
inline void mat44::col_set(int num, double x0, double x1, double x2, double x3)
{
	A[0][num] = x0; A[1][num] = x1; A[2][num] = x2; A[3][num] = x3; 
}

// Return transposed matrix
inline mat44 mat44::trans(void)
{
	int i, j; mat44 ans;
	for(i=0; i<c; i++) for(j=0; j<r; j++) ans.A[i][j] = A[j][i];
	return(ans);
}

// Overload of '+' operator --------------------------------------------------//
// mat45 + mat45
inline mat45 operator+(mat45 obj1, mat45 obj2)
{
	int i, j;
	mat45 ans;
	for(i=0; i<4; i++){
		for(j=0; j<5; j++){
			ans.A[i][j] = obj1.A[i][j] + obj2.A[i][j];
		}
	}
	return(ans);
}

// Overload of '-' operator --------------------------------------------------//
// mat45 - mat45
inline mat45 operator-(mat45 obj1, mat45 obj2)
{
	int i, j;
	mat45 ans;
	for(i=0; i<4; i++){
		for(j=0; j<5; j++){
			ans.A[i][j] = obj1.A[i][j] - obj2.A[i][j];
		}
	}
	return(ans);
}

// Overload of '-' operator(-mat45)
inline mat45 operator-(mat45 obj)
{
	int i, j;
	mat45 ans;
	for(i=0; i<4; i++) for(j=0; j<5; j++) ans.A[i][j] = -obj.A[i][j];
	return(ans);
}

// Overload of '*' operator --------------------------------------------------//
// double * mat45
inline mat45 operator*(double a, mat45 obj)
{
	int i, j;
	mat45 ans;
	for(i=0; i<4; i++){
		for(j=0; j<5; j++){
			ans.A[i][j] = a * obj.A[i][j];
		}
	}
	return(ans);
}

// mat45 * double
inline mat45 operator*(mat45 obj, double a)
{
	int i, j;
	mat45 ans;
	for(i=0; i<4; i++){
		for(j=0; j<5; j++){
			ans.A[i][j] = obj.A[i][j] * a;
		}
	}
	return(ans);
}

// vec4 * mat45
inline vec5 operator*(vec4 obj1, mat45 obj2)
{
	int i, j;
	vec5 ans;
	for(i=0; i<5; i++){
		ans.x[i] = 0.0;
		for(j=0; j<4; j++){
			ans.x[i] += obj1.x[j] * obj2.A[j][i];
		}
	}
	return(ans);
}

// mat45 * vec5
inline vec4 operator*(mat45 obj1, vec5 obj2)
{
	int i, j;
	vec4 ans;
	for(i=0; i<4; i++){
		ans.x[i] = 0.0;
		for(j=0; j<5; j++){
			ans.x[i] += obj1.A[i][j] * obj2.x[j];
		}
	}
	return(ans);
}

// Extract row vector
inline vec5 mat45::row(int num)
{
	int i;
	vec5 ans;
	for(i=0; i<5; i++) ans.x[i] = A[num][i];
	return(ans);
}

// Extract column vector
inline vec4 mat45::col(int num)
{
	int i;
	vec4 ans;
	for(i=0; i<4; i++) ans.x[i] = A[i][num];
	return(ans);
}

// Set number into (i, j) element
inline void mat45::set(int i, int j, double x){ A[i][j] = x; }

// Set row vector of the specified number
inline void mat45::row_set(int num, vec5 obj)
{
	int i;
	for(i=0; i<5; i++) A[num][i] = obj.x[i];
}

// Set row vector of the specified number
inline void mat45::row_set(int num, double x0, double x1, double x2, double x3, double x4)
{
	A[num][0] = x0; A[num][1] = x1; A[num][2] = x2; A[num][3] = x3; A[num][4] = x4; 
}

// Set column vector of the specified number
inline void mat45::col_set(int num, vec4 obj)
{
	int i;
	for(i=0; i<4; i++) A[i][num] = obj.x[i];
}

// Set column vector of the specified number
inline void mat45::col_set(int num, double x0, double x1, double x2, double x3, double x4)
{
	A[0][num] = x0; A[1][num] = x1; A[2][num] = x2; A[3][num] = x3; A[4][num] = x4; 
}

// Return transposed matrix
inline mat54 mat45::trans(void)
{
	int i, j; mat54 ans;
	for(i=0; i<c; i++) for(j=0; j<r; j++) ans.A[i][j] = A[j][i];
	return(ans);
}

// Overload of '+' operator --------------------------------------------------//
// mat46 + mat46
inline mat46 operator+(mat46 obj1, mat46 obj2)
{
	int i, j;
	mat46 ans;
	for(i=0; i<4; i++){
		for(j=0; j<6; j++){
			ans.A[i][j] = obj1.A[i][j] + obj2.A[i][j];
		}
	}
	return(ans);
}

// Overload of '-' operator --------------------------------------------------//
// mat46 - mat46
inline mat46 operator-(mat46 obj1, mat46 obj2)
{
	int i, j;
	mat46 ans;
	for(i=0; i<4; i++){
		for(j=0; j<6; j++){
			ans.A[i][j] = obj1.A[i][j] - obj2.A[i][j];
		}
	}
	return(ans);
}

// Overload of '-' operator(-mat46)
inline mat46 operator-(mat46 obj)
{
	int i, j;
	mat46 ans;
	for(i=0; i<4; i++) for(j=0; j<6; j++) ans.A[i][j] = -obj.A[i][j];
	return(ans);
}

// Overload of '*' operator --------------------------------------------------//
// double * mat46
inline mat46 operator*(double a, mat46 obj)
{
	int i, j;
	mat46 ans;
	for(i=0; i<4; i++){
		for(j=0; j<6; j++){
			ans.A[i][j] = a * obj.A[i][j];
		}
	}
	return(ans);
}

// mat46 * double
inline mat46 operator*(mat46 obj, double a)
{
	int i, j;
	mat46 ans;
	for(i=0; i<4; i++){
		for(j=0; j<6; j++){
			ans.A[i][j] = obj.A[i][j] * a;
		}
	}
	return(ans);
}

// vec4 * mat46
inline vec6 operator*(vec4 obj1, mat46 obj2)
{
	int i, j;
	vec6 ans;
	for(i=0; i<6; i++){
		ans.x[i] = 0.0;
		for(j=0; j<4; j++){
			ans.x[i] += obj1.x[j] * obj2.A[j][i];
		}
	}
	return(ans);
}

// mat46 * vec6
inline vec4 operator*(mat46 obj1, vec6 obj2)
{
	int i, j;
	vec4 ans;
	for(i=0; i<4; i++){
		ans.x[i] = 0.0;
		for(j=0; j<6; j++){
			ans.x[i] += obj1.A[i][j] * obj2.x[j];
		}
	}
	return(ans);
}

// Extract row vector
inline vec6 mat46::row(int num)
{
	int i;
	vec6 ans;
	for(i=0; i<6; i++) ans.x[i] = A[num][i];
	return(ans);
}

// Extract column vector
inline vec4 mat46::col(int num)
{
	int i;
	vec4 ans;
	for(i=0; i<4; i++) ans.x[i] = A[i][num];
	return(ans);
}

// Set number into (i, j) element
inline void mat46::set(int i, int j, double x){ A[i][j] = x; }

// Set row vector of the specified number
inline void mat46::row_set(int num, vec6 obj)
{
	int i;
	for(i=0; i<6; i++) A[num][i] = obj.x[i];
}

// Set row vector of the specified number
inline void mat46::row_set(int num, double x0, double x1, double x2, double x3, double x4, double x5)
{
	A[num][0] = x0; A[num][1] = x1; A[num][2] = x2; A[num][3] = x3; A[num][4] = x4; A[num][5] = x5; 
}

// Set column vector of the specified number
inline void mat46::col_set(int num, vec4 obj)
{
	int i;
	for(i=0; i<4; i++) A[i][num] = obj.x[i];
}

// Set column vector of the specified number
inline void mat46::col_set(int num, double x0, double x1, double x2, double x3, double x4, double x5)
{
	A[0][num] = x0; A[1][num] = x1; A[2][num] = x2; A[3][num] = x3; A[4][num] = x4; A[5][num] = x5; 
}

// Return transposed matrix
inline mat64 mat46::trans(void)
{
	int i, j; mat64 ans;
	for(i=0; i<c; i++) for(j=0; j<r; j++) ans.A[i][j] = A[j][i];
	return(ans);
}

// Overload of '+' operator --------------------------------------------------//
// mat47 + mat47
inline mat47 operator+(mat47 obj1, mat47 obj2)
{
	int i, j;
	mat47 ans;
	for(i=0; i<4; i++){
		for(j=0; j<7; j++){
			ans.A[i][j] = obj1.A[i][j] + obj2.A[i][j];
		}
	}
	return(ans);
}

// Overload of '-' operator --------------------------------------------------//
// mat47 - mat47
inline mat47 operator-(mat47 obj1, mat47 obj2)
{
	int i, j;
	mat47 ans;
	for(i=0; i<4; i++){
		for(j=0; j<7; j++){
			ans.A[i][j] = obj1.A[i][j] - obj2.A[i][j];
		}
	}
	return(ans);
}

// Overload of '-' operator(-mat47)
inline mat47 operator-(mat47 obj)
{
	int i, j;
	mat47 ans;
	for(i=0; i<4; i++) for(j=0; j<7; j++) ans.A[i][j] = -obj.A[i][j];
	return(ans);
}

// Overload of '*' operator --------------------------------------------------//
// double * mat47
inline mat47 operator*(double a, mat47 obj)
{
	int i, j;
	mat47 ans;
	for(i=0; i<4; i++){
		for(j=0; j<7; j++){
			ans.A[i][j] = a * obj.A[i][j];
		}
	}
	return(ans);
}

// mat47 * double
inline mat47 operator*(mat47 obj, double a)
{
	int i, j;
	mat47 ans;
	for(i=0; i<4; i++){
		for(j=0; j<7; j++){
			ans.A[i][j] = obj.A[i][j] * a;
		}
	}
	return(ans);
}

// vec4 * mat47
inline vec7 operator*(vec4 obj1, mat47 obj2)
{
	int i, j;
	vec7 ans;
	for(i=0; i<7; i++){
		ans.x[i] = 0.0;
		for(j=0; j<4; j++){
			ans.x[i] += obj1.x[j] * obj2.A[j][i];
		}
	}
	return(ans);
}

// mat47 * vec7
inline vec4 operator*(mat47 obj1, vec7 obj2)
{
	int i, j;
	vec4 ans;
	for(i=0; i<4; i++){
		ans.x[i] = 0.0;
		for(j=0; j<7; j++){
			ans.x[i] += obj1.A[i][j] * obj2.x[j];
		}
	}
	return(ans);
}

// Extract row vector
inline vec7 mat47::row(int num)
{
	int i;
	vec7 ans;
	for(i=0; i<7; i++) ans.x[i] = A[num][i];
	return(ans);
}

// Extract column vector
inline vec4 mat47::col(int num)
{
	int i;
	vec4 ans;
	for(i=0; i<4; i++) ans.x[i] = A[i][num];
	return(ans);
}

// Set number into (i, j) element
inline void mat47::set(int i, int j, double x){ A[i][j] = x; }

// Set row vector of the specified number
inline void mat47::row_set(int num, vec7 obj)
{
	int i;
	for(i=0; i<7; i++) A[num][i] = obj.x[i];
}

// Set row vector of the specified number
inline void mat47::row_set(int num, double x0, double x1, double x2, double x3, double x4, double x5, double x6)
{
	A[num][0] = x0; A[num][1] = x1; A[num][2] = x2; A[num][3] = x3; A[num][4] = x4; A[num][5] = x5; A[num][6] = x6; 
}

// Set column vector of the specified number
inline void mat47::col_set(int num, vec4 obj)
{
	int i;
	for(i=0; i<4; i++) A[i][num] = obj.x[i];
}

// Set column vector of the specified number
inline void mat47::col_set(int num, double x0, double x1, double x2, double x3, double x4, double x5, double x6)
{
	A[0][num] = x0; A[1][num] = x1; A[2][num] = x2; A[3][num] = x3; A[4][num] = x4; A[5][num] = x5; A[6][num] = x6; 
}

// Return transposed matrix
inline mat74 mat47::trans(void)
{
	int i, j; mat74 ans;
	for(i=0; i<c; i++) for(j=0; j<r; j++) ans.A[i][j] = A[j][i];
	return(ans);
}

// Overload of '+' operator --------------------------------------------------//
// mat48 + mat48
inline mat48 operator+(mat48 obj1, mat48 obj2)
{
	int i, j;
	mat48 ans;
	for(i=0; i<4; i++){
		for(j=0; j<8; j++){
			ans.A[i][j] = obj1.A[i][j] + obj2.A[i][j];
		}
	}
	return(ans);
}

// Overload of '-' operator --------------------------------------------------//
// mat48 - mat48
inline mat48 operator-(mat48 obj1, mat48 obj2)
{
	int i, j;
	mat48 ans;
	for(i=0; i<4; i++){
		for(j=0; j<8; j++){
			ans.A[i][j] = obj1.A[i][j] - obj2.A[i][j];
		}
	}
	return(ans);
}

// Overload of '-' operator(-mat48)
inline mat48 operator-(mat48 obj)
{
	int i, j;
	mat48 ans;
	for(i=0; i<4; i++) for(j=0; j<8; j++) ans.A[i][j] = -obj.A[i][j];
	return(ans);
}

// Overload of '*' operator --------------------------------------------------//
// double * mat48
inline mat48 operator*(double a, mat48 obj)
{
	int i, j;
	mat48 ans;
	for(i=0; i<4; i++){
		for(j=0; j<8; j++){
			ans.A[i][j] = a * obj.A[i][j];
		}
	}
	return(ans);
}

// mat48 * double
inline mat48 operator*(mat48 obj, double a)
{
	int i, j;
	mat48 ans;
	for(i=0; i<4; i++){
		for(j=0; j<8; j++){
			ans.A[i][j] = obj.A[i][j] * a;
		}
	}
	return(ans);
}

// vec4 * mat48
inline vec8 operator*(vec4 obj1, mat48 obj2)
{
	int i, j;
	vec8 ans;
	for(i=0; i<8; i++){
		ans.x[i] = 0.0;
		for(j=0; j<4; j++){
			ans.x[i] += obj1.x[j] * obj2.A[j][i];
		}
	}
	return(ans);
}

// mat48 * vec8
inline vec4 operator*(mat48 obj1, vec8 obj2)
{
	int i, j;
	vec4 ans;
	for(i=0; i<4; i++){
		ans.x[i] = 0.0;
		for(j=0; j<8; j++){
			ans.x[i] += obj1.A[i][j] * obj2.x[j];
		}
	}
	return(ans);
}

// Extract row vector
inline vec8 mat48::row(int num)
{
	int i;
	vec8 ans;
	for(i=0; i<8; i++) ans.x[i] = A[num][i];
	return(ans);
}

// Extract column vector
inline vec4 mat48::col(int num)
{
	int i;
	vec4 ans;
	for(i=0; i<4; i++) ans.x[i] = A[i][num];
	return(ans);
}

// Set number into (i, j) element
inline void mat48::set(int i, int j, double x){ A[i][j] = x; }

// Set row vector of the specified number
inline void mat48::row_set(int num, vec8 obj)
{
	int i;
	for(i=0; i<8; i++) A[num][i] = obj.x[i];
}

// Set row vector of the specified number
inline void mat48::row_set(int num, double x0, double x1, double x2, double x3, double x4, double x5, double x6, double x7)
{
	A[num][0] = x0; A[num][1] = x1; A[num][2] = x2; A[num][3] = x3; A[num][4] = x4; A[num][5] = x5; A[num][6] = x6; A[num][7] = x7; 
}

// Set column vector of the specified number
inline void mat48::col_set(int num, vec4 obj)
{
	int i;
	for(i=0; i<4; i++) A[i][num] = obj.x[i];
}

// Set column vector of the specified number
inline void mat48::col_set(int num, double x0, double x1, double x2, double x3, double x4, double x5, double x6, double x7)
{
	A[0][num] = x0; A[1][num] = x1; A[2][num] = x2; A[3][num] = x3; A[4][num] = x4; A[5][num] = x5; A[6][num] = x6; A[7][num] = x7; 
}

// Return transposed matrix
inline mat84 mat48::trans(void)
{
	int i, j; mat84 ans;
	for(i=0; i<c; i++) for(j=0; j<r; j++) ans.A[i][j] = A[j][i];
	return(ans);
}

// Overload of '+' operator --------------------------------------------------//
// mat49 + mat49
inline mat49 operator+(mat49 obj1, mat49 obj2)
{
	int i, j;
	mat49 ans;
	for(i=0; i<4; i++){
		for(j=0; j<9; j++){
			ans.A[i][j] = obj1.A[i][j] + obj2.A[i][j];
		}
	}
	return(ans);
}

// Overload of '-' operator --------------------------------------------------//
// mat49 - mat49
inline mat49 operator-(mat49 obj1, mat49 obj2)
{
	int i, j;
	mat49 ans;
	for(i=0; i<4; i++){
		for(j=0; j<9; j++){
			ans.A[i][j] = obj1.A[i][j] - obj2.A[i][j];
		}
	}
	return(ans);
}

// Overload of '-' operator(-mat49)
inline mat49 operator-(mat49 obj)
{
	int i, j;
	mat49 ans;
	for(i=0; i<4; i++) for(j=0; j<9; j++) ans.A[i][j] = -obj.A[i][j];
	return(ans);
}

// Overload of '*' operator --------------------------------------------------//
// double * mat49
inline mat49 operator*(double a, mat49 obj)
{
	int i, j;
	mat49 ans;
	for(i=0; i<4; i++){
		for(j=0; j<9; j++){
			ans.A[i][j] = a * obj.A[i][j];
		}
	}
	return(ans);
}

// mat49 * double
inline mat49 operator*(mat49 obj, double a)
{
	int i, j;
	mat49 ans;
	for(i=0; i<4; i++){
		for(j=0; j<9; j++){
			ans.A[i][j] = obj.A[i][j] * a;
		}
	}
	return(ans);
}

// vec4 * mat49
inline vec9 operator*(vec4 obj1, mat49 obj2)
{
	int i, j;
	vec9 ans;
	for(i=0; i<9; i++){
		ans.x[i] = 0.0;
		for(j=0; j<4; j++){
			ans.x[i] += obj1.x[j] * obj2.A[j][i];
		}
	}
	return(ans);
}

// mat49 * vec9
inline vec4 operator*(mat49 obj1, vec9 obj2)
{
	int i, j;
	vec4 ans;
	for(i=0; i<4; i++){
		ans.x[i] = 0.0;
		for(j=0; j<9; j++){
			ans.x[i] += obj1.A[i][j] * obj2.x[j];
		}
	}
	return(ans);
}

// Extract row vector
inline vec9 mat49::row(int num)
{
	int i;
	vec9 ans;
	for(i=0; i<9; i++) ans.x[i] = A[num][i];
	return(ans);
}

// Extract column vector
inline vec4 mat49::col(int num)
{
	int i;
	vec4 ans;
	for(i=0; i<4; i++) ans.x[i] = A[i][num];
	return(ans);
}

// Set number into (i, j) element
inline void mat49::set(int i, int j, double x){ A[i][j] = x; }

// Set row vector of the specified number
inline void mat49::row_set(int num, vec9 obj)
{
	int i;
	for(i=0; i<9; i++) A[num][i] = obj.x[i];
}

// Set row vector of the specified number
inline void mat49::row_set(int num, double x0, double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8)
{
	A[num][0] = x0; A[num][1] = x1; A[num][2] = x2; A[num][3] = x3; A[num][4] = x4; A[num][5] = x5; A[num][6] = x6; A[num][7] = x7; A[num][8] = x8; 
}

// Set column vector of the specified number
inline void mat49::col_set(int num, vec4 obj)
{
	int i;
	for(i=0; i<4; i++) A[i][num] = obj.x[i];
}

// Set column vector of the specified number
inline void mat49::col_set(int num, double x0, double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8)
{
	A[0][num] = x0; A[1][num] = x1; A[2][num] = x2; A[3][num] = x3; A[4][num] = x4; A[5][num] = x5; A[6][num] = x6; A[7][num] = x7; A[8][num] = x8; 
}

// Return transposed matrix
inline mat94 mat49::trans(void)
{
	int i, j; mat94 ans;
	for(i=0; i<c; i++) for(j=0; j<r; j++) ans.A[i][j] = A[j][i];
	return(ans);
}

// Overload of '+' operator --------------------------------------------------//
// mat52 + mat52
inline mat52 operator+(mat52 obj1, mat52 obj2)
{
	int i, j;
	mat52 ans;
	for(i=0; i<5; i++){
		for(j=0; j<2; j++){
			ans.A[i][j] = obj1.A[i][j] + obj2.A[i][j];
		}
	}
	return(ans);
}

// Overload of '-' operator --------------------------------------------------//
// mat52 - mat52
inline mat52 operator-(mat52 obj1, mat52 obj2)
{
	int i, j;
	mat52 ans;
	for(i=0; i<5; i++){
		for(j=0; j<2; j++){
			ans.A[i][j] = obj1.A[i][j] - obj2.A[i][j];
		}
	}
	return(ans);
}

// Overload of '-' operator(-mat52)
inline mat52 operator-(mat52 obj)
{
	int i, j;
	mat52 ans;
	for(i=0; i<5; i++) for(j=0; j<2; j++) ans.A[i][j] = -obj.A[i][j];
	return(ans);
}

// Overload of '*' operator --------------------------------------------------//
// double * mat52
inline mat52 operator*(double a, mat52 obj)
{
	int i, j;
	mat52 ans;
	for(i=0; i<5; i++){
		for(j=0; j<2; j++){
			ans.A[i][j] = a * obj.A[i][j];
		}
	}
	return(ans);
}

// mat52 * double
inline mat52 operator*(mat52 obj, double a)
{
	int i, j;
	mat52 ans;
	for(i=0; i<5; i++){
		for(j=0; j<2; j++){
			ans.A[i][j] = obj.A[i][j] * a;
		}
	}
	return(ans);
}

// vec5 * mat52
inline vec2 operator*(vec5 obj1, mat52 obj2)
{
	int i, j;
	vec2 ans;
	for(i=0; i<2; i++){
		ans.x[i] = 0.0;
		for(j=0; j<5; j++){
			ans.x[i] += obj1.x[j] * obj2.A[j][i];
		}
	}
	return(ans);
}

// mat52 * vec2
inline vec5 operator*(mat52 obj1, vec2 obj2)
{
	int i, j;
	vec5 ans;
	for(i=0; i<5; i++){
		ans.x[i] = 0.0;
		for(j=0; j<2; j++){
			ans.x[i] += obj1.A[i][j] * obj2.x[j];
		}
	}
	return(ans);
}

// Extract row vector
inline vec2 mat52::row(int num)
{
	int i;
	vec2 ans;
	for(i=0; i<2; i++) ans.x[i] = A[num][i];
	return(ans);
}

// Extract column vector
inline vec5 mat52::col(int num)
{
	int i;
	vec5 ans;
	for(i=0; i<5; i++) ans.x[i] = A[i][num];
	return(ans);
}

// Set number into (i, j) element
inline void mat52::set(int i, int j, double x){ A[i][j] = x; }

// Set row vector of the specified number
inline void mat52::row_set(int num, vec2 obj)
{
	int i;
	for(i=0; i<2; i++) A[num][i] = obj.x[i];
}

// Set row vector of the specified number
inline void mat52::row_set(int num, double x0, double x1)
{
	A[num][0] = x0; A[num][1] = x1; 
}

// Set column vector of the specified number
inline void mat52::col_set(int num, vec5 obj)
{
	int i;
	for(i=0; i<5; i++) A[i][num] = obj.x[i];
}

// Set column vector of the specified number
inline void mat52::col_set(int num, double x0, double x1)
{
	A[0][num] = x0; A[1][num] = x1; 
}

// Return transposed matrix
inline mat25 mat52::trans(void)
{
	int i, j; mat25 ans;
	for(i=0; i<c; i++) for(j=0; j<r; j++) ans.A[i][j] = A[j][i];
	return(ans);
}

// Overload of '+' operator --------------------------------------------------//
// mat53 + mat53
inline mat53 operator+(mat53 obj1, mat53 obj2)
{
	int i, j;
	mat53 ans;
	for(i=0; i<5; i++){
		for(j=0; j<3; j++){
			ans.A[i][j] = obj1.A[i][j] + obj2.A[i][j];
		}
	}
	return(ans);
}

// Overload of '-' operator --------------------------------------------------//
// mat53 - mat53
inline mat53 operator-(mat53 obj1, mat53 obj2)
{
	int i, j;
	mat53 ans;
	for(i=0; i<5; i++){
		for(j=0; j<3; j++){
			ans.A[i][j] = obj1.A[i][j] - obj2.A[i][j];
		}
	}
	return(ans);
}

// Overload of '-' operator(-mat53)
inline mat53 operator-(mat53 obj)
{
	int i, j;
	mat53 ans;
	for(i=0; i<5; i++) for(j=0; j<3; j++) ans.A[i][j] = -obj.A[i][j];
	return(ans);
}

// Overload of '*' operator --------------------------------------------------//
// double * mat53
inline mat53 operator*(double a, mat53 obj)
{
	int i, j;
	mat53 ans;
	for(i=0; i<5; i++){
		for(j=0; j<3; j++){
			ans.A[i][j] = a * obj.A[i][j];
		}
	}
	return(ans);
}

// mat53 * double
inline mat53 operator*(mat53 obj, double a)
{
	int i, j;
	mat53 ans;
	for(i=0; i<5; i++){
		for(j=0; j<3; j++){
			ans.A[i][j] = obj.A[i][j] * a;
		}
	}
	return(ans);
}

// vec5 * mat53
inline vec3 operator*(vec5 obj1, mat53 obj2)
{
	int i, j;
	vec3 ans;
	for(i=0; i<3; i++){
		ans.x[i] = 0.0;
		for(j=0; j<5; j++){
			ans.x[i] += obj1.x[j] * obj2.A[j][i];
		}
	}
	return(ans);
}

// mat53 * vec3
inline vec5 operator*(mat53 obj1, vec3 obj2)
{
	int i, j;
	vec5 ans;
	for(i=0; i<5; i++){
		ans.x[i] = 0.0;
		for(j=0; j<3; j++){
			ans.x[i] += obj1.A[i][j] * obj2.x[j];
		}
	}
	return(ans);
}

// Extract row vector
inline vec3 mat53::row(int num)
{
	int i;
	vec3 ans;
	for(i=0; i<3; i++) ans.x[i] = A[num][i];
	return(ans);
}

// Extract column vector
inline vec5 mat53::col(int num)
{
	int i;
	vec5 ans;
	for(i=0; i<5; i++) ans.x[i] = A[i][num];
	return(ans);
}

// Set number into (i, j) element
inline void mat53::set(int i, int j, double x){ A[i][j] = x; }

// Set row vector of the specified number
inline void mat53::row_set(int num, vec3 obj)
{
	int i;
	for(i=0; i<3; i++) A[num][i] = obj.x[i];
}

// Set row vector of the specified number
inline void mat53::row_set(int num, double x0, double x1, double x2)
{
	A[num][0] = x0; A[num][1] = x1; A[num][2] = x2; 
}

// Set column vector of the specified number
inline void mat53::col_set(int num, vec5 obj)
{
	int i;
	for(i=0; i<5; i++) A[i][num] = obj.x[i];
}

// Set column vector of the specified number
inline void mat53::col_set(int num, double x0, double x1, double x2)
{
	A[0][num] = x0; A[1][num] = x1; A[2][num] = x2; 
}

// Return transposed matrix
inline mat35 mat53::trans(void)
{
	int i, j; mat35 ans;
	for(i=0; i<c; i++) for(j=0; j<r; j++) ans.A[i][j] = A[j][i];
	return(ans);
}

// Overload of '+' operator --------------------------------------------------//
// mat54 + mat54
inline mat54 operator+(mat54 obj1, mat54 obj2)
{
	int i, j;
	mat54 ans;
	for(i=0; i<5; i++){
		for(j=0; j<4; j++){
			ans.A[i][j] = obj1.A[i][j] + obj2.A[i][j];
		}
	}
	return(ans);
}

// Overload of '-' operator --------------------------------------------------//
// mat54 - mat54
inline mat54 operator-(mat54 obj1, mat54 obj2)
{
	int i, j;
	mat54 ans;
	for(i=0; i<5; i++){
		for(j=0; j<4; j++){
			ans.A[i][j] = obj1.A[i][j] - obj2.A[i][j];
		}
	}
	return(ans);
}

// Overload of '-' operator(-mat54)
inline mat54 operator-(mat54 obj)
{
	int i, j;
	mat54 ans;
	for(i=0; i<5; i++) for(j=0; j<4; j++) ans.A[i][j] = -obj.A[i][j];
	return(ans);
}

// Overload of '*' operator --------------------------------------------------//
// double * mat54
inline mat54 operator*(double a, mat54 obj)
{
	int i, j;
	mat54 ans;
	for(i=0; i<5; i++){
		for(j=0; j<4; j++){
			ans.A[i][j] = a * obj.A[i][j];
		}
	}
	return(ans);
}

// mat54 * double
inline mat54 operator*(mat54 obj, double a)
{
	int i, j;
	mat54 ans;
	for(i=0; i<5; i++){
		for(j=0; j<4; j++){
			ans.A[i][j] = obj.A[i][j] * a;
		}
	}
	return(ans);
}

// vec5 * mat54
inline vec4 operator*(vec5 obj1, mat54 obj2)
{
	int i, j;
	vec4 ans;
	for(i=0; i<4; i++){
		ans.x[i] = 0.0;
		for(j=0; j<5; j++){
			ans.x[i] += obj1.x[j] * obj2.A[j][i];
		}
	}
	return(ans);
}

// mat54 * vec4
inline vec5 operator*(mat54 obj1, vec4 obj2)
{
	int i, j;
	vec5 ans;
	for(i=0; i<5; i++){
		ans.x[i] = 0.0;
		for(j=0; j<4; j++){
			ans.x[i] += obj1.A[i][j] * obj2.x[j];
		}
	}
	return(ans);
}

// Extract row vector
inline vec4 mat54::row(int num)
{
	int i;
	vec4 ans;
	for(i=0; i<4; i++) ans.x[i] = A[num][i];
	return(ans);
}

// Extract column vector
inline vec5 mat54::col(int num)
{
	int i;
	vec5 ans;
	for(i=0; i<5; i++) ans.x[i] = A[i][num];
	return(ans);
}

// Set number into (i, j) element
inline void mat54::set(int i, int j, double x){ A[i][j] = x; }

// Set row vector of the specified number
inline void mat54::row_set(int num, vec4 obj)
{
	int i;
	for(i=0; i<4; i++) A[num][i] = obj.x[i];
}

// Set row vector of the specified number
inline void mat54::row_set(int num, double x0, double x1, double x2, double x3)
{
	A[num][0] = x0; A[num][1] = x1; A[num][2] = x2; A[num][3] = x3; 
}

// Set column vector of the specified number
inline void mat54::col_set(int num, vec5 obj)
{
	int i;
	for(i=0; i<5; i++) A[i][num] = obj.x[i];
}

// Set column vector of the specified number
inline void mat54::col_set(int num, double x0, double x1, double x2, double x3)
{
	A[0][num] = x0; A[1][num] = x1; A[2][num] = x2; A[3][num] = x3; 
}

// Return transposed matrix
inline mat45 mat54::trans(void)
{
	int i, j; mat45 ans;
	for(i=0; i<c; i++) for(j=0; j<r; j++) ans.A[i][j] = A[j][i];
	return(ans);
}

// Overload of '+' operator --------------------------------------------------//
// mat55 + mat55
inline mat55 operator+(mat55 obj1, mat55 obj2)
{
	int i, j;
	mat55 ans;
	for(i=0; i<5; i++){
		for(j=0; j<5; j++){
			ans.A[i][j] = obj1.A[i][j] + obj2.A[i][j];
		}
	}
	return(ans);
}

// Overload of '-' operator --------------------------------------------------//
// mat55 - mat55
inline mat55 operator-(mat55 obj1, mat55 obj2)
{
	int i, j;
	mat55 ans;
	for(i=0; i<5; i++){
		for(j=0; j<5; j++){
			ans.A[i][j] = obj1.A[i][j] - obj2.A[i][j];
		}
	}
	return(ans);
}

// Overload of '-' operator(-mat55)
inline mat55 operator-(mat55 obj)
{
	int i, j;
	mat55 ans;
	for(i=0; i<5; i++) for(j=0; j<5; j++) ans.A[i][j] = -obj.A[i][j];
	return(ans);
}

// Overload of '*' operator --------------------------------------------------//
// double * mat55
inline mat55 operator*(double a, mat55 obj)
{
	int i, j;
	mat55 ans;
	for(i=0; i<5; i++){
		for(j=0; j<5; j++){
			ans.A[i][j] = a * obj.A[i][j];
		}
	}
	return(ans);
}

// mat55 * double
inline mat55 operator*(mat55 obj, double a)
{
	int i, j;
	mat55 ans;
	for(i=0; i<5; i++){
		for(j=0; j<5; j++){
			ans.A[i][j] = obj.A[i][j] * a;
		}
	}
	return(ans);
}

// vec5 * mat55
inline vec5 operator*(vec5 obj1, mat55 obj2)
{
	int i, j;
	vec5 ans;
	for(i=0; i<5; i++){
		ans.x[i] = 0.0;
		for(j=0; j<5; j++){
			ans.x[i] += obj1.x[j] * obj2.A[j][i];
		}
	}
	return(ans);
}

// mat55 * vec5
inline vec5 operator*(mat55 obj1, vec5 obj2)
{
	int i, j;
	vec5 ans;
	for(i=0; i<5; i++){
		ans.x[i] = 0.0;
		for(j=0; j<5; j++){
			ans.x[i] += obj1.A[i][j] * obj2.x[j];
		}
	}
	return(ans);
}

// Extract row vector
inline vec5 mat55::row(int num)
{
	int i;
	vec5 ans;
	for(i=0; i<5; i++) ans.x[i] = A[num][i];
	return(ans);
}

// Extract column vector
inline vec5 mat55::col(int num)
{
	int i;
	vec5 ans;
	for(i=0; i<5; i++) ans.x[i] = A[i][num];
	return(ans);
}

// Set number into (i, j) element
inline void mat55::set(int i, int j, double x){ A[i][j] = x; }

// Set row vector of the specified number
inline void mat55::row_set(int num, vec5 obj)
{
	int i;
	for(i=0; i<5; i++) A[num][i] = obj.x[i];
}

// Set row vector of the specified number
inline void mat55::row_set(int num, double x0, double x1, double x2, double x3, double x4)
{
	A[num][0] = x0; A[num][1] = x1; A[num][2] = x2; A[num][3] = x3; A[num][4] = x4; 
}

// Set column vector of the specified number
inline void mat55::col_set(int num, vec5 obj)
{
	int i;
	for(i=0; i<5; i++) A[i][num] = obj.x[i];
}

// Set column vector of the specified number
inline void mat55::col_set(int num, double x0, double x1, double x2, double x3, double x4)
{
	A[0][num] = x0; A[1][num] = x1; A[2][num] = x2; A[3][num] = x3; A[4][num] = x4; 
}

// Return transposed matrix
inline mat55 mat55::trans(void)
{
	int i, j; mat55 ans;
	for(i=0; i<c; i++) for(j=0; j<r; j++) ans.A[i][j] = A[j][i];
	return(ans);
}

// Overload of '+' operator --------------------------------------------------//
// mat56 + mat56
inline mat56 operator+(mat56 obj1, mat56 obj2)
{
	int i, j;
	mat56 ans;
	for(i=0; i<5; i++){
		for(j=0; j<6; j++){
			ans.A[i][j] = obj1.A[i][j] + obj2.A[i][j];
		}
	}
	return(ans);
}

// Overload of '-' operator --------------------------------------------------//
// mat56 - mat56
inline mat56 operator-(mat56 obj1, mat56 obj2)
{
	int i, j;
	mat56 ans;
	for(i=0; i<5; i++){
		for(j=0; j<6; j++){
			ans.A[i][j] = obj1.A[i][j] - obj2.A[i][j];
		}
	}
	return(ans);
}

// Overload of '-' operator(-mat56)
inline mat56 operator-(mat56 obj)
{
	int i, j;
	mat56 ans;
	for(i=0; i<5; i++) for(j=0; j<6; j++) ans.A[i][j] = -obj.A[i][j];
	return(ans);
}

// Overload of '*' operator --------------------------------------------------//
// double * mat56
inline mat56 operator*(double a, mat56 obj)
{
	int i, j;
	mat56 ans;
	for(i=0; i<5; i++){
		for(j=0; j<6; j++){
			ans.A[i][j] = a * obj.A[i][j];
		}
	}
	return(ans);
}

// mat56 * double
inline mat56 operator*(mat56 obj, double a)
{
	int i, j;
	mat56 ans;
	for(i=0; i<5; i++){
		for(j=0; j<6; j++){
			ans.A[i][j] = obj.A[i][j] * a;
		}
	}
	return(ans);
}

// vec5 * mat56
inline vec6 operator*(vec5 obj1, mat56 obj2)
{
	int i, j;
	vec6 ans;
	for(i=0; i<6; i++){
		ans.x[i] = 0.0;
		for(j=0; j<5; j++){
			ans.x[i] += obj1.x[j] * obj2.A[j][i];
		}
	}
	return(ans);
}

// mat56 * vec6
inline vec5 operator*(mat56 obj1, vec6 obj2)
{
	int i, j;
	vec5 ans;
	for(i=0; i<5; i++){
		ans.x[i] = 0.0;
		for(j=0; j<6; j++){
			ans.x[i] += obj1.A[i][j] * obj2.x[j];
		}
	}
	return(ans);
}

// Extract row vector
inline vec6 mat56::row(int num)
{
	int i;
	vec6 ans;
	for(i=0; i<6; i++) ans.x[i] = A[num][i];
	return(ans);
}

// Extract column vector
inline vec5 mat56::col(int num)
{
	int i;
	vec5 ans;
	for(i=0; i<5; i++) ans.x[i] = A[i][num];
	return(ans);
}

// Set number into (i, j) element
inline void mat56::set(int i, int j, double x){ A[i][j] = x; }

// Set row vector of the specified number
inline void mat56::row_set(int num, vec6 obj)
{
	int i;
	for(i=0; i<6; i++) A[num][i] = obj.x[i];
}

// Set row vector of the specified number
inline void mat56::row_set(int num, double x0, double x1, double x2, double x3, double x4, double x5)
{
	A[num][0] = x0; A[num][1] = x1; A[num][2] = x2; A[num][3] = x3; A[num][4] = x4; A[num][5] = x5; 
}

// Set column vector of the specified number
inline void mat56::col_set(int num, vec5 obj)
{
	int i;
	for(i=0; i<5; i++) A[i][num] = obj.x[i];
}

// Set column vector of the specified number
inline void mat56::col_set(int num, double x0, double x1, double x2, double x3, double x4, double x5)
{
	A[0][num] = x0; A[1][num] = x1; A[2][num] = x2; A[3][num] = x3; A[4][num] = x4; A[5][num] = x5; 
}

// Return transposed matrix
inline mat65 mat56::trans(void)
{
	int i, j; mat65 ans;
	for(i=0; i<c; i++) for(j=0; j<r; j++) ans.A[i][j] = A[j][i];
	return(ans);
}

// Overload of '+' operator --------------------------------------------------//
// mat57 + mat57
inline mat57 operator+(mat57 obj1, mat57 obj2)
{
	int i, j;
	mat57 ans;
	for(i=0; i<5; i++){
		for(j=0; j<7; j++){
			ans.A[i][j] = obj1.A[i][j] + obj2.A[i][j];
		}
	}
	return(ans);
}

// Overload of '-' operator --------------------------------------------------//
// mat57 - mat57
inline mat57 operator-(mat57 obj1, mat57 obj2)
{
	int i, j;
	mat57 ans;
	for(i=0; i<5; i++){
		for(j=0; j<7; j++){
			ans.A[i][j] = obj1.A[i][j] - obj2.A[i][j];
		}
	}
	return(ans);
}

// Overload of '-' operator(-mat57)
inline mat57 operator-(mat57 obj)
{
	int i, j;
	mat57 ans;
	for(i=0; i<5; i++) for(j=0; j<7; j++) ans.A[i][j] = -obj.A[i][j];
	return(ans);
}

// Overload of '*' operator --------------------------------------------------//
// double * mat57
inline mat57 operator*(double a, mat57 obj)
{
	int i, j;
	mat57 ans;
	for(i=0; i<5; i++){
		for(j=0; j<7; j++){
			ans.A[i][j] = a * obj.A[i][j];
		}
	}
	return(ans);
}

// mat57 * double
inline mat57 operator*(mat57 obj, double a)
{
	int i, j;
	mat57 ans;
	for(i=0; i<5; i++){
		for(j=0; j<7; j++){
			ans.A[i][j] = obj.A[i][j] * a;
		}
	}
	return(ans);
}

// vec5 * mat57
inline vec7 operator*(vec5 obj1, mat57 obj2)
{
	int i, j;
	vec7 ans;
	for(i=0; i<7; i++){
		ans.x[i] = 0.0;
		for(j=0; j<5; j++){
			ans.x[i] += obj1.x[j] * obj2.A[j][i];
		}
	}
	return(ans);
}

// mat57 * vec7
inline vec5 operator*(mat57 obj1, vec7 obj2)
{
	int i, j;
	vec5 ans;
	for(i=0; i<5; i++){
		ans.x[i] = 0.0;
		for(j=0; j<7; j++){
			ans.x[i] += obj1.A[i][j] * obj2.x[j];
		}
	}
	return(ans);
}

// Extract row vector
inline vec7 mat57::row(int num)
{
	int i;
	vec7 ans;
	for(i=0; i<7; i++) ans.x[i] = A[num][i];
	return(ans);
}

// Extract column vector
inline vec5 mat57::col(int num)
{
	int i;
	vec5 ans;
	for(i=0; i<5; i++) ans.x[i] = A[i][num];
	return(ans);
}

// Set number into (i, j) element
inline void mat57::set(int i, int j, double x){ A[i][j] = x; }

// Set row vector of the specified number
inline void mat57::row_set(int num, vec7 obj)
{
	int i;
	for(i=0; i<7; i++) A[num][i] = obj.x[i];
}

// Set row vector of the specified number
inline void mat57::row_set(int num, double x0, double x1, double x2, double x3, double x4, double x5, double x6)
{
	A[num][0] = x0; A[num][1] = x1; A[num][2] = x2; A[num][3] = x3; A[num][4] = x4; A[num][5] = x5; A[num][6] = x6; 
}

// Set column vector of the specified number
inline void mat57::col_set(int num, vec5 obj)
{
	int i;
	for(i=0; i<5; i++) A[i][num] = obj.x[i];
}

// Set column vector of the specified number
inline void mat57::col_set(int num, double x0, double x1, double x2, double x3, double x4, double x5, double x6)
{
	A[0][num] = x0; A[1][num] = x1; A[2][num] = x2; A[3][num] = x3; A[4][num] = x4; A[5][num] = x5; A[6][num] = x6; 
}

// Return transposed matrix
inline mat75 mat57::trans(void)
{
	int i, j; mat75 ans;
	for(i=0; i<c; i++) for(j=0; j<r; j++) ans.A[i][j] = A[j][i];
	return(ans);
}

// Overload of '+' operator --------------------------------------------------//
// mat58 + mat58
inline mat58 operator+(mat58 obj1, mat58 obj2)
{
	int i, j;
	mat58 ans;
	for(i=0; i<5; i++){
		for(j=0; j<8; j++){
			ans.A[i][j] = obj1.A[i][j] + obj2.A[i][j];
		}
	}
	return(ans);
}

// Overload of '-' operator --------------------------------------------------//
// mat58 - mat58
inline mat58 operator-(mat58 obj1, mat58 obj2)
{
	int i, j;
	mat58 ans;
	for(i=0; i<5; i++){
		for(j=0; j<8; j++){
			ans.A[i][j] = obj1.A[i][j] - obj2.A[i][j];
		}
	}
	return(ans);
}

// Overload of '-' operator(-mat58)
inline mat58 operator-(mat58 obj)
{
	int i, j;
	mat58 ans;
	for(i=0; i<5; i++) for(j=0; j<8; j++) ans.A[i][j] = -obj.A[i][j];
	return(ans);
}

// Overload of '*' operator --------------------------------------------------//
// double * mat58
inline mat58 operator*(double a, mat58 obj)
{
	int i, j;
	mat58 ans;
	for(i=0; i<5; i++){
		for(j=0; j<8; j++){
			ans.A[i][j] = a * obj.A[i][j];
		}
	}
	return(ans);
}

// mat58 * double
inline mat58 operator*(mat58 obj, double a)
{
	int i, j;
	mat58 ans;
	for(i=0; i<5; i++){
		for(j=0; j<8; j++){
			ans.A[i][j] = obj.A[i][j] * a;
		}
	}
	return(ans);
}

// vec5 * mat58
inline vec8 operator*(vec5 obj1, mat58 obj2)
{
	int i, j;
	vec8 ans;
	for(i=0; i<8; i++){
		ans.x[i] = 0.0;
		for(j=0; j<5; j++){
			ans.x[i] += obj1.x[j] * obj2.A[j][i];
		}
	}
	return(ans);
}

// mat58 * vec8
inline vec5 operator*(mat58 obj1, vec8 obj2)
{
	int i, j;
	vec5 ans;
	for(i=0; i<5; i++){
		ans.x[i] = 0.0;
		for(j=0; j<8; j++){
			ans.x[i] += obj1.A[i][j] * obj2.x[j];
		}
	}
	return(ans);
}

// Extract row vector
inline vec8 mat58::row(int num)
{
	int i;
	vec8 ans;
	for(i=0; i<8; i++) ans.x[i] = A[num][i];
	return(ans);
}

// Extract column vector
inline vec5 mat58::col(int num)
{
	int i;
	vec5 ans;
	for(i=0; i<5; i++) ans.x[i] = A[i][num];
	return(ans);
}

// Set number into (i, j) element
inline void mat58::set(int i, int j, double x){ A[i][j] = x; }

// Set row vector of the specified number
inline void mat58::row_set(int num, vec8 obj)
{
	int i;
	for(i=0; i<8; i++) A[num][i] = obj.x[i];
}

// Set row vector of the specified number
inline void mat58::row_set(int num, double x0, double x1, double x2, double x3, double x4, double x5, double x6, double x7)
{
	A[num][0] = x0; A[num][1] = x1; A[num][2] = x2; A[num][3] = x3; A[num][4] = x4; A[num][5] = x5; A[num][6] = x6; A[num][7] = x7; 
}

// Set column vector of the specified number
inline void mat58::col_set(int num, vec5 obj)
{
	int i;
	for(i=0; i<5; i++) A[i][num] = obj.x[i];
}

// Set column vector of the specified number
inline void mat58::col_set(int num, double x0, double x1, double x2, double x3, double x4, double x5, double x6, double x7)
{
	A[0][num] = x0; A[1][num] = x1; A[2][num] = x2; A[3][num] = x3; A[4][num] = x4; A[5][num] = x5; A[6][num] = x6; A[7][num] = x7; 
}

// Return transposed matrix
inline mat85 mat58::trans(void)
{
	int i, j; mat85 ans;
	for(i=0; i<c; i++) for(j=0; j<r; j++) ans.A[i][j] = A[j][i];
	return(ans);
}

// Overload of '+' operator --------------------------------------------------//
// mat59 + mat59
inline mat59 operator+(mat59 obj1, mat59 obj2)
{
	int i, j;
	mat59 ans;
	for(i=0; i<5; i++){
		for(j=0; j<9; j++){
			ans.A[i][j] = obj1.A[i][j] + obj2.A[i][j];
		}
	}
	return(ans);
}

// Overload of '-' operator --------------------------------------------------//
// mat59 - mat59
inline mat59 operator-(mat59 obj1, mat59 obj2)
{
	int i, j;
	mat59 ans;
	for(i=0; i<5; i++){
		for(j=0; j<9; j++){
			ans.A[i][j] = obj1.A[i][j] - obj2.A[i][j];
		}
	}
	return(ans);
}

// Overload of '-' operator(-mat59)
inline mat59 operator-(mat59 obj)
{
	int i, j;
	mat59 ans;
	for(i=0; i<5; i++) for(j=0; j<9; j++) ans.A[i][j] = -obj.A[i][j];
	return(ans);
}

// Overload of '*' operator --------------------------------------------------//
// double * mat59
inline mat59 operator*(double a, mat59 obj)
{
	int i, j;
	mat59 ans;
	for(i=0; i<5; i++){
		for(j=0; j<9; j++){
			ans.A[i][j] = a * obj.A[i][j];
		}
	}
	return(ans);
}

// mat59 * double
inline mat59 operator*(mat59 obj, double a)
{
	int i, j;
	mat59 ans;
	for(i=0; i<5; i++){
		for(j=0; j<9; j++){
			ans.A[i][j] = obj.A[i][j] * a;
		}
	}
	return(ans);
}

// vec5 * mat59
inline vec9 operator*(vec5 obj1, mat59 obj2)
{
	int i, j;
	vec9 ans;
	for(i=0; i<9; i++){
		ans.x[i] = 0.0;
		for(j=0; j<5; j++){
			ans.x[i] += obj1.x[j] * obj2.A[j][i];
		}
	}
	return(ans);
}

// mat59 * vec9
inline vec5 operator*(mat59 obj1, vec9 obj2)
{
	int i, j;
	vec5 ans;
	for(i=0; i<5; i++){
		ans.x[i] = 0.0;
		for(j=0; j<9; j++){
			ans.x[i] += obj1.A[i][j] * obj2.x[j];
		}
	}
	return(ans);
}

// Extract row vector
inline vec9 mat59::row(int num)
{
	int i;
	vec9 ans;
	for(i=0; i<9; i++) ans.x[i] = A[num][i];
	return(ans);
}

// Extract column vector
inline vec5 mat59::col(int num)
{
	int i;
	vec5 ans;
	for(i=0; i<5; i++) ans.x[i] = A[i][num];
	return(ans);
}

// Set number into (i, j) element
inline void mat59::set(int i, int j, double x){ A[i][j] = x; }

// Set row vector of the specified number
inline void mat59::row_set(int num, vec9 obj)
{
	int i;
	for(i=0; i<9; i++) A[num][i] = obj.x[i];
}

// Set row vector of the specified number
inline void mat59::row_set(int num, double x0, double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8)
{
	A[num][0] = x0; A[num][1] = x1; A[num][2] = x2; A[num][3] = x3; A[num][4] = x4; A[num][5] = x5; A[num][6] = x6; A[num][7] = x7; A[num][8] = x8; 
}

// Set column vector of the specified number
inline void mat59::col_set(int num, vec5 obj)
{
	int i;
	for(i=0; i<5; i++) A[i][num] = obj.x[i];
}

// Set column vector of the specified number
inline void mat59::col_set(int num, double x0, double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8)
{
	A[0][num] = x0; A[1][num] = x1; A[2][num] = x2; A[3][num] = x3; A[4][num] = x4; A[5][num] = x5; A[6][num] = x6; A[7][num] = x7; A[8][num] = x8; 
}

// Return transposed matrix
inline mat95 mat59::trans(void)
{
	int i, j; mat95 ans;
	for(i=0; i<c; i++) for(j=0; j<r; j++) ans.A[i][j] = A[j][i];
	return(ans);
}

// Overload of '+' operator --------------------------------------------------//
// mat62 + mat62
inline mat62 operator+(mat62 obj1, mat62 obj2)
{
	int i, j;
	mat62 ans;
	for(i=0; i<6; i++){
		for(j=0; j<2; j++){
			ans.A[i][j] = obj1.A[i][j] + obj2.A[i][j];
		}
	}
	return(ans);
}

// Overload of '-' operator --------------------------------------------------//
// mat62 - mat62
inline mat62 operator-(mat62 obj1, mat62 obj2)
{
	int i, j;
	mat62 ans;
	for(i=0; i<6; i++){
		for(j=0; j<2; j++){
			ans.A[i][j] = obj1.A[i][j] - obj2.A[i][j];
		}
	}
	return(ans);
}

// Overload of '-' operator(-mat62)
inline mat62 operator-(mat62 obj)
{
	int i, j;
	mat62 ans;
	for(i=0; i<6; i++) for(j=0; j<2; j++) ans.A[i][j] = -obj.A[i][j];
	return(ans);
}

// Overload of '*' operator --------------------------------------------------//
// double * mat62
inline mat62 operator*(double a, mat62 obj)
{
	int i, j;
	mat62 ans;
	for(i=0; i<6; i++){
		for(j=0; j<2; j++){
			ans.A[i][j] = a * obj.A[i][j];
		}
	}
	return(ans);
}

// mat62 * double
inline mat62 operator*(mat62 obj, double a)
{
	int i, j;
	mat62 ans;
	for(i=0; i<6; i++){
		for(j=0; j<2; j++){
			ans.A[i][j] = obj.A[i][j] * a;
		}
	}
	return(ans);
}

// vec6 * mat62
inline vec2 operator*(vec6 obj1, mat62 obj2)
{
	int i, j;
	vec2 ans;
	for(i=0; i<2; i++){
		ans.x[i] = 0.0;
		for(j=0; j<6; j++){
			ans.x[i] += obj1.x[j] * obj2.A[j][i];
		}
	}
	return(ans);
}

// mat62 * vec2
inline vec6 operator*(mat62 obj1, vec2 obj2)
{
	int i, j;
	vec6 ans;
	for(i=0; i<6; i++){
		ans.x[i] = 0.0;
		for(j=0; j<2; j++){
			ans.x[i] += obj1.A[i][j] * obj2.x[j];
		}
	}
	return(ans);
}

// Extract row vector
inline vec2 mat62::row(int num)
{
	int i;
	vec2 ans;
	for(i=0; i<2; i++) ans.x[i] = A[num][i];
	return(ans);
}

// Extract column vector
inline vec6 mat62::col(int num)
{
	int i;
	vec6 ans;
	for(i=0; i<6; i++) ans.x[i] = A[i][num];
	return(ans);
}

// Set number into (i, j) element
inline void mat62::set(int i, int j, double x){ A[i][j] = x; }

// Set row vector of the specified number
inline void mat62::row_set(int num, vec2 obj)
{
	int i;
	for(i=0; i<2; i++) A[num][i] = obj.x[i];
}

// Set row vector of the specified number
inline void mat62::row_set(int num, double x0, double x1)
{
	A[num][0] = x0; A[num][1] = x1; 
}

// Set column vector of the specified number
inline void mat62::col_set(int num, vec6 obj)
{
	int i;
	for(i=0; i<6; i++) A[i][num] = obj.x[i];
}

// Set column vector of the specified number
inline void mat62::col_set(int num, double x0, double x1)
{
	A[0][num] = x0; A[1][num] = x1; 
}

// Return transposed matrix
inline mat26 mat62::trans(void)
{
	int i, j; mat26 ans;
	for(i=0; i<c; i++) for(j=0; j<r; j++) ans.A[i][j] = A[j][i];
	return(ans);
}

// Overload of '+' operator --------------------------------------------------//
// mat63 + mat63
inline mat63 operator+(mat63 obj1, mat63 obj2)
{
	int i, j;
	mat63 ans;
	for(i=0; i<6; i++){
		for(j=0; j<3; j++){
			ans.A[i][j] = obj1.A[i][j] + obj2.A[i][j];
		}
	}
	return(ans);
}

// Overload of '-' operator --------------------------------------------------//
// mat63 - mat63
inline mat63 operator-(mat63 obj1, mat63 obj2)
{
	int i, j;
	mat63 ans;
	for(i=0; i<6; i++){
		for(j=0; j<3; j++){
			ans.A[i][j] = obj1.A[i][j] - obj2.A[i][j];
		}
	}
	return(ans);
}

// Overload of '-' operator(-mat63)
inline mat63 operator-(mat63 obj)
{
	int i, j;
	mat63 ans;
	for(i=0; i<6; i++) for(j=0; j<3; j++) ans.A[i][j] = -obj.A[i][j];
	return(ans);
}

// Overload of '*' operator --------------------------------------------------//
// double * mat63
inline mat63 operator*(double a, mat63 obj)
{
	int i, j;
	mat63 ans;
	for(i=0; i<6; i++){
		for(j=0; j<3; j++){
			ans.A[i][j] = a * obj.A[i][j];
		}
	}
	return(ans);
}

// mat63 * double
inline mat63 operator*(mat63 obj, double a)
{
	int i, j;
	mat63 ans;
	for(i=0; i<6; i++){
		for(j=0; j<3; j++){
			ans.A[i][j] = obj.A[i][j] * a;
		}
	}
	return(ans);
}

// vec6 * mat63
inline vec3 operator*(vec6 obj1, mat63 obj2)
{
	int i, j;
	vec3 ans;
	for(i=0; i<3; i++){
		ans.x[i] = 0.0;
		for(j=0; j<6; j++){
			ans.x[i] += obj1.x[j] * obj2.A[j][i];
		}
	}
	return(ans);
}

// mat63 * vec3
inline vec6 operator*(mat63 obj1, vec3 obj2)
{
	int i, j;
	vec6 ans;
	for(i=0; i<6; i++){
		ans.x[i] = 0.0;
		for(j=0; j<3; j++){
			ans.x[i] += obj1.A[i][j] * obj2.x[j];
		}
	}
	return(ans);
}

// Extract row vector
inline vec3 mat63::row(int num)
{
	int i;
	vec3 ans;
	for(i=0; i<3; i++) ans.x[i] = A[num][i];
	return(ans);
}

// Extract column vector
inline vec6 mat63::col(int num)
{
	int i;
	vec6 ans;
	for(i=0; i<6; i++) ans.x[i] = A[i][num];
	return(ans);
}

// Set number into (i, j) element
inline void mat63::set(int i, int j, double x){ A[i][j] = x; }

// Set row vector of the specified number
inline void mat63::row_set(int num, vec3 obj)
{
	int i;
	for(i=0; i<3; i++) A[num][i] = obj.x[i];
}

// Set row vector of the specified number
inline void mat63::row_set(int num, double x0, double x1, double x2)
{
	A[num][0] = x0; A[num][1] = x1; A[num][2] = x2; 
}

// Set column vector of the specified number
inline void mat63::col_set(int num, vec6 obj)
{
	int i;
	for(i=0; i<6; i++) A[i][num] = obj.x[i];
}

// Set column vector of the specified number
inline void mat63::col_set(int num, double x0, double x1, double x2)
{
	A[0][num] = x0; A[1][num] = x1; A[2][num] = x2; 
}

// Return transposed matrix
inline mat36 mat63::trans(void)
{
	int i, j; mat36 ans;
	for(i=0; i<c; i++) for(j=0; j<r; j++) ans.A[i][j] = A[j][i];
	return(ans);
}

// Overload of '+' operator --------------------------------------------------//
// mat64 + mat64
inline mat64 operator+(mat64 obj1, mat64 obj2)
{
	int i, j;
	mat64 ans;
	for(i=0; i<6; i++){
		for(j=0; j<4; j++){
			ans.A[i][j] = obj1.A[i][j] + obj2.A[i][j];
		}
	}
	return(ans);
}

// Overload of '-' operator --------------------------------------------------//
// mat64 - mat64
inline mat64 operator-(mat64 obj1, mat64 obj2)
{
	int i, j;
	mat64 ans;
	for(i=0; i<6; i++){
		for(j=0; j<4; j++){
			ans.A[i][j] = obj1.A[i][j] - obj2.A[i][j];
		}
	}
	return(ans);
}

// Overload of '-' operator(-mat64)
inline mat64 operator-(mat64 obj)
{
	int i, j;
	mat64 ans;
	for(i=0; i<6; i++) for(j=0; j<4; j++) ans.A[i][j] = -obj.A[i][j];
	return(ans);
}

// Overload of '*' operator --------------------------------------------------//
// double * mat64
inline mat64 operator*(double a, mat64 obj)
{
	int i, j;
	mat64 ans;
	for(i=0; i<6; i++){
		for(j=0; j<4; j++){
			ans.A[i][j] = a * obj.A[i][j];
		}
	}
	return(ans);
}

// mat64 * double
inline mat64 operator*(mat64 obj, double a)
{
	int i, j;
	mat64 ans;
	for(i=0; i<6; i++){
		for(j=0; j<4; j++){
			ans.A[i][j] = obj.A[i][j] * a;
		}
	}
	return(ans);
}

// vec6 * mat64
inline vec4 operator*(vec6 obj1, mat64 obj2)
{
	int i, j;
	vec4 ans;
	for(i=0; i<4; i++){
		ans.x[i] = 0.0;
		for(j=0; j<6; j++){
			ans.x[i] += obj1.x[j] * obj2.A[j][i];
		}
	}
	return(ans);
}

// mat64 * vec4
inline vec6 operator*(mat64 obj1, vec4 obj2)
{
	int i, j;
	vec6 ans;
	for(i=0; i<6; i++){
		ans.x[i] = 0.0;
		for(j=0; j<4; j++){
			ans.x[i] += obj1.A[i][j] * obj2.x[j];
		}
	}
	return(ans);
}

// Extract row vector
inline vec4 mat64::row(int num)
{
	int i;
	vec4 ans;
	for(i=0; i<4; i++) ans.x[i] = A[num][i];
	return(ans);
}

// Extract column vector
inline vec6 mat64::col(int num)
{
	int i;
	vec6 ans;
	for(i=0; i<6; i++) ans.x[i] = A[i][num];
	return(ans);
}

// Set number into (i, j) element
inline void mat64::set(int i, int j, double x){ A[i][j] = x; }

// Set row vector of the specified number
inline void mat64::row_set(int num, vec4 obj)
{
	int i;
	for(i=0; i<4; i++) A[num][i] = obj.x[i];
}

// Set row vector of the specified number
inline void mat64::row_set(int num, double x0, double x1, double x2, double x3)
{
	A[num][0] = x0; A[num][1] = x1; A[num][2] = x2; A[num][3] = x3; 
}

// Set column vector of the specified number
inline void mat64::col_set(int num, vec6 obj)
{
	int i;
	for(i=0; i<6; i++) A[i][num] = obj.x[i];
}

// Set column vector of the specified number
inline void mat64::col_set(int num, double x0, double x1, double x2, double x3)
{
	A[0][num] = x0; A[1][num] = x1; A[2][num] = x2; A[3][num] = x3; 
}

// Return transposed matrix
inline mat46 mat64::trans(void)
{
	int i, j; mat46 ans;
	for(i=0; i<c; i++) for(j=0; j<r; j++) ans.A[i][j] = A[j][i];
	return(ans);
}

// Overload of '+' operator --------------------------------------------------//
// mat65 + mat65
inline mat65 operator+(mat65 obj1, mat65 obj2)
{
	int i, j;
	mat65 ans;
	for(i=0; i<6; i++){
		for(j=0; j<5; j++){
			ans.A[i][j] = obj1.A[i][j] + obj2.A[i][j];
		}
	}
	return(ans);
}

// Overload of '-' operator --------------------------------------------------//
// mat65 - mat65
inline mat65 operator-(mat65 obj1, mat65 obj2)
{
	int i, j;
	mat65 ans;
	for(i=0; i<6; i++){
		for(j=0; j<5; j++){
			ans.A[i][j] = obj1.A[i][j] - obj2.A[i][j];
		}
	}
	return(ans);
}

// Overload of '-' operator(-mat65)
inline mat65 operator-(mat65 obj)
{
	int i, j;
	mat65 ans;
	for(i=0; i<6; i++) for(j=0; j<5; j++) ans.A[i][j] = -obj.A[i][j];
	return(ans);
}

// Overload of '*' operator --------------------------------------------------//
// double * mat65
inline mat65 operator*(double a, mat65 obj)
{
	int i, j;
	mat65 ans;
	for(i=0; i<6; i++){
		for(j=0; j<5; j++){
			ans.A[i][j] = a * obj.A[i][j];
		}
	}
	return(ans);
}

// mat65 * double
inline mat65 operator*(mat65 obj, double a)
{
	int i, j;
	mat65 ans;
	for(i=0; i<6; i++){
		for(j=0; j<5; j++){
			ans.A[i][j] = obj.A[i][j] * a;
		}
	}
	return(ans);
}

// vec6 * mat65
inline vec5 operator*(vec6 obj1, mat65 obj2)
{
	int i, j;
	vec5 ans;
	for(i=0; i<5; i++){
		ans.x[i] = 0.0;
		for(j=0; j<6; j++){
			ans.x[i] += obj1.x[j] * obj2.A[j][i];
		}
	}
	return(ans);
}

// mat65 * vec5
inline vec6 operator*(mat65 obj1, vec5 obj2)
{
	int i, j;
	vec6 ans;
	for(i=0; i<6; i++){
		ans.x[i] = 0.0;
		for(j=0; j<5; j++){
			ans.x[i] += obj1.A[i][j] * obj2.x[j];
		}
	}
	return(ans);
}

// Extract row vector
inline vec5 mat65::row(int num)
{
	int i;
	vec5 ans;
	for(i=0; i<5; i++) ans.x[i] = A[num][i];
	return(ans);
}

// Extract column vector
inline vec6 mat65::col(int num)
{
	int i;
	vec6 ans;
	for(i=0; i<6; i++) ans.x[i] = A[i][num];
	return(ans);
}

// Set number into (i, j) element
inline void mat65::set(int i, int j, double x){ A[i][j] = x; }

// Set row vector of the specified number
inline void mat65::row_set(int num, vec5 obj)
{
	int i;
	for(i=0; i<5; i++) A[num][i] = obj.x[i];
}

// Set row vector of the specified number
inline void mat65::row_set(int num, double x0, double x1, double x2, double x3, double x4)
{
	A[num][0] = x0; A[num][1] = x1; A[num][2] = x2; A[num][3] = x3; A[num][4] = x4; 
}

// Set column vector of the specified number
inline void mat65::col_set(int num, vec6 obj)
{
	int i;
	for(i=0; i<6; i++) A[i][num] = obj.x[i];
}

// Set column vector of the specified number
inline void mat65::col_set(int num, double x0, double x1, double x2, double x3, double x4)
{
	A[0][num] = x0; A[1][num] = x1; A[2][num] = x2; A[3][num] = x3; A[4][num] = x4; 
}

// Return transposed matrix
inline mat56 mat65::trans(void)
{
	int i, j; mat56 ans;
	for(i=0; i<c; i++) for(j=0; j<r; j++) ans.A[i][j] = A[j][i];
	return(ans);
}

// Overload of '+' operator --------------------------------------------------//
// mat66 + mat66
inline mat66 operator+(mat66 obj1, mat66 obj2)
{
	int i, j;
	mat66 ans;
	for(i=0; i<6; i++){
		for(j=0; j<6; j++){
			ans.A[i][j] = obj1.A[i][j] + obj2.A[i][j];
		}
	}
	return(ans);
}

// Overload of '-' operator --------------------------------------------------//
// mat66 - mat66
inline mat66 operator-(mat66 obj1, mat66 obj2)
{
	int i, j;
	mat66 ans;
	for(i=0; i<6; i++){
		for(j=0; j<6; j++){
			ans.A[i][j] = obj1.A[i][j] - obj2.A[i][j];
		}
	}
	return(ans);
}

// Overload of '-' operator(-mat66)
inline mat66 operator-(mat66 obj)
{
	int i, j;
	mat66 ans;
	for(i=0; i<6; i++) for(j=0; j<6; j++) ans.A[i][j] = -obj.A[i][j];
	return(ans);
}

// Overload of '*' operator --------------------------------------------------//
// double * mat66
inline mat66 operator*(double a, mat66 obj)
{
	int i, j;
	mat66 ans;
	for(i=0; i<6; i++){
		for(j=0; j<6; j++){
			ans.A[i][j] = a * obj.A[i][j];
		}
	}
	return(ans);
}

// mat66 * double
inline mat66 operator*(mat66 obj, double a)
{
	int i, j;
	mat66 ans;
	for(i=0; i<6; i++){
		for(j=0; j<6; j++){
			ans.A[i][j] = obj.A[i][j] * a;
		}
	}
	return(ans);
}

// vec6 * mat66
inline vec6 operator*(vec6 obj1, mat66 obj2)
{
	int i, j;
	vec6 ans;
	for(i=0; i<6; i++){
		ans.x[i] = 0.0;
		for(j=0; j<6; j++){
			ans.x[i] += obj1.x[j] * obj2.A[j][i];
		}
	}
	return(ans);
}

// mat66 * vec6
inline vec6 operator*(mat66 obj1, vec6 obj2)
{
	int i, j;
	vec6 ans;
	for(i=0; i<6; i++){
		ans.x[i] = 0.0;
		for(j=0; j<6; j++){
			ans.x[i] += obj1.A[i][j] * obj2.x[j];
		}
	}
	return(ans);
}

// Extract row vector
inline vec6 mat66::row(int num)
{
	int i;
	vec6 ans;
	for(i=0; i<6; i++) ans.x[i] = A[num][i];
	return(ans);
}

// Extract column vector
inline vec6 mat66::col(int num)
{
	int i;
	vec6 ans;
	for(i=0; i<6; i++) ans.x[i] = A[i][num];
	return(ans);
}

// Set number into (i, j) element
inline void mat66::set(int i, int j, double x){ A[i][j] = x; }

// Set row vector of the specified number
inline void mat66::row_set(int num, vec6 obj)
{
	int i;
	for(i=0; i<6; i++) A[num][i] = obj.x[i];
}

// Set row vector of the specified number
inline void mat66::row_set(int num, double x0, double x1, double x2, double x3, double x4, double x5)
{
	A[num][0] = x0; A[num][1] = x1; A[num][2] = x2; A[num][3] = x3; A[num][4] = x4; A[num][5] = x5; 
}

// Set column vector of the specified number
inline void mat66::col_set(int num, vec6 obj)
{
	int i;
	for(i=0; i<6; i++) A[i][num] = obj.x[i];
}

// Set column vector of the specified number
inline void mat66::col_set(int num, double x0, double x1, double x2, double x3, double x4, double x5)
{
	A[0][num] = x0; A[1][num] = x1; A[2][num] = x2; A[3][num] = x3; A[4][num] = x4; A[5][num] = x5; 
}

// Return transposed matrix
inline mat66 mat66::trans(void)
{
	int i, j; mat66 ans;
	for(i=0; i<c; i++) for(j=0; j<r; j++) ans.A[i][j] = A[j][i];
	return(ans);
}

// Overload of '+' operator --------------------------------------------------//
// mat67 + mat67
inline mat67 operator+(mat67 obj1, mat67 obj2)
{
	int i, j;
	mat67 ans;
	for(i=0; i<6; i++){
		for(j=0; j<7; j++){
			ans.A[i][j] = obj1.A[i][j] + obj2.A[i][j];
		}
	}
	return(ans);
}

// Overload of '-' operator --------------------------------------------------//
// mat67 - mat67
inline mat67 operator-(mat67 obj1, mat67 obj2)
{
	int i, j;
	mat67 ans;
	for(i=0; i<6; i++){
		for(j=0; j<7; j++){
			ans.A[i][j] = obj1.A[i][j] - obj2.A[i][j];
		}
	}
	return(ans);
}

// Overload of '-' operator(-mat67)
inline mat67 operator-(mat67 obj)
{
	int i, j;
	mat67 ans;
	for(i=0; i<6; i++) for(j=0; j<7; j++) ans.A[i][j] = -obj.A[i][j];
	return(ans);
}

// Overload of '*' operator --------------------------------------------------//
// double * mat67
inline mat67 operator*(double a, mat67 obj)
{
	int i, j;
	mat67 ans;
	for(i=0; i<6; i++){
		for(j=0; j<7; j++){
			ans.A[i][j] = a * obj.A[i][j];
		}
	}
	return(ans);
}

// mat67 * double
inline mat67 operator*(mat67 obj, double a)
{
	int i, j;
	mat67 ans;
	for(i=0; i<6; i++){
		for(j=0; j<7; j++){
			ans.A[i][j] = obj.A[i][j] * a;
		}
	}
	return(ans);
}

// vec6 * mat67
inline vec7 operator*(vec6 obj1, mat67 obj2)
{
	int i, j;
	vec7 ans;
	for(i=0; i<7; i++){
		ans.x[i] = 0.0;
		for(j=0; j<6; j++){
			ans.x[i] += obj1.x[j] * obj2.A[j][i];
		}
	}
	return(ans);
}

// mat67 * vec7
inline vec6 operator*(mat67 obj1, vec7 obj2)
{
	int i, j;
	vec6 ans;
	for(i=0; i<6; i++){
		ans.x[i] = 0.0;
		for(j=0; j<7; j++){
			ans.x[i] += obj1.A[i][j] * obj2.x[j];
		}
	}
	return(ans);
}

// Extract row vector
inline vec7 mat67::row(int num)
{
	int i;
	vec7 ans;
	for(i=0; i<7; i++) ans.x[i] = A[num][i];
	return(ans);
}

// Extract column vector
inline vec6 mat67::col(int num)
{
	int i;
	vec6 ans;
	for(i=0; i<6; i++) ans.x[i] = A[i][num];
	return(ans);
}

// Set number into (i, j) element
inline void mat67::set(int i, int j, double x){ A[i][j] = x; }

// Set row vector of the specified number
inline void mat67::row_set(int num, vec7 obj)
{
	int i;
	for(i=0; i<7; i++) A[num][i] = obj.x[i];
}

// Set row vector of the specified number
inline void mat67::row_set(int num, double x0, double x1, double x2, double x3, double x4, double x5, double x6)
{
	A[num][0] = x0; A[num][1] = x1; A[num][2] = x2; A[num][3] = x3; A[num][4] = x4; A[num][5] = x5; A[num][6] = x6; 
}

// Set column vector of the specified number
inline void mat67::col_set(int num, vec6 obj)
{
	int i;
	for(i=0; i<6; i++) A[i][num] = obj.x[i];
}

// Set column vector of the specified number
inline void mat67::col_set(int num, double x0, double x1, double x2, double x3, double x4, double x5, double x6)
{
	A[0][num] = x0; A[1][num] = x1; A[2][num] = x2; A[3][num] = x3; A[4][num] = x4; A[5][num] = x5; A[6][num] = x6; 
}

// Return transposed matrix
inline mat76 mat67::trans(void)
{
	int i, j; mat76 ans;
	for(i=0; i<c; i++) for(j=0; j<r; j++) ans.A[i][j] = A[j][i];
	return(ans);
}

// Overload of '+' operator --------------------------------------------------//
// mat68 + mat68
inline mat68 operator+(mat68 obj1, mat68 obj2)
{
	int i, j;
	mat68 ans;
	for(i=0; i<6; i++){
		for(j=0; j<8; j++){
			ans.A[i][j] = obj1.A[i][j] + obj2.A[i][j];
		}
	}
	return(ans);
}

// Overload of '-' operator --------------------------------------------------//
// mat68 - mat68
inline mat68 operator-(mat68 obj1, mat68 obj2)
{
	int i, j;
	mat68 ans;
	for(i=0; i<6; i++){
		for(j=0; j<8; j++){
			ans.A[i][j] = obj1.A[i][j] - obj2.A[i][j];
		}
	}
	return(ans);
}

// Overload of '-' operator(-mat68)
inline mat68 operator-(mat68 obj)
{
	int i, j;
	mat68 ans;
	for(i=0; i<6; i++) for(j=0; j<8; j++) ans.A[i][j] = -obj.A[i][j];
	return(ans);
}

// Overload of '*' operator --------------------------------------------------//
// double * mat68
inline mat68 operator*(double a, mat68 obj)
{
	int i, j;
	mat68 ans;
	for(i=0; i<6; i++){
		for(j=0; j<8; j++){
			ans.A[i][j] = a * obj.A[i][j];
		}
	}
	return(ans);
}

// mat68 * double
inline mat68 operator*(mat68 obj, double a)
{
	int i, j;
	mat68 ans;
	for(i=0; i<6; i++){
		for(j=0; j<8; j++){
			ans.A[i][j] = obj.A[i][j] * a;
		}
	}
	return(ans);
}

// vec6 * mat68
inline vec8 operator*(vec6 obj1, mat68 obj2)
{
	int i, j;
	vec8 ans;
	for(i=0; i<8; i++){
		ans.x[i] = 0.0;
		for(j=0; j<6; j++){
			ans.x[i] += obj1.x[j] * obj2.A[j][i];
		}
	}
	return(ans);
}

// mat68 * vec8
inline vec6 operator*(mat68 obj1, vec8 obj2)
{
	int i, j;
	vec6 ans;
	for(i=0; i<6; i++){
		ans.x[i] = 0.0;
		for(j=0; j<8; j++){
			ans.x[i] += obj1.A[i][j] * obj2.x[j];
		}
	}
	return(ans);
}

// Extract row vector
inline vec8 mat68::row(int num)
{
	int i;
	vec8 ans;
	for(i=0; i<8; i++) ans.x[i] = A[num][i];
	return(ans);
}

// Extract column vector
inline vec6 mat68::col(int num)
{
	int i;
	vec6 ans;
	for(i=0; i<6; i++) ans.x[i] = A[i][num];
	return(ans);
}

// Set number into (i, j) element
inline void mat68::set(int i, int j, double x){ A[i][j] = x; }

// Set row vector of the specified number
inline void mat68::row_set(int num, vec8 obj)
{
	int i;
	for(i=0; i<8; i++) A[num][i] = obj.x[i];
}

// Set row vector of the specified number
inline void mat68::row_set(int num, double x0, double x1, double x2, double x3, double x4, double x5, double x6, double x7)
{
	A[num][0] = x0; A[num][1] = x1; A[num][2] = x2; A[num][3] = x3; A[num][4] = x4; A[num][5] = x5; A[num][6] = x6; A[num][7] = x7; 
}

// Set column vector of the specified number
inline void mat68::col_set(int num, vec6 obj)
{
	int i;
	for(i=0; i<6; i++) A[i][num] = obj.x[i];
}

// Set column vector of the specified number
inline void mat68::col_set(int num, double x0, double x1, double x2, double x3, double x4, double x5, double x6, double x7)
{
	A[0][num] = x0; A[1][num] = x1; A[2][num] = x2; A[3][num] = x3; A[4][num] = x4; A[5][num] = x5; A[6][num] = x6; A[7][num] = x7; 
}

// Return transposed matrix
inline mat86 mat68::trans(void)
{
	int i, j; mat86 ans;
	for(i=0; i<c; i++) for(j=0; j<r; j++) ans.A[i][j] = A[j][i];
	return(ans);
}

// Overload of '+' operator --------------------------------------------------//
// mat69 + mat69
inline mat69 operator+(mat69 obj1, mat69 obj2)
{
	int i, j;
	mat69 ans;
	for(i=0; i<6; i++){
		for(j=0; j<9; j++){
			ans.A[i][j] = obj1.A[i][j] + obj2.A[i][j];
		}
	}
	return(ans);
}

// Overload of '-' operator --------------------------------------------------//
// mat69 - mat69
inline mat69 operator-(mat69 obj1, mat69 obj2)
{
	int i, j;
	mat69 ans;
	for(i=0; i<6; i++){
		for(j=0; j<9; j++){
			ans.A[i][j] = obj1.A[i][j] - obj2.A[i][j];
		}
	}
	return(ans);
}

// Overload of '-' operator(-mat69)
inline mat69 operator-(mat69 obj)
{
	int i, j;
	mat69 ans;
	for(i=0; i<6; i++) for(j=0; j<9; j++) ans.A[i][j] = -obj.A[i][j];
	return(ans);
}

// Overload of '*' operator --------------------------------------------------//
// double * mat69
inline mat69 operator*(double a, mat69 obj)
{
	int i, j;
	mat69 ans;
	for(i=0; i<6; i++){
		for(j=0; j<9; j++){
			ans.A[i][j] = a * obj.A[i][j];
		}
	}
	return(ans);
}

// mat69 * double
inline mat69 operator*(mat69 obj, double a)
{
	int i, j;
	mat69 ans;
	for(i=0; i<6; i++){
		for(j=0; j<9; j++){
			ans.A[i][j] = obj.A[i][j] * a;
		}
	}
	return(ans);
}

// vec6 * mat69
inline vec9 operator*(vec6 obj1, mat69 obj2)
{
	int i, j;
	vec9 ans;
	for(i=0; i<9; i++){
		ans.x[i] = 0.0;
		for(j=0; j<6; j++){
			ans.x[i] += obj1.x[j] * obj2.A[j][i];
		}
	}
	return(ans);
}

// mat69 * vec9
inline vec6 operator*(mat69 obj1, vec9 obj2)
{
	int i, j;
	vec6 ans;
	for(i=0; i<6; i++){
		ans.x[i] = 0.0;
		for(j=0; j<9; j++){
			ans.x[i] += obj1.A[i][j] * obj2.x[j];
		}
	}
	return(ans);
}

// Extract row vector
inline vec9 mat69::row(int num)
{
	int i;
	vec9 ans;
	for(i=0; i<9; i++) ans.x[i] = A[num][i];
	return(ans);
}

// Extract column vector
inline vec6 mat69::col(int num)
{
	int i;
	vec6 ans;
	for(i=0; i<6; i++) ans.x[i] = A[i][num];
	return(ans);
}

// Set number into (i, j) element
inline void mat69::set(int i, int j, double x){ A[i][j] = x; }

// Set row vector of the specified number
inline void mat69::row_set(int num, vec9 obj)
{
	int i;
	for(i=0; i<9; i++) A[num][i] = obj.x[i];
}

// Set row vector of the specified number
inline void mat69::row_set(int num, double x0, double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8)
{
	A[num][0] = x0; A[num][1] = x1; A[num][2] = x2; A[num][3] = x3; A[num][4] = x4; A[num][5] = x5; A[num][6] = x6; A[num][7] = x7; A[num][8] = x8; 
}

// Set column vector of the specified number
inline void mat69::col_set(int num, vec6 obj)
{
	int i;
	for(i=0; i<6; i++) A[i][num] = obj.x[i];
}

// Set column vector of the specified number
inline void mat69::col_set(int num, double x0, double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8)
{
	A[0][num] = x0; A[1][num] = x1; A[2][num] = x2; A[3][num] = x3; A[4][num] = x4; A[5][num] = x5; A[6][num] = x6; A[7][num] = x7; A[8][num] = x8; 
}

// Return transposed matrix
inline mat96 mat69::trans(void)
{
	int i, j; mat96 ans;
	for(i=0; i<c; i++) for(j=0; j<r; j++) ans.A[i][j] = A[j][i];
	return(ans);
}

// Overload of '+' operator --------------------------------------------------//
// mat72 + mat72
inline mat72 operator+(mat72 obj1, mat72 obj2)
{
	int i, j;
	mat72 ans;
	for(i=0; i<7; i++){
		for(j=0; j<2; j++){
			ans.A[i][j] = obj1.A[i][j] + obj2.A[i][j];
		}
	}
	return(ans);
}

// Overload of '-' operator --------------------------------------------------//
// mat72 - mat72
inline mat72 operator-(mat72 obj1, mat72 obj2)
{
	int i, j;
	mat72 ans;
	for(i=0; i<7; i++){
		for(j=0; j<2; j++){
			ans.A[i][j] = obj1.A[i][j] - obj2.A[i][j];
		}
	}
	return(ans);
}

// Overload of '-' operator(-mat72)
inline mat72 operator-(mat72 obj)
{
	int i, j;
	mat72 ans;
	for(i=0; i<7; i++) for(j=0; j<2; j++) ans.A[i][j] = -obj.A[i][j];
	return(ans);
}

// Overload of '*' operator --------------------------------------------------//
// double * mat72
inline mat72 operator*(double a, mat72 obj)
{
	int i, j;
	mat72 ans;
	for(i=0; i<7; i++){
		for(j=0; j<2; j++){
			ans.A[i][j] = a * obj.A[i][j];
		}
	}
	return(ans);
}

// mat72 * double
inline mat72 operator*(mat72 obj, double a)
{
	int i, j;
	mat72 ans;
	for(i=0; i<7; i++){
		for(j=0; j<2; j++){
			ans.A[i][j] = obj.A[i][j] * a;
		}
	}
	return(ans);
}

// vec7 * mat72
inline vec2 operator*(vec7 obj1, mat72 obj2)
{
	int i, j;
	vec2 ans;
	for(i=0; i<2; i++){
		ans.x[i] = 0.0;
		for(j=0; j<7; j++){
			ans.x[i] += obj1.x[j] * obj2.A[j][i];
		}
	}
	return(ans);
}

// mat72 * vec2
inline vec7 operator*(mat72 obj1, vec2 obj2)
{
	int i, j;
	vec7 ans;
	for(i=0; i<7; i++){
		ans.x[i] = 0.0;
		for(j=0; j<2; j++){
			ans.x[i] += obj1.A[i][j] * obj2.x[j];
		}
	}
	return(ans);
}

// Extract row vector
inline vec2 mat72::row(int num)
{
	int i;
	vec2 ans;
	for(i=0; i<2; i++) ans.x[i] = A[num][i];
	return(ans);
}

// Extract column vector
inline vec7 mat72::col(int num)
{
	int i;
	vec7 ans;
	for(i=0; i<7; i++) ans.x[i] = A[i][num];
	return(ans);
}

// Set number into (i, j) element
inline void mat72::set(int i, int j, double x){ A[i][j] = x; }

// Set row vector of the specified number
inline void mat72::row_set(int num, vec2 obj)
{
	int i;
	for(i=0; i<2; i++) A[num][i] = obj.x[i];
}

// Set row vector of the specified number
inline void mat72::row_set(int num, double x0, double x1)
{
	A[num][0] = x0; A[num][1] = x1; 
}

// Set column vector of the specified number
inline void mat72::col_set(int num, vec7 obj)
{
	int i;
	for(i=0; i<7; i++) A[i][num] = obj.x[i];
}

// Set column vector of the specified number
inline void mat72::col_set(int num, double x0, double x1)
{
	A[0][num] = x0; A[1][num] = x1; 
}

// Return transposed matrix
inline mat27 mat72::trans(void)
{
	int i, j; mat27 ans;
	for(i=0; i<c; i++) for(j=0; j<r; j++) ans.A[i][j] = A[j][i];
	return(ans);
}

// Overload of '+' operator --------------------------------------------------//
// mat73 + mat73
inline mat73 operator+(mat73 obj1, mat73 obj2)
{
	int i, j;
	mat73 ans;
	for(i=0; i<7; i++){
		for(j=0; j<3; j++){
			ans.A[i][j] = obj1.A[i][j] + obj2.A[i][j];
		}
	}
	return(ans);
}

// Overload of '-' operator --------------------------------------------------//
// mat73 - mat73
inline mat73 operator-(mat73 obj1, mat73 obj2)
{
	int i, j;
	mat73 ans;
	for(i=0; i<7; i++){
		for(j=0; j<3; j++){
			ans.A[i][j] = obj1.A[i][j] - obj2.A[i][j];
		}
	}
	return(ans);
}

// Overload of '-' operator(-mat73)
inline mat73 operator-(mat73 obj)
{
	int i, j;
	mat73 ans;
	for(i=0; i<7; i++) for(j=0; j<3; j++) ans.A[i][j] = -obj.A[i][j];
	return(ans);
}

// Overload of '*' operator --------------------------------------------------//
// double * mat73
inline mat73 operator*(double a, mat73 obj)
{
	int i, j;
	mat73 ans;
	for(i=0; i<7; i++){
		for(j=0; j<3; j++){
			ans.A[i][j] = a * obj.A[i][j];
		}
	}
	return(ans);
}

// mat73 * double
inline mat73 operator*(mat73 obj, double a)
{
	int i, j;
	mat73 ans;
	for(i=0; i<7; i++){
		for(j=0; j<3; j++){
			ans.A[i][j] = obj.A[i][j] * a;
		}
	}
	return(ans);
}

// vec7 * mat73
inline vec3 operator*(vec7 obj1, mat73 obj2)
{
	int i, j;
	vec3 ans;
	for(i=0; i<3; i++){
		ans.x[i] = 0.0;
		for(j=0; j<7; j++){
			ans.x[i] += obj1.x[j] * obj2.A[j][i];
		}
	}
	return(ans);
}

// mat73 * vec3
inline vec7 operator*(mat73 obj1, vec3 obj2)
{
	int i, j;
	vec7 ans;
	for(i=0; i<7; i++){
		ans.x[i] = 0.0;
		for(j=0; j<3; j++){
			ans.x[i] += obj1.A[i][j] * obj2.x[j];
		}
	}
	return(ans);
}

// Extract row vector
inline vec3 mat73::row(int num)
{
	int i;
	vec3 ans;
	for(i=0; i<3; i++) ans.x[i] = A[num][i];
	return(ans);
}

// Extract column vector
inline vec7 mat73::col(int num)
{
	int i;
	vec7 ans;
	for(i=0; i<7; i++) ans.x[i] = A[i][num];
	return(ans);
}

// Set number into (i, j) element
inline void mat73::set(int i, int j, double x){ A[i][j] = x; }

// Set row vector of the specified number
inline void mat73::row_set(int num, vec3 obj)
{
	int i;
	for(i=0; i<3; i++) A[num][i] = obj.x[i];
}

// Set row vector of the specified number
inline void mat73::row_set(int num, double x0, double x1, double x2)
{
	A[num][0] = x0; A[num][1] = x1; A[num][2] = x2; 
}

// Set column vector of the specified number
inline void mat73::col_set(int num, vec7 obj)
{
	int i;
	for(i=0; i<7; i++) A[i][num] = obj.x[i];
}

// Set column vector of the specified number
inline void mat73::col_set(int num, double x0, double x1, double x2)
{
	A[0][num] = x0; A[1][num] = x1; A[2][num] = x2; 
}

// Return transposed matrix
inline mat37 mat73::trans(void)
{
	int i, j; mat37 ans;
	for(i=0; i<c; i++) for(j=0; j<r; j++) ans.A[i][j] = A[j][i];
	return(ans);
}

// Overload of '+' operator --------------------------------------------------//
// mat74 + mat74
inline mat74 operator+(mat74 obj1, mat74 obj2)
{
	int i, j;
	mat74 ans;
	for(i=0; i<7; i++){
		for(j=0; j<4; j++){
			ans.A[i][j] = obj1.A[i][j] + obj2.A[i][j];
		}
	}
	return(ans);
}

// Overload of '-' operator --------------------------------------------------//
// mat74 - mat74
inline mat74 operator-(mat74 obj1, mat74 obj2)
{
	int i, j;
	mat74 ans;
	for(i=0; i<7; i++){
		for(j=0; j<4; j++){
			ans.A[i][j] = obj1.A[i][j] - obj2.A[i][j];
		}
	}
	return(ans);
}

// Overload of '-' operator(-mat74)
inline mat74 operator-(mat74 obj)
{
	int i, j;
	mat74 ans;
	for(i=0; i<7; i++) for(j=0; j<4; j++) ans.A[i][j] = -obj.A[i][j];
	return(ans);
}

// Overload of '*' operator --------------------------------------------------//
// double * mat74
inline mat74 operator*(double a, mat74 obj)
{
	int i, j;
	mat74 ans;
	for(i=0; i<7; i++){
		for(j=0; j<4; j++){
			ans.A[i][j] = a * obj.A[i][j];
		}
	}
	return(ans);
}

// mat74 * double
inline mat74 operator*(mat74 obj, double a)
{
	int i, j;
	mat74 ans;
	for(i=0; i<7; i++){
		for(j=0; j<4; j++){
			ans.A[i][j] = obj.A[i][j] * a;
		}
	}
	return(ans);
}

// vec7 * mat74
inline vec4 operator*(vec7 obj1, mat74 obj2)
{
	int i, j;
	vec4 ans;
	for(i=0; i<4; i++){
		ans.x[i] = 0.0;
		for(j=0; j<7; j++){
			ans.x[i] += obj1.x[j] * obj2.A[j][i];
		}
	}
	return(ans);
}

// mat74 * vec4
inline vec7 operator*(mat74 obj1, vec4 obj2)
{
	int i, j;
	vec7 ans;
	for(i=0; i<7; i++){
		ans.x[i] = 0.0;
		for(j=0; j<4; j++){
			ans.x[i] += obj1.A[i][j] * obj2.x[j];
		}
	}
	return(ans);
}

// Extract row vector
inline vec4 mat74::row(int num)
{
	int i;
	vec4 ans;
	for(i=0; i<4; i++) ans.x[i] = A[num][i];
	return(ans);
}

// Extract column vector
inline vec7 mat74::col(int num)
{
	int i;
	vec7 ans;
	for(i=0; i<7; i++) ans.x[i] = A[i][num];
	return(ans);
}

// Set number into (i, j) element
inline void mat74::set(int i, int j, double x){ A[i][j] = x; }

// Set row vector of the specified number
inline void mat74::row_set(int num, vec4 obj)
{
	int i;
	for(i=0; i<4; i++) A[num][i] = obj.x[i];
}

// Set row vector of the specified number
inline void mat74::row_set(int num, double x0, double x1, double x2, double x3)
{
	A[num][0] = x0; A[num][1] = x1; A[num][2] = x2; A[num][3] = x3; 
}

// Set column vector of the specified number
inline void mat74::col_set(int num, vec7 obj)
{
	int i;
	for(i=0; i<7; i++) A[i][num] = obj.x[i];
}

// Set column vector of the specified number
inline void mat74::col_set(int num, double x0, double x1, double x2, double x3)
{
	A[0][num] = x0; A[1][num] = x1; A[2][num] = x2; A[3][num] = x3; 
}

// Return transposed matrix
inline mat47 mat74::trans(void)
{
	int i, j; mat47 ans;
	for(i=0; i<c; i++) for(j=0; j<r; j++) ans.A[i][j] = A[j][i];
	return(ans);
}

// Overload of '+' operator --------------------------------------------------//
// mat75 + mat75
inline mat75 operator+(mat75 obj1, mat75 obj2)
{
	int i, j;
	mat75 ans;
	for(i=0; i<7; i++){
		for(j=0; j<5; j++){
			ans.A[i][j] = obj1.A[i][j] + obj2.A[i][j];
		}
	}
	return(ans);
}

// Overload of '-' operator --------------------------------------------------//
// mat75 - mat75
inline mat75 operator-(mat75 obj1, mat75 obj2)
{
	int i, j;
	mat75 ans;
	for(i=0; i<7; i++){
		for(j=0; j<5; j++){
			ans.A[i][j] = obj1.A[i][j] - obj2.A[i][j];
		}
	}
	return(ans);
}

// Overload of '-' operator(-mat75)
inline mat75 operator-(mat75 obj)
{
	int i, j;
	mat75 ans;
	for(i=0; i<7; i++) for(j=0; j<5; j++) ans.A[i][j] = -obj.A[i][j];
	return(ans);
}

// Overload of '*' operator --------------------------------------------------//
// double * mat75
inline mat75 operator*(double a, mat75 obj)
{
	int i, j;
	mat75 ans;
	for(i=0; i<7; i++){
		for(j=0; j<5; j++){
			ans.A[i][j] = a * obj.A[i][j];
		}
	}
	return(ans);
}

// mat75 * double
inline mat75 operator*(mat75 obj, double a)
{
	int i, j;
	mat75 ans;
	for(i=0; i<7; i++){
		for(j=0; j<5; j++){
			ans.A[i][j] = obj.A[i][j] * a;
		}
	}
	return(ans);
}

// vec7 * mat75
inline vec5 operator*(vec7 obj1, mat75 obj2)
{
	int i, j;
	vec5 ans;
	for(i=0; i<5; i++){
		ans.x[i] = 0.0;
		for(j=0; j<7; j++){
			ans.x[i] += obj1.x[j] * obj2.A[j][i];
		}
	}
	return(ans);
}

// mat75 * vec5
inline vec7 operator*(mat75 obj1, vec5 obj2)
{
	int i, j;
	vec7 ans;
	for(i=0; i<7; i++){
		ans.x[i] = 0.0;
		for(j=0; j<5; j++){
			ans.x[i] += obj1.A[i][j] * obj2.x[j];
		}
	}
	return(ans);
}

// Extract row vector
inline vec5 mat75::row(int num)
{
	int i;
	vec5 ans;
	for(i=0; i<5; i++) ans.x[i] = A[num][i];
	return(ans);
}

// Extract column vector
inline vec7 mat75::col(int num)
{
	int i;
	vec7 ans;
	for(i=0; i<7; i++) ans.x[i] = A[i][num];
	return(ans);
}

// Set number into (i, j) element
inline void mat75::set(int i, int j, double x){ A[i][j] = x; }

// Set row vector of the specified number
inline void mat75::row_set(int num, vec5 obj)
{
	int i;
	for(i=0; i<5; i++) A[num][i] = obj.x[i];
}

// Set row vector of the specified number
inline void mat75::row_set(int num, double x0, double x1, double x2, double x3, double x4)
{
	A[num][0] = x0; A[num][1] = x1; A[num][2] = x2; A[num][3] = x3; A[num][4] = x4; 
}

// Set column vector of the specified number
inline void mat75::col_set(int num, vec7 obj)
{
	int i;
	for(i=0; i<7; i++) A[i][num] = obj.x[i];
}

// Set column vector of the specified number
inline void mat75::col_set(int num, double x0, double x1, double x2, double x3, double x4)
{
	A[0][num] = x0; A[1][num] = x1; A[2][num] = x2; A[3][num] = x3; A[4][num] = x4; 
}

// Return transposed matrix
inline mat57 mat75::trans(void)
{
	int i, j; mat57 ans;
	for(i=0; i<c; i++) for(j=0; j<r; j++) ans.A[i][j] = A[j][i];
	return(ans);
}

// Overload of '+' operator --------------------------------------------------//
// mat76 + mat76
inline mat76 operator+(mat76 obj1, mat76 obj2)
{
	int i, j;
	mat76 ans;
	for(i=0; i<7; i++){
		for(j=0; j<6; j++){
			ans.A[i][j] = obj1.A[i][j] + obj2.A[i][j];
		}
	}
	return(ans);
}

// Overload of '-' operator --------------------------------------------------//
// mat76 - mat76
inline mat76 operator-(mat76 obj1, mat76 obj2)
{
	int i, j;
	mat76 ans;
	for(i=0; i<7; i++){
		for(j=0; j<6; j++){
			ans.A[i][j] = obj1.A[i][j] - obj2.A[i][j];
		}
	}
	return(ans);
}

// Overload of '-' operator(-mat76)
inline mat76 operator-(mat76 obj)
{
	int i, j;
	mat76 ans;
	for(i=0; i<7; i++) for(j=0; j<6; j++) ans.A[i][j] = -obj.A[i][j];
	return(ans);
}

// Overload of '*' operator --------------------------------------------------//
// double * mat76
inline mat76 operator*(double a, mat76 obj)
{
	int i, j;
	mat76 ans;
	for(i=0; i<7; i++){
		for(j=0; j<6; j++){
			ans.A[i][j] = a * obj.A[i][j];
		}
	}
	return(ans);
}

// mat76 * double
inline mat76 operator*(mat76 obj, double a)
{
	int i, j;
	mat76 ans;
	for(i=0; i<7; i++){
		for(j=0; j<6; j++){
			ans.A[i][j] = obj.A[i][j] * a;
		}
	}
	return(ans);
}

// vec7 * mat76
inline vec6 operator*(vec7 obj1, mat76 obj2)
{
	int i, j;
	vec6 ans;
	for(i=0; i<6; i++){
		ans.x[i] = 0.0;
		for(j=0; j<7; j++){
			ans.x[i] += obj1.x[j] * obj2.A[j][i];
		}
	}
	return(ans);
}

// mat76 * vec6
inline vec7 operator*(mat76 obj1, vec6 obj2)
{
	int i, j;
	vec7 ans;
	for(i=0; i<7; i++){
		ans.x[i] = 0.0;
		for(j=0; j<6; j++){
			ans.x[i] += obj1.A[i][j] * obj2.x[j];
		}
	}
	return(ans);
}

// Extract row vector
inline vec6 mat76::row(int num)
{
	int i;
	vec6 ans;
	for(i=0; i<6; i++) ans.x[i] = A[num][i];
	return(ans);
}

// Extract column vector
inline vec7 mat76::col(int num)
{
	int i;
	vec7 ans;
	for(i=0; i<7; i++) ans.x[i] = A[i][num];
	return(ans);
}

// Set number into (i, j) element
inline void mat76::set(int i, int j, double x){ A[i][j] = x; }

// Set row vector of the specified number
inline void mat76::row_set(int num, vec6 obj)
{
	int i;
	for(i=0; i<6; i++) A[num][i] = obj.x[i];
}

// Set row vector of the specified number
inline void mat76::row_set(int num, double x0, double x1, double x2, double x3, double x4, double x5)
{
	A[num][0] = x0; A[num][1] = x1; A[num][2] = x2; A[num][3] = x3; A[num][4] = x4; A[num][5] = x5; 
}

// Set column vector of the specified number
inline void mat76::col_set(int num, vec7 obj)
{
	int i;
	for(i=0; i<7; i++) A[i][num] = obj.x[i];
}

// Set column vector of the specified number
inline void mat76::col_set(int num, double x0, double x1, double x2, double x3, double x4, double x5)
{
	A[0][num] = x0; A[1][num] = x1; A[2][num] = x2; A[3][num] = x3; A[4][num] = x4; A[5][num] = x5; 
}

// Return transposed matrix
inline mat67 mat76::trans(void)
{
	int i, j; mat67 ans;
	for(i=0; i<c; i++) for(j=0; j<r; j++) ans.A[i][j] = A[j][i];
	return(ans);
}

// Overload of '+' operator --------------------------------------------------//
// mat77 + mat77
inline mat77 operator+(mat77 obj1, mat77 obj2)
{
	int i, j;
	mat77 ans;
	for(i=0; i<7; i++){
		for(j=0; j<7; j++){
			ans.A[i][j] = obj1.A[i][j] + obj2.A[i][j];
		}
	}
	return(ans);
}

// Overload of '-' operator --------------------------------------------------//
// mat77 - mat77
inline mat77 operator-(mat77 obj1, mat77 obj2)
{
	int i, j;
	mat77 ans;
	for(i=0; i<7; i++){
		for(j=0; j<7; j++){
			ans.A[i][j] = obj1.A[i][j] - obj2.A[i][j];
		}
	}
	return(ans);
}

// Overload of '-' operator(-mat77)
inline mat77 operator-(mat77 obj)
{
	int i, j;
	mat77 ans;
	for(i=0; i<7; i++) for(j=0; j<7; j++) ans.A[i][j] = -obj.A[i][j];
	return(ans);
}

// Overload of '*' operator --------------------------------------------------//
// double * mat77
inline mat77 operator*(double a, mat77 obj)
{
	int i, j;
	mat77 ans;
	for(i=0; i<7; i++){
		for(j=0; j<7; j++){
			ans.A[i][j] = a * obj.A[i][j];
		}
	}
	return(ans);
}

// mat77 * double
inline mat77 operator*(mat77 obj, double a)
{
	int i, j;
	mat77 ans;
	for(i=0; i<7; i++){
		for(j=0; j<7; j++){
			ans.A[i][j] = obj.A[i][j] * a;
		}
	}
	return(ans);
}

// vec7 * mat77
inline vec7 operator*(vec7 obj1, mat77 obj2)
{
	int i, j;
	vec7 ans;
	for(i=0; i<7; i++){
		ans.x[i] = 0.0;
		for(j=0; j<7; j++){
			ans.x[i] += obj1.x[j] * obj2.A[j][i];
		}
	}
	return(ans);
}

// mat77 * vec7
inline vec7 operator*(mat77 obj1, vec7 obj2)
{
	int i, j;
	vec7 ans;
	for(i=0; i<7; i++){
		ans.x[i] = 0.0;
		for(j=0; j<7; j++){
			ans.x[i] += obj1.A[i][j] * obj2.x[j];
		}
	}
	return(ans);
}

// Extract row vector
inline vec7 mat77::row(int num)
{
	int i;
	vec7 ans;
	for(i=0; i<7; i++) ans.x[i] = A[num][i];
	return(ans);
}

// Extract column vector
inline vec7 mat77::col(int num)
{
	int i;
	vec7 ans;
	for(i=0; i<7; i++) ans.x[i] = A[i][num];
	return(ans);
}

// Set number into (i, j) element
inline void mat77::set(int i, int j, double x){ A[i][j] = x; }

// Set row vector of the specified number
inline void mat77::row_set(int num, vec7 obj)
{
	int i;
	for(i=0; i<7; i++) A[num][i] = obj.x[i];
}

// Set row vector of the specified number
inline void mat77::row_set(int num, double x0, double x1, double x2, double x3, double x4, double x5, double x6)
{
	A[num][0] = x0; A[num][1] = x1; A[num][2] = x2; A[num][3] = x3; A[num][4] = x4; A[num][5] = x5; A[num][6] = x6; 
}

// Set column vector of the specified number
inline void mat77::col_set(int num, vec7 obj)
{
	int i;
	for(i=0; i<7; i++) A[i][num] = obj.x[i];
}

// Set column vector of the specified number
inline void mat77::col_set(int num, double x0, double x1, double x2, double x3, double x4, double x5, double x6)
{
	A[0][num] = x0; A[1][num] = x1; A[2][num] = x2; A[3][num] = x3; A[4][num] = x4; A[5][num] = x5; A[6][num] = x6; 
}

// Return transposed matrix
inline mat77 mat77::trans(void)
{
	int i, j; mat77 ans;
	for(i=0; i<c; i++) for(j=0; j<r; j++) ans.A[i][j] = A[j][i];
	return(ans);
}

// Overload of '+' operator --------------------------------------------------//
// mat78 + mat78
inline mat78 operator+(mat78 obj1, mat78 obj2)
{
	int i, j;
	mat78 ans;
	for(i=0; i<7; i++){
		for(j=0; j<8; j++){
			ans.A[i][j] = obj1.A[i][j] + obj2.A[i][j];
		}
	}
	return(ans);
}

// Overload of '-' operator --------------------------------------------------//
// mat78 - mat78
inline mat78 operator-(mat78 obj1, mat78 obj2)
{
	int i, j;
	mat78 ans;
	for(i=0; i<7; i++){
		for(j=0; j<8; j++){
			ans.A[i][j] = obj1.A[i][j] - obj2.A[i][j];
		}
	}
	return(ans);
}

// Overload of '-' operator(-mat78)
inline mat78 operator-(mat78 obj)
{
	int i, j;
	mat78 ans;
	for(i=0; i<7; i++) for(j=0; j<8; j++) ans.A[i][j] = -obj.A[i][j];
	return(ans);
}

// Overload of '*' operator --------------------------------------------------//
// double * mat78
inline mat78 operator*(double a, mat78 obj)
{
	int i, j;
	mat78 ans;
	for(i=0; i<7; i++){
		for(j=0; j<8; j++){
			ans.A[i][j] = a * obj.A[i][j];
		}
	}
	return(ans);
}

// mat78 * double
inline mat78 operator*(mat78 obj, double a)
{
	int i, j;
	mat78 ans;
	for(i=0; i<7; i++){
		for(j=0; j<8; j++){
			ans.A[i][j] = obj.A[i][j] * a;
		}
	}
	return(ans);
}

// vec7 * mat78
inline vec8 operator*(vec7 obj1, mat78 obj2)
{
	int i, j;
	vec8 ans;
	for(i=0; i<8; i++){
		ans.x[i] = 0.0;
		for(j=0; j<7; j++){
			ans.x[i] += obj1.x[j] * obj2.A[j][i];
		}
	}
	return(ans);
}

// mat78 * vec8
inline vec7 operator*(mat78 obj1, vec8 obj2)
{
	int i, j;
	vec7 ans;
	for(i=0; i<7; i++){
		ans.x[i] = 0.0;
		for(j=0; j<8; j++){
			ans.x[i] += obj1.A[i][j] * obj2.x[j];
		}
	}
	return(ans);
}

// Extract row vector
inline vec8 mat78::row(int num)
{
	int i;
	vec8 ans;
	for(i=0; i<8; i++) ans.x[i] = A[num][i];
	return(ans);
}

// Extract column vector
inline vec7 mat78::col(int num)
{
	int i;
	vec7 ans;
	for(i=0; i<7; i++) ans.x[i] = A[i][num];
	return(ans);
}

// Set number into (i, j) element
inline void mat78::set(int i, int j, double x){ A[i][j] = x; }

// Set row vector of the specified number
inline void mat78::row_set(int num, vec8 obj)
{
	int i;
	for(i=0; i<8; i++) A[num][i] = obj.x[i];
}

// Set row vector of the specified number
inline void mat78::row_set(int num, double x0, double x1, double x2, double x3, double x4, double x5, double x6, double x7)
{
	A[num][0] = x0; A[num][1] = x1; A[num][2] = x2; A[num][3] = x3; A[num][4] = x4; A[num][5] = x5; A[num][6] = x6; A[num][7] = x7; 
}

// Set column vector of the specified number
inline void mat78::col_set(int num, vec7 obj)
{
	int i;
	for(i=0; i<7; i++) A[i][num] = obj.x[i];
}

// Set column vector of the specified number
inline void mat78::col_set(int num, double x0, double x1, double x2, double x3, double x4, double x5, double x6, double x7)
{
	A[0][num] = x0; A[1][num] = x1; A[2][num] = x2; A[3][num] = x3; A[4][num] = x4; A[5][num] = x5; A[6][num] = x6; A[7][num] = x7; 
}

// Return transposed matrix
inline mat87 mat78::trans(void)
{
	int i, j; mat87 ans;
	for(i=0; i<c; i++) for(j=0; j<r; j++) ans.A[i][j] = A[j][i];
	return(ans);
}

// Overload of '+' operator --------------------------------------------------//
// mat79 + mat79
inline mat79 operator+(mat79 obj1, mat79 obj2)
{
	int i, j;
	mat79 ans;
	for(i=0; i<7; i++){
		for(j=0; j<9; j++){
			ans.A[i][j] = obj1.A[i][j] + obj2.A[i][j];
		}
	}
	return(ans);
}

// Overload of '-' operator --------------------------------------------------//
// mat79 - mat79
inline mat79 operator-(mat79 obj1, mat79 obj2)
{
	int i, j;
	mat79 ans;
	for(i=0; i<7; i++){
		for(j=0; j<9; j++){
			ans.A[i][j] = obj1.A[i][j] - obj2.A[i][j];
		}
	}
	return(ans);
}

// Overload of '-' operator(-mat79)
inline mat79 operator-(mat79 obj)
{
	int i, j;
	mat79 ans;
	for(i=0; i<7; i++) for(j=0; j<9; j++) ans.A[i][j] = -obj.A[i][j];
	return(ans);
}

// Overload of '*' operator --------------------------------------------------//
// double * mat79
inline mat79 operator*(double a, mat79 obj)
{
	int i, j;
	mat79 ans;
	for(i=0; i<7; i++){
		for(j=0; j<9; j++){
			ans.A[i][j] = a * obj.A[i][j];
		}
	}
	return(ans);
}

// mat79 * double
inline mat79 operator*(mat79 obj, double a)
{
	int i, j;
	mat79 ans;
	for(i=0; i<7; i++){
		for(j=0; j<9; j++){
			ans.A[i][j] = obj.A[i][j] * a;
		}
	}
	return(ans);
}

// vec7 * mat79
inline vec9 operator*(vec7 obj1, mat79 obj2)
{
	int i, j;
	vec9 ans;
	for(i=0; i<9; i++){
		ans.x[i] = 0.0;
		for(j=0; j<7; j++){
			ans.x[i] += obj1.x[j] * obj2.A[j][i];
		}
	}
	return(ans);
}

// mat79 * vec9
inline vec7 operator*(mat79 obj1, vec9 obj2)
{
	int i, j;
	vec7 ans;
	for(i=0; i<7; i++){
		ans.x[i] = 0.0;
		for(j=0; j<9; j++){
			ans.x[i] += obj1.A[i][j] * obj2.x[j];
		}
	}
	return(ans);
}

// Extract row vector
inline vec9 mat79::row(int num)
{
	int i;
	vec9 ans;
	for(i=0; i<9; i++) ans.x[i] = A[num][i];
	return(ans);
}

// Extract column vector
inline vec7 mat79::col(int num)
{
	int i;
	vec7 ans;
	for(i=0; i<7; i++) ans.x[i] = A[i][num];
	return(ans);
}

// Set number into (i, j) element
inline void mat79::set(int i, int j, double x){ A[i][j] = x; }

// Set row vector of the specified number
inline void mat79::row_set(int num, vec9 obj)
{
	int i;
	for(i=0; i<9; i++) A[num][i] = obj.x[i];
}

// Set row vector of the specified number
inline void mat79::row_set(int num, double x0, double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8)
{
	A[num][0] = x0; A[num][1] = x1; A[num][2] = x2; A[num][3] = x3; A[num][4] = x4; A[num][5] = x5; A[num][6] = x6; A[num][7] = x7; A[num][8] = x8; 
}

// Set column vector of the specified number
inline void mat79::col_set(int num, vec7 obj)
{
	int i;
	for(i=0; i<7; i++) A[i][num] = obj.x[i];
}

// Set column vector of the specified number
inline void mat79::col_set(int num, double x0, double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8)
{
	A[0][num] = x0; A[1][num] = x1; A[2][num] = x2; A[3][num] = x3; A[4][num] = x4; A[5][num] = x5; A[6][num] = x6; A[7][num] = x7; A[8][num] = x8; 
}

// Return transposed matrix
inline mat97 mat79::trans(void)
{
	int i, j; mat97 ans;
	for(i=0; i<c; i++) for(j=0; j<r; j++) ans.A[i][j] = A[j][i];
	return(ans);
}

// Overload of '+' operator --------------------------------------------------//
// mat82 + mat82
inline mat82 operator+(mat82 obj1, mat82 obj2)
{
	int i, j;
	mat82 ans;
	for(i=0; i<8; i++){
		for(j=0; j<2; j++){
			ans.A[i][j] = obj1.A[i][j] + obj2.A[i][j];
		}
	}
	return(ans);
}

// Overload of '-' operator --------------------------------------------------//
// mat82 - mat82
inline mat82 operator-(mat82 obj1, mat82 obj2)
{
	int i, j;
	mat82 ans;
	for(i=0; i<8; i++){
		for(j=0; j<2; j++){
			ans.A[i][j] = obj1.A[i][j] - obj2.A[i][j];
		}
	}
	return(ans);
}

// Overload of '-' operator(-mat82)
inline mat82 operator-(mat82 obj)
{
	int i, j;
	mat82 ans;
	for(i=0; i<8; i++) for(j=0; j<2; j++) ans.A[i][j] = -obj.A[i][j];
	return(ans);
}

// Overload of '*' operator --------------------------------------------------//
// double * mat82
inline mat82 operator*(double a, mat82 obj)
{
	int i, j;
	mat82 ans;
	for(i=0; i<8; i++){
		for(j=0; j<2; j++){
			ans.A[i][j] = a * obj.A[i][j];
		}
	}
	return(ans);
}

// mat82 * double
inline mat82 operator*(mat82 obj, double a)
{
	int i, j;
	mat82 ans;
	for(i=0; i<8; i++){
		for(j=0; j<2; j++){
			ans.A[i][j] = obj.A[i][j] * a;
		}
	}
	return(ans);
}

// vec8 * mat82
inline vec2 operator*(vec8 obj1, mat82 obj2)
{
	int i, j;
	vec2 ans;
	for(i=0; i<2; i++){
		ans.x[i] = 0.0;
		for(j=0; j<8; j++){
			ans.x[i] += obj1.x[j] * obj2.A[j][i];
		}
	}
	return(ans);
}

// mat82 * vec2
inline vec8 operator*(mat82 obj1, vec2 obj2)
{
	int i, j;
	vec8 ans;
	for(i=0; i<8; i++){
		ans.x[i] = 0.0;
		for(j=0; j<2; j++){
			ans.x[i] += obj1.A[i][j] * obj2.x[j];
		}
	}
	return(ans);
}

// Extract row vector
inline vec2 mat82::row(int num)
{
	int i;
	vec2 ans;
	for(i=0; i<2; i++) ans.x[i] = A[num][i];
	return(ans);
}

// Extract column vector
inline vec8 mat82::col(int num)
{
	int i;
	vec8 ans;
	for(i=0; i<8; i++) ans.x[i] = A[i][num];
	return(ans);
}

// Set number into (i, j) element
inline void mat82::set(int i, int j, double x){ A[i][j] = x; }

// Set row vector of the specified number
inline void mat82::row_set(int num, vec2 obj)
{
	int i;
	for(i=0; i<2; i++) A[num][i] = obj.x[i];
}

// Set row vector of the specified number
inline void mat82::row_set(int num, double x0, double x1)
{
	A[num][0] = x0; A[num][1] = x1; 
}

// Set column vector of the specified number
inline void mat82::col_set(int num, vec8 obj)
{
	int i;
	for(i=0; i<8; i++) A[i][num] = obj.x[i];
}

// Set column vector of the specified number
inline void mat82::col_set(int num, double x0, double x1)
{
	A[0][num] = x0; A[1][num] = x1; 
}

// Return transposed matrix
inline mat28 mat82::trans(void)
{
	int i, j; mat28 ans;
	for(i=0; i<c; i++) for(j=0; j<r; j++) ans.A[i][j] = A[j][i];
	return(ans);
}

// Overload of '+' operator --------------------------------------------------//
// mat83 + mat83
inline mat83 operator+(mat83 obj1, mat83 obj2)
{
	int i, j;
	mat83 ans;
	for(i=0; i<8; i++){
		for(j=0; j<3; j++){
			ans.A[i][j] = obj1.A[i][j] + obj2.A[i][j];
		}
	}
	return(ans);
}

// Overload of '-' operator --------------------------------------------------//
// mat83 - mat83
inline mat83 operator-(mat83 obj1, mat83 obj2)
{
	int i, j;
	mat83 ans;
	for(i=0; i<8; i++){
		for(j=0; j<3; j++){
			ans.A[i][j] = obj1.A[i][j] - obj2.A[i][j];
		}
	}
	return(ans);
}

// Overload of '-' operator(-mat83)
inline mat83 operator-(mat83 obj)
{
	int i, j;
	mat83 ans;
	for(i=0; i<8; i++) for(j=0; j<3; j++) ans.A[i][j] = -obj.A[i][j];
	return(ans);
}

// Overload of '*' operator --------------------------------------------------//
// double * mat83
inline mat83 operator*(double a, mat83 obj)
{
	int i, j;
	mat83 ans;
	for(i=0; i<8; i++){
		for(j=0; j<3; j++){
			ans.A[i][j] = a * obj.A[i][j];
		}
	}
	return(ans);
}

// mat83 * double
inline mat83 operator*(mat83 obj, double a)
{
	int i, j;
	mat83 ans;
	for(i=0; i<8; i++){
		for(j=0; j<3; j++){
			ans.A[i][j] = obj.A[i][j] * a;
		}
	}
	return(ans);
}

// vec8 * mat83
inline vec3 operator*(vec8 obj1, mat83 obj2)
{
	int i, j;
	vec3 ans;
	for(i=0; i<3; i++){
		ans.x[i] = 0.0;
		for(j=0; j<8; j++){
			ans.x[i] += obj1.x[j] * obj2.A[j][i];
		}
	}
	return(ans);
}

// mat83 * vec3
inline vec8 operator*(mat83 obj1, vec3 obj2)
{
	int i, j;
	vec8 ans;
	for(i=0; i<8; i++){
		ans.x[i] = 0.0;
		for(j=0; j<3; j++){
			ans.x[i] += obj1.A[i][j] * obj2.x[j];
		}
	}
	return(ans);
}

// Extract row vector
inline vec3 mat83::row(int num)
{
	int i;
	vec3 ans;
	for(i=0; i<3; i++) ans.x[i] = A[num][i];
	return(ans);
}

// Extract column vector
inline vec8 mat83::col(int num)
{
	int i;
	vec8 ans;
	for(i=0; i<8; i++) ans.x[i] = A[i][num];
	return(ans);
}

// Set number into (i, j) element
inline void mat83::set(int i, int j, double x){ A[i][j] = x; }

// Set row vector of the specified number
inline void mat83::row_set(int num, vec3 obj)
{
	int i;
	for(i=0; i<3; i++) A[num][i] = obj.x[i];
}

// Set row vector of the specified number
inline void mat83::row_set(int num, double x0, double x1, double x2)
{
	A[num][0] = x0; A[num][1] = x1; A[num][2] = x2; 
}

// Set column vector of the specified number
inline void mat83::col_set(int num, vec8 obj)
{
	int i;
	for(i=0; i<8; i++) A[i][num] = obj.x[i];
}

// Set column vector of the specified number
inline void mat83::col_set(int num, double x0, double x1, double x2)
{
	A[0][num] = x0; A[1][num] = x1; A[2][num] = x2; 
}

// Return transposed matrix
inline mat38 mat83::trans(void)
{
	int i, j; mat38 ans;
	for(i=0; i<c; i++) for(j=0; j<r; j++) ans.A[i][j] = A[j][i];
	return(ans);
}

// Overload of '+' operator --------------------------------------------------//
// mat84 + mat84
inline mat84 operator+(mat84 obj1, mat84 obj2)
{
	int i, j;
	mat84 ans;
	for(i=0; i<8; i++){
		for(j=0; j<4; j++){
			ans.A[i][j] = obj1.A[i][j] + obj2.A[i][j];
		}
	}
	return(ans);
}

// Overload of '-' operator --------------------------------------------------//
// mat84 - mat84
inline mat84 operator-(mat84 obj1, mat84 obj2)
{
	int i, j;
	mat84 ans;
	for(i=0; i<8; i++){
		for(j=0; j<4; j++){
			ans.A[i][j] = obj1.A[i][j] - obj2.A[i][j];
		}
	}
	return(ans);
}

// Overload of '-' operator(-mat84)
inline mat84 operator-(mat84 obj)
{
	int i, j;
	mat84 ans;
	for(i=0; i<8; i++) for(j=0; j<4; j++) ans.A[i][j] = -obj.A[i][j];
	return(ans);
}

// Overload of '*' operator --------------------------------------------------//
// double * mat84
inline mat84 operator*(double a, mat84 obj)
{
	int i, j;
	mat84 ans;
	for(i=0; i<8; i++){
		for(j=0; j<4; j++){
			ans.A[i][j] = a * obj.A[i][j];
		}
	}
	return(ans);
}

// mat84 * double
inline mat84 operator*(mat84 obj, double a)
{
	int i, j;
	mat84 ans;
	for(i=0; i<8; i++){
		for(j=0; j<4; j++){
			ans.A[i][j] = obj.A[i][j] * a;
		}
	}
	return(ans);
}

// vec8 * mat84
inline vec4 operator*(vec8 obj1, mat84 obj2)
{
	int i, j;
	vec4 ans;
	for(i=0; i<4; i++){
		ans.x[i] = 0.0;
		for(j=0; j<8; j++){
			ans.x[i] += obj1.x[j] * obj2.A[j][i];
		}
	}
	return(ans);
}

// mat84 * vec4
inline vec8 operator*(mat84 obj1, vec4 obj2)
{
	int i, j;
	vec8 ans;
	for(i=0; i<8; i++){
		ans.x[i] = 0.0;
		for(j=0; j<4; j++){
			ans.x[i] += obj1.A[i][j] * obj2.x[j];
		}
	}
	return(ans);
}

// Extract row vector
inline vec4 mat84::row(int num)
{
	int i;
	vec4 ans;
	for(i=0; i<4; i++) ans.x[i] = A[num][i];
	return(ans);
}

// Extract column vector
inline vec8 mat84::col(int num)
{
	int i;
	vec8 ans;
	for(i=0; i<8; i++) ans.x[i] = A[i][num];
	return(ans);
}

// Set number into (i, j) element
inline void mat84::set(int i, int j, double x){ A[i][j] = x; }

// Set row vector of the specified number
inline void mat84::row_set(int num, vec4 obj)
{
	int i;
	for(i=0; i<4; i++) A[num][i] = obj.x[i];
}

// Set row vector of the specified number
inline void mat84::row_set(int num, double x0, double x1, double x2, double x3)
{
	A[num][0] = x0; A[num][1] = x1; A[num][2] = x2; A[num][3] = x3; 
}

// Set column vector of the specified number
inline void mat84::col_set(int num, vec8 obj)
{
	int i;
	for(i=0; i<8; i++) A[i][num] = obj.x[i];
}

// Set column vector of the specified number
inline void mat84::col_set(int num, double x0, double x1, double x2, double x3)
{
	A[0][num] = x0; A[1][num] = x1; A[2][num] = x2; A[3][num] = x3; 
}

// Return transposed matrix
inline mat48 mat84::trans(void)
{
	int i, j; mat48 ans;
	for(i=0; i<c; i++) for(j=0; j<r; j++) ans.A[i][j] = A[j][i];
	return(ans);
}

// Overload of '+' operator --------------------------------------------------//
// mat85 + mat85
inline mat85 operator+(mat85 obj1, mat85 obj2)
{
	int i, j;
	mat85 ans;
	for(i=0; i<8; i++){
		for(j=0; j<5; j++){
			ans.A[i][j] = obj1.A[i][j] + obj2.A[i][j];
		}
	}
	return(ans);
}

// Overload of '-' operator --------------------------------------------------//
// mat85 - mat85
inline mat85 operator-(mat85 obj1, mat85 obj2)
{
	int i, j;
	mat85 ans;
	for(i=0; i<8; i++){
		for(j=0; j<5; j++){
			ans.A[i][j] = obj1.A[i][j] - obj2.A[i][j];
		}
	}
	return(ans);
}

// Overload of '-' operator(-mat85)
inline mat85 operator-(mat85 obj)
{
	int i, j;
	mat85 ans;
	for(i=0; i<8; i++) for(j=0; j<5; j++) ans.A[i][j] = -obj.A[i][j];
	return(ans);
}

// Overload of '*' operator --------------------------------------------------//
// double * mat85
inline mat85 operator*(double a, mat85 obj)
{
	int i, j;
	mat85 ans;
	for(i=0; i<8; i++){
		for(j=0; j<5; j++){
			ans.A[i][j] = a * obj.A[i][j];
		}
	}
	return(ans);
}

// mat85 * double
inline mat85 operator*(mat85 obj, double a)
{
	int i, j;
	mat85 ans;
	for(i=0; i<8; i++){
		for(j=0; j<5; j++){
			ans.A[i][j] = obj.A[i][j] * a;
		}
	}
	return(ans);
}

// vec8 * mat85
inline vec5 operator*(vec8 obj1, mat85 obj2)
{
	int i, j;
	vec5 ans;
	for(i=0; i<5; i++){
		ans.x[i] = 0.0;
		for(j=0; j<8; j++){
			ans.x[i] += obj1.x[j] * obj2.A[j][i];
		}
	}
	return(ans);
}

// mat85 * vec5
inline vec8 operator*(mat85 obj1, vec5 obj2)
{
	int i, j;
	vec8 ans;
	for(i=0; i<8; i++){
		ans.x[i] = 0.0;
		for(j=0; j<5; j++){
			ans.x[i] += obj1.A[i][j] * obj2.x[j];
		}
	}
	return(ans);
}

// Extract row vector
inline vec5 mat85::row(int num)
{
	int i;
	vec5 ans;
	for(i=0; i<5; i++) ans.x[i] = A[num][i];
	return(ans);
}

// Extract column vector
inline vec8 mat85::col(int num)
{
	int i;
	vec8 ans;
	for(i=0; i<8; i++) ans.x[i] = A[i][num];
	return(ans);
}

// Set number into (i, j) element
inline void mat85::set(int i, int j, double x){ A[i][j] = x; }

// Set row vector of the specified number
inline void mat85::row_set(int num, vec5 obj)
{
	int i;
	for(i=0; i<5; i++) A[num][i] = obj.x[i];
}

// Set row vector of the specified number
inline void mat85::row_set(int num, double x0, double x1, double x2, double x3, double x4)
{
	A[num][0] = x0; A[num][1] = x1; A[num][2] = x2; A[num][3] = x3; A[num][4] = x4; 
}

// Set column vector of the specified number
inline void mat85::col_set(int num, vec8 obj)
{
	int i;
	for(i=0; i<8; i++) A[i][num] = obj.x[i];
}

// Set column vector of the specified number
inline void mat85::col_set(int num, double x0, double x1, double x2, double x3, double x4)
{
	A[0][num] = x0; A[1][num] = x1; A[2][num] = x2; A[3][num] = x3; A[4][num] = x4; 
}

// Return transposed matrix
inline mat58 mat85::trans(void)
{
	int i, j; mat58 ans;
	for(i=0; i<c; i++) for(j=0; j<r; j++) ans.A[i][j] = A[j][i];
	return(ans);
}

// Overload of '+' operator --------------------------------------------------//
// mat86 + mat86
inline mat86 operator+(mat86 obj1, mat86 obj2)
{
	int i, j;
	mat86 ans;
	for(i=0; i<8; i++){
		for(j=0; j<6; j++){
			ans.A[i][j] = obj1.A[i][j] + obj2.A[i][j];
		}
	}
	return(ans);
}

// Overload of '-' operator --------------------------------------------------//
// mat86 - mat86
inline mat86 operator-(mat86 obj1, mat86 obj2)
{
	int i, j;
	mat86 ans;
	for(i=0; i<8; i++){
		for(j=0; j<6; j++){
			ans.A[i][j] = obj1.A[i][j] - obj2.A[i][j];
		}
	}
	return(ans);
}

// Overload of '-' operator(-mat86)
inline mat86 operator-(mat86 obj)
{
	int i, j;
	mat86 ans;
	for(i=0; i<8; i++) for(j=0; j<6; j++) ans.A[i][j] = -obj.A[i][j];
	return(ans);
}

// Overload of '*' operator --------------------------------------------------//
// double * mat86
inline mat86 operator*(double a, mat86 obj)
{
	int i, j;
	mat86 ans;
	for(i=0; i<8; i++){
		for(j=0; j<6; j++){
			ans.A[i][j] = a * obj.A[i][j];
		}
	}
	return(ans);
}

// mat86 * double
inline mat86 operator*(mat86 obj, double a)
{
	int i, j;
	mat86 ans;
	for(i=0; i<8; i++){
		for(j=0; j<6; j++){
			ans.A[i][j] = obj.A[i][j] * a;
		}
	}
	return(ans);
}

// vec8 * mat86
inline vec6 operator*(vec8 obj1, mat86 obj2)
{
	int i, j;
	vec6 ans;
	for(i=0; i<6; i++){
		ans.x[i] = 0.0;
		for(j=0; j<8; j++){
			ans.x[i] += obj1.x[j] * obj2.A[j][i];
		}
	}
	return(ans);
}

// mat86 * vec6
inline vec8 operator*(mat86 obj1, vec6 obj2)
{
	int i, j;
	vec8 ans;
	for(i=0; i<8; i++){
		ans.x[i] = 0.0;
		for(j=0; j<6; j++){
			ans.x[i] += obj1.A[i][j] * obj2.x[j];
		}
	}
	return(ans);
}

// Extract row vector
inline vec6 mat86::row(int num)
{
	int i;
	vec6 ans;
	for(i=0; i<6; i++) ans.x[i] = A[num][i];
	return(ans);
}

// Extract column vector
inline vec8 mat86::col(int num)
{
	int i;
	vec8 ans;
	for(i=0; i<8; i++) ans.x[i] = A[i][num];
	return(ans);
}

// Set number into (i, j) element
inline void mat86::set(int i, int j, double x){ A[i][j] = x; }

// Set row vector of the specified number
inline void mat86::row_set(int num, vec6 obj)
{
	int i;
	for(i=0; i<6; i++) A[num][i] = obj.x[i];
}

// Set row vector of the specified number
inline void mat86::row_set(int num, double x0, double x1, double x2, double x3, double x4, double x5)
{
	A[num][0] = x0; A[num][1] = x1; A[num][2] = x2; A[num][3] = x3; A[num][4] = x4; A[num][5] = x5; 
}

// Set column vector of the specified number
inline void mat86::col_set(int num, vec8 obj)
{
	int i;
	for(i=0; i<8; i++) A[i][num] = obj.x[i];
}

// Set column vector of the specified number
inline void mat86::col_set(int num, double x0, double x1, double x2, double x3, double x4, double x5)
{
	A[0][num] = x0; A[1][num] = x1; A[2][num] = x2; A[3][num] = x3; A[4][num] = x4; A[5][num] = x5; 
}

// Return transposed matrix
inline mat68 mat86::trans(void)
{
	int i, j; mat68 ans;
	for(i=0; i<c; i++) for(j=0; j<r; j++) ans.A[i][j] = A[j][i];
	return(ans);
}

// Overload of '+' operator --------------------------------------------------//
// mat87 + mat87
inline mat87 operator+(mat87 obj1, mat87 obj2)
{
	int i, j;
	mat87 ans;
	for(i=0; i<8; i++){
		for(j=0; j<7; j++){
			ans.A[i][j] = obj1.A[i][j] + obj2.A[i][j];
		}
	}
	return(ans);
}

// Overload of '-' operator --------------------------------------------------//
// mat87 - mat87
inline mat87 operator-(mat87 obj1, mat87 obj2)
{
	int i, j;
	mat87 ans;
	for(i=0; i<8; i++){
		for(j=0; j<7; j++){
			ans.A[i][j] = obj1.A[i][j] - obj2.A[i][j];
		}
	}
	return(ans);
}

// Overload of '-' operator(-mat87)
inline mat87 operator-(mat87 obj)
{
	int i, j;
	mat87 ans;
	for(i=0; i<8; i++) for(j=0; j<7; j++) ans.A[i][j] = -obj.A[i][j];
	return(ans);
}

// Overload of '*' operator --------------------------------------------------//
// double * mat87
inline mat87 operator*(double a, mat87 obj)
{
	int i, j;
	mat87 ans;
	for(i=0; i<8; i++){
		for(j=0; j<7; j++){
			ans.A[i][j] = a * obj.A[i][j];
		}
	}
	return(ans);
}

// mat87 * double
inline mat87 operator*(mat87 obj, double a)
{
	int i, j;
	mat87 ans;
	for(i=0; i<8; i++){
		for(j=0; j<7; j++){
			ans.A[i][j] = obj.A[i][j] * a;
		}
	}
	return(ans);
}

// vec8 * mat87
inline vec7 operator*(vec8 obj1, mat87 obj2)
{
	int i, j;
	vec7 ans;
	for(i=0; i<7; i++){
		ans.x[i] = 0.0;
		for(j=0; j<8; j++){
			ans.x[i] += obj1.x[j] * obj2.A[j][i];
		}
	}
	return(ans);
}

// mat87 * vec7
inline vec8 operator*(mat87 obj1, vec7 obj2)
{
	int i, j;
	vec8 ans;
	for(i=0; i<8; i++){
		ans.x[i] = 0.0;
		for(j=0; j<7; j++){
			ans.x[i] += obj1.A[i][j] * obj2.x[j];
		}
	}
	return(ans);
}

// Extract row vector
inline vec7 mat87::row(int num)
{
	int i;
	vec7 ans;
	for(i=0; i<7; i++) ans.x[i] = A[num][i];
	return(ans);
}

// Extract column vector
inline vec8 mat87::col(int num)
{
	int i;
	vec8 ans;
	for(i=0; i<8; i++) ans.x[i] = A[i][num];
	return(ans);
}

// Set number into (i, j) element
inline void mat87::set(int i, int j, double x){ A[i][j] = x; }

// Set row vector of the specified number
inline void mat87::row_set(int num, vec7 obj)
{
	int i;
	for(i=0; i<7; i++) A[num][i] = obj.x[i];
}

// Set row vector of the specified number
inline void mat87::row_set(int num, double x0, double x1, double x2, double x3, double x4, double x5, double x6)
{
	A[num][0] = x0; A[num][1] = x1; A[num][2] = x2; A[num][3] = x3; A[num][4] = x4; A[num][5] = x5; A[num][6] = x6; 
}

// Set column vector of the specified number
inline void mat87::col_set(int num, vec8 obj)
{
	int i;
	for(i=0; i<8; i++) A[i][num] = obj.x[i];
}

// Set column vector of the specified number
inline void mat87::col_set(int num, double x0, double x1, double x2, double x3, double x4, double x5, double x6)
{
	A[0][num] = x0; A[1][num] = x1; A[2][num] = x2; A[3][num] = x3; A[4][num] = x4; A[5][num] = x5; A[6][num] = x6; 
}

// Return transposed matrix
inline mat78 mat87::trans(void)
{
	int i, j; mat78 ans;
	for(i=0; i<c; i++) for(j=0; j<r; j++) ans.A[i][j] = A[j][i];
	return(ans);
}

// Overload of '+' operator --------------------------------------------------//
// mat88 + mat88
inline mat88 operator+(mat88 obj1, mat88 obj2)
{
	int i, j;
	mat88 ans;
	for(i=0; i<8; i++){
		for(j=0; j<8; j++){
			ans.A[i][j] = obj1.A[i][j] + obj2.A[i][j];
		}
	}
	return(ans);
}

// Overload of '-' operator --------------------------------------------------//
// mat88 - mat88
inline mat88 operator-(mat88 obj1, mat88 obj2)
{
	int i, j;
	mat88 ans;
	for(i=0; i<8; i++){
		for(j=0; j<8; j++){
			ans.A[i][j] = obj1.A[i][j] - obj2.A[i][j];
		}
	}
	return(ans);
}

// Overload of '-' operator(-mat88)
inline mat88 operator-(mat88 obj)
{
	int i, j;
	mat88 ans;
	for(i=0; i<8; i++) for(j=0; j<8; j++) ans.A[i][j] = -obj.A[i][j];
	return(ans);
}

// Overload of '*' operator --------------------------------------------------//
// double * mat88
inline mat88 operator*(double a, mat88 obj)
{
	int i, j;
	mat88 ans;
	for(i=0; i<8; i++){
		for(j=0; j<8; j++){
			ans.A[i][j] = a * obj.A[i][j];
		}
	}
	return(ans);
}

// mat88 * double
inline mat88 operator*(mat88 obj, double a)
{
	int i, j;
	mat88 ans;
	for(i=0; i<8; i++){
		for(j=0; j<8; j++){
			ans.A[i][j] = obj.A[i][j] * a;
		}
	}
	return(ans);
}

// vec8 * mat88
inline vec8 operator*(vec8 obj1, mat88 obj2)
{
	int i, j;
	vec8 ans;
	for(i=0; i<8; i++){
		ans.x[i] = 0.0;
		for(j=0; j<8; j++){
			ans.x[i] += obj1.x[j] * obj2.A[j][i];
		}
	}
	return(ans);
}

// mat88 * vec8
inline vec8 operator*(mat88 obj1, vec8 obj2)
{
	int i, j;
	vec8 ans;
	for(i=0; i<8; i++){
		ans.x[i] = 0.0;
		for(j=0; j<8; j++){
			ans.x[i] += obj1.A[i][j] * obj2.x[j];
		}
	}
	return(ans);
}

// Extract row vector
inline vec8 mat88::row(int num)
{
	int i;
	vec8 ans;
	for(i=0; i<8; i++) ans.x[i] = A[num][i];
	return(ans);
}

// Extract column vector
inline vec8 mat88::col(int num)
{
	int i;
	vec8 ans;
	for(i=0; i<8; i++) ans.x[i] = A[i][num];
	return(ans);
}

// Set number into (i, j) element
inline void mat88::set(int i, int j, double x){ A[i][j] = x; }

// Set row vector of the specified number
inline void mat88::row_set(int num, vec8 obj)
{
	int i;
	for(i=0; i<8; i++) A[num][i] = obj.x[i];
}

// Set row vector of the specified number
inline void mat88::row_set(int num, double x0, double x1, double x2, double x3, double x4, double x5, double x6, double x7)
{
	A[num][0] = x0; A[num][1] = x1; A[num][2] = x2; A[num][3] = x3; A[num][4] = x4; A[num][5] = x5; A[num][6] = x6; A[num][7] = x7; 
}

// Set column vector of the specified number
inline void mat88::col_set(int num, vec8 obj)
{
	int i;
	for(i=0; i<8; i++) A[i][num] = obj.x[i];
}

// Set column vector of the specified number
inline void mat88::col_set(int num, double x0, double x1, double x2, double x3, double x4, double x5, double x6, double x7)
{
	A[0][num] = x0; A[1][num] = x1; A[2][num] = x2; A[3][num] = x3; A[4][num] = x4; A[5][num] = x5; A[6][num] = x6; A[7][num] = x7; 
}

// Return transposed matrix
inline mat88 mat88::trans(void)
{
	int i, j; mat88 ans;
	for(i=0; i<c; i++) for(j=0; j<r; j++) ans.A[i][j] = A[j][i];
	return(ans);
}

// Overload of '+' operator --------------------------------------------------//
// mat89 + mat89
inline mat89 operator+(mat89 obj1, mat89 obj2)
{
	int i, j;
	mat89 ans;
	for(i=0; i<8; i++){
		for(j=0; j<9; j++){
			ans.A[i][j] = obj1.A[i][j] + obj2.A[i][j];
		}
	}
	return(ans);
}

// Overload of '-' operator --------------------------------------------------//
// mat89 - mat89
inline mat89 operator-(mat89 obj1, mat89 obj2)
{
	int i, j;
	mat89 ans;
	for(i=0; i<8; i++){
		for(j=0; j<9; j++){
			ans.A[i][j] = obj1.A[i][j] - obj2.A[i][j];
		}
	}
	return(ans);
}

// Overload of '-' operator(-mat89)
inline mat89 operator-(mat89 obj)
{
	int i, j;
	mat89 ans;
	for(i=0; i<8; i++) for(j=0; j<9; j++) ans.A[i][j] = -obj.A[i][j];
	return(ans);
}

// Overload of '*' operator --------------------------------------------------//
// double * mat89
inline mat89 operator*(double a, mat89 obj)
{
	int i, j;
	mat89 ans;
	for(i=0; i<8; i++){
		for(j=0; j<9; j++){
			ans.A[i][j] = a * obj.A[i][j];
		}
	}
	return(ans);
}

// mat89 * double
inline mat89 operator*(mat89 obj, double a)
{
	int i, j;
	mat89 ans;
	for(i=0; i<8; i++){
		for(j=0; j<9; j++){
			ans.A[i][j] = obj.A[i][j] * a;
		}
	}
	return(ans);
}

// vec8 * mat89
inline vec9 operator*(vec8 obj1, mat89 obj2)
{
	int i, j;
	vec9 ans;
	for(i=0; i<9; i++){
		ans.x[i] = 0.0;
		for(j=0; j<8; j++){
			ans.x[i] += obj1.x[j] * obj2.A[j][i];
		}
	}
	return(ans);
}

// mat89 * vec9
inline vec8 operator*(mat89 obj1, vec9 obj2)
{
	int i, j;
	vec8 ans;
	for(i=0; i<8; i++){
		ans.x[i] = 0.0;
		for(j=0; j<9; j++){
			ans.x[i] += obj1.A[i][j] * obj2.x[j];
		}
	}
	return(ans);
}

// Extract row vector
inline vec9 mat89::row(int num)
{
	int i;
	vec9 ans;
	for(i=0; i<9; i++) ans.x[i] = A[num][i];
	return(ans);
}

// Extract column vector
inline vec8 mat89::col(int num)
{
	int i;
	vec8 ans;
	for(i=0; i<8; i++) ans.x[i] = A[i][num];
	return(ans);
}

// Set number into (i, j) element
inline void mat89::set(int i, int j, double x){ A[i][j] = x; }

// Set row vector of the specified number
inline void mat89::row_set(int num, vec9 obj)
{
	int i;
	for(i=0; i<9; i++) A[num][i] = obj.x[i];
}

// Set row vector of the specified number
inline void mat89::row_set(int num, double x0, double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8)
{
	A[num][0] = x0; A[num][1] = x1; A[num][2] = x2; A[num][3] = x3; A[num][4] = x4; A[num][5] = x5; A[num][6] = x6; A[num][7] = x7; A[num][8] = x8; 
}

// Set column vector of the specified number
inline void mat89::col_set(int num, vec8 obj)
{
	int i;
	for(i=0; i<8; i++) A[i][num] = obj.x[i];
}

// Set column vector of the specified number
inline void mat89::col_set(int num, double x0, double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8)
{
	A[0][num] = x0; A[1][num] = x1; A[2][num] = x2; A[3][num] = x3; A[4][num] = x4; A[5][num] = x5; A[6][num] = x6; A[7][num] = x7; A[8][num] = x8; 
}

// Return transposed matrix
inline mat98 mat89::trans(void)
{
	int i, j; mat98 ans;
	for(i=0; i<c; i++) for(j=0; j<r; j++) ans.A[i][j] = A[j][i];
	return(ans);
}

// Overload of '+' operator --------------------------------------------------//
// mat92 + mat92
inline mat92 operator+(mat92 obj1, mat92 obj2)
{
	int i, j;
	mat92 ans;
	for(i=0; i<9; i++){
		for(j=0; j<2; j++){
			ans.A[i][j] = obj1.A[i][j] + obj2.A[i][j];
		}
	}
	return(ans);
}

// Overload of '-' operator --------------------------------------------------//
// mat92 - mat92
inline mat92 operator-(mat92 obj1, mat92 obj2)
{
	int i, j;
	mat92 ans;
	for(i=0; i<9; i++){
		for(j=0; j<2; j++){
			ans.A[i][j] = obj1.A[i][j] - obj2.A[i][j];
		}
	}
	return(ans);
}

// Overload of '-' operator(-mat92)
inline mat92 operator-(mat92 obj)
{
	int i, j;
	mat92 ans;
	for(i=0; i<9; i++) for(j=0; j<2; j++) ans.A[i][j] = -obj.A[i][j];
	return(ans);
}

// Overload of '*' operator --------------------------------------------------//
// double * mat92
inline mat92 operator*(double a, mat92 obj)
{
	int i, j;
	mat92 ans;
	for(i=0; i<9; i++){
		for(j=0; j<2; j++){
			ans.A[i][j] = a * obj.A[i][j];
		}
	}
	return(ans);
}

// mat92 * double
inline mat92 operator*(mat92 obj, double a)
{
	int i, j;
	mat92 ans;
	for(i=0; i<9; i++){
		for(j=0; j<2; j++){
			ans.A[i][j] = obj.A[i][j] * a;
		}
	}
	return(ans);
}

// vec9 * mat92
inline vec2 operator*(vec9 obj1, mat92 obj2)
{
	int i, j;
	vec2 ans;
	for(i=0; i<2; i++){
		ans.x[i] = 0.0;
		for(j=0; j<9; j++){
			ans.x[i] += obj1.x[j] * obj2.A[j][i];
		}
	}
	return(ans);
}

// mat92 * vec2
inline vec9 operator*(mat92 obj1, vec2 obj2)
{
	int i, j;
	vec9 ans;
	for(i=0; i<9; i++){
		ans.x[i] = 0.0;
		for(j=0; j<2; j++){
			ans.x[i] += obj1.A[i][j] * obj2.x[j];
		}
	}
	return(ans);
}

// Extract row vector
inline vec2 mat92::row(int num)
{
	int i;
	vec2 ans;
	for(i=0; i<2; i++) ans.x[i] = A[num][i];
	return(ans);
}

// Extract column vector
inline vec9 mat92::col(int num)
{
	int i;
	vec9 ans;
	for(i=0; i<9; i++) ans.x[i] = A[i][num];
	return(ans);
}

// Set number into (i, j) element
inline void mat92::set(int i, int j, double x){ A[i][j] = x; }

// Set row vector of the specified number
inline void mat92::row_set(int num, vec2 obj)
{
	int i;
	for(i=0; i<2; i++) A[num][i] = obj.x[i];
}

// Set row vector of the specified number
inline void mat92::row_set(int num, double x0, double x1)
{
	A[num][0] = x0; A[num][1] = x1; 
}

// Set column vector of the specified number
inline void mat92::col_set(int num, vec9 obj)
{
	int i;
	for(i=0; i<9; i++) A[i][num] = obj.x[i];
}

// Set column vector of the specified number
inline void mat92::col_set(int num, double x0, double x1)
{
	A[0][num] = x0; A[1][num] = x1; 
}

// Return transposed matrix
inline mat29 mat92::trans(void)
{
	int i, j; mat29 ans;
	for(i=0; i<c; i++) for(j=0; j<r; j++) ans.A[i][j] = A[j][i];
	return(ans);
}

// Overload of '+' operator --------------------------------------------------//
// mat93 + mat93
inline mat93 operator+(mat93 obj1, mat93 obj2)
{
	int i, j;
	mat93 ans;
	for(i=0; i<9; i++){
		for(j=0; j<3; j++){
			ans.A[i][j] = obj1.A[i][j] + obj2.A[i][j];
		}
	}
	return(ans);
}

// Overload of '-' operator --------------------------------------------------//
// mat93 - mat93
inline mat93 operator-(mat93 obj1, mat93 obj2)
{
	int i, j;
	mat93 ans;
	for(i=0; i<9; i++){
		for(j=0; j<3; j++){
			ans.A[i][j] = obj1.A[i][j] - obj2.A[i][j];
		}
	}
	return(ans);
}

// Overload of '-' operator(-mat93)
inline mat93 operator-(mat93 obj)
{
	int i, j;
	mat93 ans;
	for(i=0; i<9; i++) for(j=0; j<3; j++) ans.A[i][j] = -obj.A[i][j];
	return(ans);
}

// Overload of '*' operator --------------------------------------------------//
// double * mat93
inline mat93 operator*(double a, mat93 obj)
{
	int i, j;
	mat93 ans;
	for(i=0; i<9; i++){
		for(j=0; j<3; j++){
			ans.A[i][j] = a * obj.A[i][j];
		}
	}
	return(ans);
}

// mat93 * double
inline mat93 operator*(mat93 obj, double a)
{
	int i, j;
	mat93 ans;
	for(i=0; i<9; i++){
		for(j=0; j<3; j++){
			ans.A[i][j] = obj.A[i][j] * a;
		}
	}
	return(ans);
}

// vec9 * mat93
inline vec3 operator*(vec9 obj1, mat93 obj2)
{
	int i, j;
	vec3 ans;
	for(i=0; i<3; i++){
		ans.x[i] = 0.0;
		for(j=0; j<9; j++){
			ans.x[i] += obj1.x[j] * obj2.A[j][i];
		}
	}
	return(ans);
}

// mat93 * vec3
inline vec9 operator*(mat93 obj1, vec3 obj2)
{
	int i, j;
	vec9 ans;
	for(i=0; i<9; i++){
		ans.x[i] = 0.0;
		for(j=0; j<3; j++){
			ans.x[i] += obj1.A[i][j] * obj2.x[j];
		}
	}
	return(ans);
}

// Extract row vector
inline vec3 mat93::row(int num)
{
	int i;
	vec3 ans;
	for(i=0; i<3; i++) ans.x[i] = A[num][i];
	return(ans);
}

// Extract column vector
inline vec9 mat93::col(int num)
{
	int i;
	vec9 ans;
	for(i=0; i<9; i++) ans.x[i] = A[i][num];
	return(ans);
}

// Set number into (i, j) element
inline void mat93::set(int i, int j, double x){ A[i][j] = x; }

// Set row vector of the specified number
inline void mat93::row_set(int num, vec3 obj)
{
	int i;
	for(i=0; i<3; i++) A[num][i] = obj.x[i];
}

// Set row vector of the specified number
inline void mat93::row_set(int num, double x0, double x1, double x2)
{
	A[num][0] = x0; A[num][1] = x1; A[num][2] = x2; 
}

// Set column vector of the specified number
inline void mat93::col_set(int num, vec9 obj)
{
	int i;
	for(i=0; i<9; i++) A[i][num] = obj.x[i];
}

// Set column vector of the specified number
inline void mat93::col_set(int num, double x0, double x1, double x2)
{
	A[0][num] = x0; A[1][num] = x1; A[2][num] = x2; 
}

// Return transposed matrix
inline mat39 mat93::trans(void)
{
	int i, j; mat39 ans;
	for(i=0; i<c; i++) for(j=0; j<r; j++) ans.A[i][j] = A[j][i];
	return(ans);
}

// Overload of '+' operator --------------------------------------------------//
// mat94 + mat94
inline mat94 operator+(mat94 obj1, mat94 obj2)
{
	int i, j;
	mat94 ans;
	for(i=0; i<9; i++){
		for(j=0; j<4; j++){
			ans.A[i][j] = obj1.A[i][j] + obj2.A[i][j];
		}
	}
	return(ans);
}

// Overload of '-' operator --------------------------------------------------//
// mat94 - mat94
inline mat94 operator-(mat94 obj1, mat94 obj2)
{
	int i, j;
	mat94 ans;
	for(i=0; i<9; i++){
		for(j=0; j<4; j++){
			ans.A[i][j] = obj1.A[i][j] - obj2.A[i][j];
		}
	}
	return(ans);
}

// Overload of '-' operator(-mat94)
inline mat94 operator-(mat94 obj)
{
	int i, j;
	mat94 ans;
	for(i=0; i<9; i++) for(j=0; j<4; j++) ans.A[i][j] = -obj.A[i][j];
	return(ans);
}

// Overload of '*' operator --------------------------------------------------//
// double * mat94
inline mat94 operator*(double a, mat94 obj)
{
	int i, j;
	mat94 ans;
	for(i=0; i<9; i++){
		for(j=0; j<4; j++){
			ans.A[i][j] = a * obj.A[i][j];
		}
	}
	return(ans);
}

// mat94 * double
inline mat94 operator*(mat94 obj, double a)
{
	int i, j;
	mat94 ans;
	for(i=0; i<9; i++){
		for(j=0; j<4; j++){
			ans.A[i][j] = obj.A[i][j] * a;
		}
	}
	return(ans);
}

// vec9 * mat94
inline vec4 operator*(vec9 obj1, mat94 obj2)
{
	int i, j;
	vec4 ans;
	for(i=0; i<4; i++){
		ans.x[i] = 0.0;
		for(j=0; j<9; j++){
			ans.x[i] += obj1.x[j] * obj2.A[j][i];
		}
	}
	return(ans);
}

// mat94 * vec4
inline vec9 operator*(mat94 obj1, vec4 obj2)
{
	int i, j;
	vec9 ans;
	for(i=0; i<9; i++){
		ans.x[i] = 0.0;
		for(j=0; j<4; j++){
			ans.x[i] += obj1.A[i][j] * obj2.x[j];
		}
	}
	return(ans);
}

// Extract row vector
inline vec4 mat94::row(int num)
{
	int i;
	vec4 ans;
	for(i=0; i<4; i++) ans.x[i] = A[num][i];
	return(ans);
}

// Extract column vector
inline vec9 mat94::col(int num)
{
	int i;
	vec9 ans;
	for(i=0; i<9; i++) ans.x[i] = A[i][num];
	return(ans);
}

// Set number into (i, j) element
inline void mat94::set(int i, int j, double x){ A[i][j] = x; }

// Set row vector of the specified number
inline void mat94::row_set(int num, vec4 obj)
{
	int i;
	for(i=0; i<4; i++) A[num][i] = obj.x[i];
}

// Set row vector of the specified number
inline void mat94::row_set(int num, double x0, double x1, double x2, double x3)
{
	A[num][0] = x0; A[num][1] = x1; A[num][2] = x2; A[num][3] = x3; 
}

// Set column vector of the specified number
inline void mat94::col_set(int num, vec9 obj)
{
	int i;
	for(i=0; i<9; i++) A[i][num] = obj.x[i];
}

// Set column vector of the specified number
inline void mat94::col_set(int num, double x0, double x1, double x2, double x3)
{
	A[0][num] = x0; A[1][num] = x1; A[2][num] = x2; A[3][num] = x3; 
}

// Return transposed matrix
inline mat49 mat94::trans(void)
{
	int i, j; mat49 ans;
	for(i=0; i<c; i++) for(j=0; j<r; j++) ans.A[i][j] = A[j][i];
	return(ans);
}

// Overload of '+' operator --------------------------------------------------//
// mat95 + mat95
inline mat95 operator+(mat95 obj1, mat95 obj2)
{
	int i, j;
	mat95 ans;
	for(i=0; i<9; i++){
		for(j=0; j<5; j++){
			ans.A[i][j] = obj1.A[i][j] + obj2.A[i][j];
		}
	}
	return(ans);
}

// Overload of '-' operator --------------------------------------------------//
// mat95 - mat95
inline mat95 operator-(mat95 obj1, mat95 obj2)
{
	int i, j;
	mat95 ans;
	for(i=0; i<9; i++){
		for(j=0; j<5; j++){
			ans.A[i][j] = obj1.A[i][j] - obj2.A[i][j];
		}
	}
	return(ans);
}

// Overload of '-' operator(-mat95)
inline mat95 operator-(mat95 obj)
{
	int i, j;
	mat95 ans;
	for(i=0; i<9; i++) for(j=0; j<5; j++) ans.A[i][j] = -obj.A[i][j];
	return(ans);
}

// Overload of '*' operator --------------------------------------------------//
// double * mat95
inline mat95 operator*(double a, mat95 obj)
{
	int i, j;
	mat95 ans;
	for(i=0; i<9; i++){
		for(j=0; j<5; j++){
			ans.A[i][j] = a * obj.A[i][j];
		}
	}
	return(ans);
}

// mat95 * double
inline mat95 operator*(mat95 obj, double a)
{
	int i, j;
	mat95 ans;
	for(i=0; i<9; i++){
		for(j=0; j<5; j++){
			ans.A[i][j] = obj.A[i][j] * a;
		}
	}
	return(ans);
}

// vec9 * mat95
inline vec5 operator*(vec9 obj1, mat95 obj2)
{
	int i, j;
	vec5 ans;
	for(i=0; i<5; i++){
		ans.x[i] = 0.0;
		for(j=0; j<9; j++){
			ans.x[i] += obj1.x[j] * obj2.A[j][i];
		}
	}
	return(ans);
}

// mat95 * vec5
inline vec9 operator*(mat95 obj1, vec5 obj2)
{
	int i, j;
	vec9 ans;
	for(i=0; i<9; i++){
		ans.x[i] = 0.0;
		for(j=0; j<5; j++){
			ans.x[i] += obj1.A[i][j] * obj2.x[j];
		}
	}
	return(ans);
}

// Extract row vector
inline vec5 mat95::row(int num)
{
	int i;
	vec5 ans;
	for(i=0; i<5; i++) ans.x[i] = A[num][i];
	return(ans);
}

// Extract column vector
inline vec9 mat95::col(int num)
{
	int i;
	vec9 ans;
	for(i=0; i<9; i++) ans.x[i] = A[i][num];
	return(ans);
}

// Set number into (i, j) element
inline void mat95::set(int i, int j, double x){ A[i][j] = x; }

// Set row vector of the specified number
inline void mat95::row_set(int num, vec5 obj)
{
	int i;
	for(i=0; i<5; i++) A[num][i] = obj.x[i];
}

// Set row vector of the specified number
inline void mat95::row_set(int num, double x0, double x1, double x2, double x3, double x4)
{
	A[num][0] = x0; A[num][1] = x1; A[num][2] = x2; A[num][3] = x3; A[num][4] = x4; 
}

// Set column vector of the specified number
inline void mat95::col_set(int num, vec9 obj)
{
	int i;
	for(i=0; i<9; i++) A[i][num] = obj.x[i];
}

// Set column vector of the specified number
inline void mat95::col_set(int num, double x0, double x1, double x2, double x3, double x4)
{
	A[0][num] = x0; A[1][num] = x1; A[2][num] = x2; A[3][num] = x3; A[4][num] = x4; 
}

// Return transposed matrix
inline mat59 mat95::trans(void)
{
	int i, j; mat59 ans;
	for(i=0; i<c; i++) for(j=0; j<r; j++) ans.A[i][j] = A[j][i];
	return(ans);
}

// Overload of '+' operator --------------------------------------------------//
// mat96 + mat96
inline mat96 operator+(mat96 obj1, mat96 obj2)
{
	int i, j;
	mat96 ans;
	for(i=0; i<9; i++){
		for(j=0; j<6; j++){
			ans.A[i][j] = obj1.A[i][j] + obj2.A[i][j];
		}
	}
	return(ans);
}

// Overload of '-' operator --------------------------------------------------//
// mat96 - mat96
inline mat96 operator-(mat96 obj1, mat96 obj2)
{
	int i, j;
	mat96 ans;
	for(i=0; i<9; i++){
		for(j=0; j<6; j++){
			ans.A[i][j] = obj1.A[i][j] - obj2.A[i][j];
		}
	}
	return(ans);
}

// Overload of '-' operator(-mat96)
inline mat96 operator-(mat96 obj)
{
	int i, j;
	mat96 ans;
	for(i=0; i<9; i++) for(j=0; j<6; j++) ans.A[i][j] = -obj.A[i][j];
	return(ans);
}

// Overload of '*' operator --------------------------------------------------//
// double * mat96
inline mat96 operator*(double a, mat96 obj)
{
	int i, j;
	mat96 ans;
	for(i=0; i<9; i++){
		for(j=0; j<6; j++){
			ans.A[i][j] = a * obj.A[i][j];
		}
	}
	return(ans);
}

// mat96 * double
inline mat96 operator*(mat96 obj, double a)
{
	int i, j;
	mat96 ans;
	for(i=0; i<9; i++){
		for(j=0; j<6; j++){
			ans.A[i][j] = obj.A[i][j] * a;
		}
	}
	return(ans);
}

// vec9 * mat96
inline vec6 operator*(vec9 obj1, mat96 obj2)
{
	int i, j;
	vec6 ans;
	for(i=0; i<6; i++){
		ans.x[i] = 0.0;
		for(j=0; j<9; j++){
			ans.x[i] += obj1.x[j] * obj2.A[j][i];
		}
	}
	return(ans);
}

// mat96 * vec6
inline vec9 operator*(mat96 obj1, vec6 obj2)
{
	int i, j;
	vec9 ans;
	for(i=0; i<9; i++){
		ans.x[i] = 0.0;
		for(j=0; j<6; j++){
			ans.x[i] += obj1.A[i][j] * obj2.x[j];
		}
	}
	return(ans);
}

// Extract row vector
inline vec6 mat96::row(int num)
{
	int i;
	vec6 ans;
	for(i=0; i<6; i++) ans.x[i] = A[num][i];
	return(ans);
}

// Extract column vector
inline vec9 mat96::col(int num)
{
	int i;
	vec9 ans;
	for(i=0; i<9; i++) ans.x[i] = A[i][num];
	return(ans);
}

// Set number into (i, j) element
inline void mat96::set(int i, int j, double x){ A[i][j] = x; }

// Set row vector of the specified number
inline void mat96::row_set(int num, vec6 obj)
{
	int i;
	for(i=0; i<6; i++) A[num][i] = obj.x[i];
}

// Set row vector of the specified number
inline void mat96::row_set(int num, double x0, double x1, double x2, double x3, double x4, double x5)
{
	A[num][0] = x0; A[num][1] = x1; A[num][2] = x2; A[num][3] = x3; A[num][4] = x4; A[num][5] = x5; 
}

// Set column vector of the specified number
inline void mat96::col_set(int num, vec9 obj)
{
	int i;
	for(i=0; i<9; i++) A[i][num] = obj.x[i];
}

// Set column vector of the specified number
inline void mat96::col_set(int num, double x0, double x1, double x2, double x3, double x4, double x5)
{
	A[0][num] = x0; A[1][num] = x1; A[2][num] = x2; A[3][num] = x3; A[4][num] = x4; A[5][num] = x5; 
}

// Return transposed matrix
inline mat69 mat96::trans(void)
{
	int i, j; mat69 ans;
	for(i=0; i<c; i++) for(j=0; j<r; j++) ans.A[i][j] = A[j][i];
	return(ans);
}

// Overload of '+' operator --------------------------------------------------//
// mat97 + mat97
inline mat97 operator+(mat97 obj1, mat97 obj2)
{
	int i, j;
	mat97 ans;
	for(i=0; i<9; i++){
		for(j=0; j<7; j++){
			ans.A[i][j] = obj1.A[i][j] + obj2.A[i][j];
		}
	}
	return(ans);
}

// Overload of '-' operator --------------------------------------------------//
// mat97 - mat97
inline mat97 operator-(mat97 obj1, mat97 obj2)
{
	int i, j;
	mat97 ans;
	for(i=0; i<9; i++){
		for(j=0; j<7; j++){
			ans.A[i][j] = obj1.A[i][j] - obj2.A[i][j];
		}
	}
	return(ans);
}

// Overload of '-' operator(-mat97)
inline mat97 operator-(mat97 obj)
{
	int i, j;
	mat97 ans;
	for(i=0; i<9; i++) for(j=0; j<7; j++) ans.A[i][j] = -obj.A[i][j];
	return(ans);
}

// Overload of '*' operator --------------------------------------------------//
// double * mat97
inline mat97 operator*(double a, mat97 obj)
{
	int i, j;
	mat97 ans;
	for(i=0; i<9; i++){
		for(j=0; j<7; j++){
			ans.A[i][j] = a * obj.A[i][j];
		}
	}
	return(ans);
}

// mat97 * double
inline mat97 operator*(mat97 obj, double a)
{
	int i, j;
	mat97 ans;
	for(i=0; i<9; i++){
		for(j=0; j<7; j++){
			ans.A[i][j] = obj.A[i][j] * a;
		}
	}
	return(ans);
}

// vec9 * mat97
inline vec7 operator*(vec9 obj1, mat97 obj2)
{
	int i, j;
	vec7 ans;
	for(i=0; i<7; i++){
		ans.x[i] = 0.0;
		for(j=0; j<9; j++){
			ans.x[i] += obj1.x[j] * obj2.A[j][i];
		}
	}
	return(ans);
}

// mat97 * vec7
inline vec9 operator*(mat97 obj1, vec7 obj2)
{
	int i, j;
	vec9 ans;
	for(i=0; i<9; i++){
		ans.x[i] = 0.0;
		for(j=0; j<7; j++){
			ans.x[i] += obj1.A[i][j] * obj2.x[j];
		}
	}
	return(ans);
}

// Extract row vector
inline vec7 mat97::row(int num)
{
	int i;
	vec7 ans;
	for(i=0; i<7; i++) ans.x[i] = A[num][i];
	return(ans);
}

// Extract column vector
inline vec9 mat97::col(int num)
{
	int i;
	vec9 ans;
	for(i=0; i<9; i++) ans.x[i] = A[i][num];
	return(ans);
}

// Set number into (i, j) element
inline void mat97::set(int i, int j, double x){ A[i][j] = x; }

// Set row vector of the specified number
inline void mat97::row_set(int num, vec7 obj)
{
	int i;
	for(i=0; i<7; i++) A[num][i] = obj.x[i];
}

// Set row vector of the specified number
inline void mat97::row_set(int num, double x0, double x1, double x2, double x3, double x4, double x5, double x6)
{
	A[num][0] = x0; A[num][1] = x1; A[num][2] = x2; A[num][3] = x3; A[num][4] = x4; A[num][5] = x5; A[num][6] = x6; 
}

// Set column vector of the specified number
inline void mat97::col_set(int num, vec9 obj)
{
	int i;
	for(i=0; i<9; i++) A[i][num] = obj.x[i];
}

// Set column vector of the specified number
inline void mat97::col_set(int num, double x0, double x1, double x2, double x3, double x4, double x5, double x6)
{
	A[0][num] = x0; A[1][num] = x1; A[2][num] = x2; A[3][num] = x3; A[4][num] = x4; A[5][num] = x5; A[6][num] = x6; 
}

// Return transposed matrix
inline mat79 mat97::trans(void)
{
	int i, j; mat79 ans;
	for(i=0; i<c; i++) for(j=0; j<r; j++) ans.A[i][j] = A[j][i];
	return(ans);
}

// Overload of '+' operator --------------------------------------------------//
// mat98 + mat98
inline mat98 operator+(mat98 obj1, mat98 obj2)
{
	int i, j;
	mat98 ans;
	for(i=0; i<9; i++){
		for(j=0; j<8; j++){
			ans.A[i][j] = obj1.A[i][j] + obj2.A[i][j];
		}
	}
	return(ans);
}

// Overload of '-' operator --------------------------------------------------//
// mat98 - mat98
inline mat98 operator-(mat98 obj1, mat98 obj2)
{
	int i, j;
	mat98 ans;
	for(i=0; i<9; i++){
		for(j=0; j<8; j++){
			ans.A[i][j] = obj1.A[i][j] - obj2.A[i][j];
		}
	}
	return(ans);
}

// Overload of '-' operator(-mat98)
inline mat98 operator-(mat98 obj)
{
	int i, j;
	mat98 ans;
	for(i=0; i<9; i++) for(j=0; j<8; j++) ans.A[i][j] = -obj.A[i][j];
	return(ans);
}

// Overload of '*' operator --------------------------------------------------//
// double * mat98
inline mat98 operator*(double a, mat98 obj)
{
	int i, j;
	mat98 ans;
	for(i=0; i<9; i++){
		for(j=0; j<8; j++){
			ans.A[i][j] = a * obj.A[i][j];
		}
	}
	return(ans);
}

// mat98 * double
inline mat98 operator*(mat98 obj, double a)
{
	int i, j;
	mat98 ans;
	for(i=0; i<9; i++){
		for(j=0; j<8; j++){
			ans.A[i][j] = obj.A[i][j] * a;
		}
	}
	return(ans);
}

// vec9 * mat98
inline vec8 operator*(vec9 obj1, mat98 obj2)
{
	int i, j;
	vec8 ans;
	for(i=0; i<8; i++){
		ans.x[i] = 0.0;
		for(j=0; j<9; j++){
			ans.x[i] += obj1.x[j] * obj2.A[j][i];
		}
	}
	return(ans);
}

// mat98 * vec8
inline vec9 operator*(mat98 obj1, vec8 obj2)
{
	int i, j;
	vec9 ans;
	for(i=0; i<9; i++){
		ans.x[i] = 0.0;
		for(j=0; j<8; j++){
			ans.x[i] += obj1.A[i][j] * obj2.x[j];
		}
	}
	return(ans);
}

// Extract row vector
inline vec8 mat98::row(int num)
{
	int i;
	vec8 ans;
	for(i=0; i<8; i++) ans.x[i] = A[num][i];
	return(ans);
}

// Extract column vector
inline vec9 mat98::col(int num)
{
	int i;
	vec9 ans;
	for(i=0; i<9; i++) ans.x[i] = A[i][num];
	return(ans);
}

// Set number into (i, j) element
inline void mat98::set(int i, int j, double x){ A[i][j] = x; }

// Set row vector of the specified number
inline void mat98::row_set(int num, vec8 obj)
{
	int i;
	for(i=0; i<8; i++) A[num][i] = obj.x[i];
}

// Set row vector of the specified number
inline void mat98::row_set(int num, double x0, double x1, double x2, double x3, double x4, double x5, double x6, double x7)
{
	A[num][0] = x0; A[num][1] = x1; A[num][2] = x2; A[num][3] = x3; A[num][4] = x4; A[num][5] = x5; A[num][6] = x6; A[num][7] = x7; 
}

// Set column vector of the specified number
inline void mat98::col_set(int num, vec9 obj)
{
	int i;
	for(i=0; i<9; i++) A[i][num] = obj.x[i];
}

// Set column vector of the specified number
inline void mat98::col_set(int num, double x0, double x1, double x2, double x3, double x4, double x5, double x6, double x7)
{
	A[0][num] = x0; A[1][num] = x1; A[2][num] = x2; A[3][num] = x3; A[4][num] = x4; A[5][num] = x5; A[6][num] = x6; A[7][num] = x7; 
}

// Return transposed matrix
inline mat89 mat98::trans(void)
{
	int i, j; mat89 ans;
	for(i=0; i<c; i++) for(j=0; j<r; j++) ans.A[i][j] = A[j][i];
	return(ans);
}

// Overload of '+' operator --------------------------------------------------//
// mat99 + mat99
inline mat99 operator+(mat99 obj1, mat99 obj2)
{
	int i, j;
	mat99 ans;
	for(i=0; i<9; i++){
		for(j=0; j<9; j++){
			ans.A[i][j] = obj1.A[i][j] + obj2.A[i][j];
		}
	}
	return(ans);
}

// Overload of '-' operator --------------------------------------------------//
// mat99 - mat99
inline mat99 operator-(mat99 obj1, mat99 obj2)
{
	int i, j;
	mat99 ans;
	for(i=0; i<9; i++){
		for(j=0; j<9; j++){
			ans.A[i][j] = obj1.A[i][j] - obj2.A[i][j];
		}
	}
	return(ans);
}

// Overload of '-' operator(-mat99)
inline mat99 operator-(mat99 obj)
{
	int i, j;
	mat99 ans;
	for(i=0; i<9; i++) for(j=0; j<9; j++) ans.A[i][j] = -obj.A[i][j];
	return(ans);
}

// Overload of '*' operator --------------------------------------------------//
// double * mat99
inline mat99 operator*(double a, mat99 obj)
{
	int i, j;
	mat99 ans;
	for(i=0; i<9; i++){
		for(j=0; j<9; j++){
			ans.A[i][j] = a * obj.A[i][j];
		}
	}
	return(ans);
}

// mat99 * double
inline mat99 operator*(mat99 obj, double a)
{
	int i, j;
	mat99 ans;
	for(i=0; i<9; i++){
		for(j=0; j<9; j++){
			ans.A[i][j] = obj.A[i][j] * a;
		}
	}
	return(ans);
}

// vec9 * mat99
inline vec9 operator*(vec9 obj1, mat99 obj2)
{
	int i, j;
	vec9 ans;
	for(i=0; i<9; i++){
		ans.x[i] = 0.0;
		for(j=0; j<9; j++){
			ans.x[i] += obj1.x[j] * obj2.A[j][i];
		}
	}
	return(ans);
}

// mat99 * vec9
inline vec9 operator*(mat99 obj1, vec9 obj2)
{
	int i, j;
	vec9 ans;
	for(i=0; i<9; i++){
		ans.x[i] = 0.0;
		for(j=0; j<9; j++){
			ans.x[i] += obj1.A[i][j] * obj2.x[j];
		}
	}
	return(ans);
}

// Extract row vector
inline vec9 mat99::row(int num)
{
	int i;
	vec9 ans;
	for(i=0; i<9; i++) ans.x[i] = A[num][i];
	return(ans);
}

// Extract column vector
inline vec9 mat99::col(int num)
{
	int i;
	vec9 ans;
	for(i=0; i<9; i++) ans.x[i] = A[i][num];
	return(ans);
}

// Set number into (i, j) element
inline void mat99::set(int i, int j, double x){ A[i][j] = x; }

// Set row vector of the specified number
inline void mat99::row_set(int num, vec9 obj)
{
	int i;
	for(i=0; i<9; i++) A[num][i] = obj.x[i];
}

// Set row vector of the specified number
inline void mat99::row_set(int num, double x0, double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8)
{
	A[num][0] = x0; A[num][1] = x1; A[num][2] = x2; A[num][3] = x3; A[num][4] = x4; A[num][5] = x5; A[num][6] = x6; A[num][7] = x7; A[num][8] = x8; 
}

// Set column vector of the specified number
inline void mat99::col_set(int num, vec9 obj)
{
	int i;
	for(i=0; i<9; i++) A[i][num] = obj.x[i];
}

// Set column vector of the specified number
inline void mat99::col_set(int num, double x0, double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8)
{
	A[0][num] = x0; A[1][num] = x1; A[2][num] = x2; A[3][num] = x3; A[4][num] = x4; A[5][num] = x5; A[6][num] = x6; A[7][num] = x7; A[8][num] = x8; 
}

// Return transposed matrix
inline mat99 mat99::trans(void)
{
	int i, j; mat99 ans;
	for(i=0; i<c; i++) for(j=0; j<r; j++) ans.A[i][j] = A[j][i];
	return(ans);
}

//================================================================================================//
// Identity matrix                                                                                //
//================================================================================================//
// 2 x 2 identity matrix
inline mat22 eye2(void)
{
	int i, j;
	mat22 ans;
	for(i=0; i<ans.r; i++) for(j=0; j<ans.r; j++) ans.A[i][j] = 0.0;
	for(i=0; i<ans.r; i++) ans.A[i][i] = 1.0;
	return(ans);
}

// 3 x 3 identity matrix
inline mat33 eye3(void)
{
	int i, j;
	mat33 ans;
	for(i=0; i<ans.r; i++) for(j=0; j<ans.r; j++) ans.A[i][j] = 0.0;
	for(i=0; i<ans.r; i++) ans.A[i][i] = 1.0;
	return(ans);
}

// 4 x 4 identity matrix
inline mat44 eye4(void)
{
	int i, j;
	mat44 ans;
	for(i=0; i<ans.r; i++) for(j=0; j<ans.r; j++) ans.A[i][j] = 0.0;
	for(i=0; i<ans.r; i++) ans.A[i][i] = 1.0;
	return(ans);
}

// 5 x 5 identity matrix
inline mat55 eye5(void)
{
	int i, j;
	mat55 ans;
	for(i=0; i<ans.r; i++) for(j=0; j<ans.r; j++) ans.A[i][j] = 0.0;
	for(i=0; i<ans.r; i++) ans.A[i][i] = 1.0;
	return(ans);
}

// 6 x 6 identity matrix
inline mat66 eye6(void)
{
	int i, j;
	mat66 ans;
	for(i=0; i<ans.r; i++) for(j=0; j<ans.r; j++) ans.A[i][j] = 0.0;
	for(i=0; i<ans.r; i++) ans.A[i][i] = 1.0;
	return(ans);
}

// 7 x 7 identity matrix
inline mat77 eye7(void)
{
	int i, j;
	mat77 ans;
	for(i=0; i<ans.r; i++) for(j=0; j<ans.r; j++) ans.A[i][j] = 0.0;
	for(i=0; i<ans.r; i++) ans.A[i][i] = 1.0;
	return(ans);
}

// 8 x 8 identity matrix
inline mat88 eye8(void)
{
	int i, j;
	mat88 ans;
	for(i=0; i<ans.r; i++) for(j=0; j<ans.r; j++) ans.A[i][j] = 0.0;
	for(i=0; i<ans.r; i++) ans.A[i][i] = 1.0;
	return(ans);
}

// 9 x 9 identity matrix
inline mat99 eye9(void)
{
	int i, j;
	mat99 ans;
	for(i=0; i<ans.r; i++) for(j=0; j<ans.r; j++) ans.A[i][j] = 0.0;
	for(i=0; i<ans.r; i++) ans.A[i][i] = 1.0;
	return(ans);
}

//================================================================================================//
// Unit vector                                                                                    //
//================================================================================================//
inline vec2 unit2(int num)
{
	int i;
	vec2 ans;
	for(i=0; i<ans.n; i++) ans.x[i] = 0.0;
	ans.x[num] = 1.0;
	return(ans);
}

inline vec3 unit3(int num)
{
	int i;
	vec3 ans;
	for(i=0; i<ans.n; i++) ans.x[i] = 0.0;
	ans.x[num] = 1.0;
	return(ans);
}

inline vec4 unit4(int num)
{
	int i;
	vec4 ans;
	for(i=0; i<ans.n; i++) ans.x[i] = 0.0;
	ans.x[num] = 1.0;
	return(ans);
}

inline vec5 unit5(int num)
{
	int i;
	vec5 ans;
	for(i=0; i<ans.n; i++) ans.x[i] = 0.0;
	ans.x[num] = 1.0;
	return(ans);
}

inline vec6 unit6(int num)
{
	int i;
	vec6 ans;
	for(i=0; i<ans.n; i++) ans.x[i] = 0.0;
	ans.x[num] = 1.0;
	return(ans);
}

inline vec7 unit7(int num)
{
	int i;
	vec7 ans;
	for(i=0; i<ans.n; i++) ans.x[i] = 0.0;
	ans.x[num] = 1.0;
	return(ans);
}

inline vec8 unit8(int num)
{
	int i;
	vec8 ans;
	for(i=0; i<ans.n; i++) ans.x[i] = 0.0;
	ans.x[num] = 1.0;
	return(ans);
}

inline vec9 unit9(int num)
{
	int i;
	vec9 ans;
	for(i=0; i<ans.n; i++) ans.x[i] = 0.0;
	ans.x[num] = 1.0;
	return(ans);
}

//================================================================================================//
// Outer product                                                                                  //
//================================================================================================//
inline vec3 outer_product(vec3 obj1, vec3 obj2)
{
	vec3 ans;
	ans.x[0] = obj1[1]*obj2[2] - obj1[2]*obj2[1];
	ans.x[1] = obj1[2]*obj2[0] - obj1[0]*obj2[2];
	ans.x[2] = obj1[0]*obj2[1] - obj1[1]*obj2[0];
	return(ans);
}

//================================================================================================//
// Matrix multiplication                                                                          //
//================================================================================================//
// mat22 * mat22 = mat22
inline mat22 operator*(mat22 obj1, mat22 obj2)
{
	int i, j, k;
	mat22 ans;
	for(i=0; i<2; i++){
		for(j=0; j<2; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<2; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat22 * mat23 = mat23
inline mat23 operator*(mat22 obj1, mat23 obj2)
{
	int i, j, k;
	mat23 ans;
	for(i=0; i<2; i++){
		for(j=0; j<3; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<2; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat22 * mat24 = mat24
inline mat24 operator*(mat22 obj1, mat24 obj2)
{
	int i, j, k;
	mat24 ans;
	for(i=0; i<2; i++){
		for(j=0; j<4; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<2; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat22 * mat25 = mat25
inline mat25 operator*(mat22 obj1, mat25 obj2)
{
	int i, j, k;
	mat25 ans;
	for(i=0; i<2; i++){
		for(j=0; j<5; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<2; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat22 * mat26 = mat26
inline mat26 operator*(mat22 obj1, mat26 obj2)
{
	int i, j, k;
	mat26 ans;
	for(i=0; i<2; i++){
		for(j=0; j<6; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<2; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat22 * mat27 = mat27
inline mat27 operator*(mat22 obj1, mat27 obj2)
{
	int i, j, k;
	mat27 ans;
	for(i=0; i<2; i++){
		for(j=0; j<7; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<2; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat22 * mat28 = mat28
inline mat28 operator*(mat22 obj1, mat28 obj2)
{
	int i, j, k;
	mat28 ans;
	for(i=0; i<2; i++){
		for(j=0; j<8; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<2; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat22 * mat29 = mat29
inline mat29 operator*(mat22 obj1, mat29 obj2)
{
	int i, j, k;
	mat29 ans;
	for(i=0; i<2; i++){
		for(j=0; j<9; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<2; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat23 * mat32 = mat22
inline mat22 operator*(mat23 obj1, mat32 obj2)
{
	int i, j, k;
	mat22 ans;
	for(i=0; i<2; i++){
		for(j=0; j<2; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<3; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat23 * mat33 = mat23
inline mat23 operator*(mat23 obj1, mat33 obj2)
{
	int i, j, k;
	mat23 ans;
	for(i=0; i<2; i++){
		for(j=0; j<3; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<3; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat23 * mat34 = mat24
inline mat24 operator*(mat23 obj1, mat34 obj2)
{
	int i, j, k;
	mat24 ans;
	for(i=0; i<2; i++){
		for(j=0; j<4; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<3; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat23 * mat35 = mat25
inline mat25 operator*(mat23 obj1, mat35 obj2)
{
	int i, j, k;
	mat25 ans;
	for(i=0; i<2; i++){
		for(j=0; j<5; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<3; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat23 * mat36 = mat26
inline mat26 operator*(mat23 obj1, mat36 obj2)
{
	int i, j, k;
	mat26 ans;
	for(i=0; i<2; i++){
		for(j=0; j<6; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<3; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat23 * mat37 = mat27
inline mat27 operator*(mat23 obj1, mat37 obj2)
{
	int i, j, k;
	mat27 ans;
	for(i=0; i<2; i++){
		for(j=0; j<7; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<3; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat23 * mat38 = mat28
inline mat28 operator*(mat23 obj1, mat38 obj2)
{
	int i, j, k;
	mat28 ans;
	for(i=0; i<2; i++){
		for(j=0; j<8; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<3; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat23 * mat39 = mat29
inline mat29 operator*(mat23 obj1, mat39 obj2)
{
	int i, j, k;
	mat29 ans;
	for(i=0; i<2; i++){
		for(j=0; j<9; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<3; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat24 * mat42 = mat22
inline mat22 operator*(mat24 obj1, mat42 obj2)
{
	int i, j, k;
	mat22 ans;
	for(i=0; i<2; i++){
		for(j=0; j<2; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<4; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat24 * mat43 = mat23
inline mat23 operator*(mat24 obj1, mat43 obj2)
{
	int i, j, k;
	mat23 ans;
	for(i=0; i<2; i++){
		for(j=0; j<3; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<4; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat24 * mat44 = mat24
inline mat24 operator*(mat24 obj1, mat44 obj2)
{
	int i, j, k;
	mat24 ans;
	for(i=0; i<2; i++){
		for(j=0; j<4; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<4; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat24 * mat45 = mat25
inline mat25 operator*(mat24 obj1, mat45 obj2)
{
	int i, j, k;
	mat25 ans;
	for(i=0; i<2; i++){
		for(j=0; j<5; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<4; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat24 * mat46 = mat26
inline mat26 operator*(mat24 obj1, mat46 obj2)
{
	int i, j, k;
	mat26 ans;
	for(i=0; i<2; i++){
		for(j=0; j<6; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<4; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat24 * mat47 = mat27
inline mat27 operator*(mat24 obj1, mat47 obj2)
{
	int i, j, k;
	mat27 ans;
	for(i=0; i<2; i++){
		for(j=0; j<7; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<4; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat24 * mat48 = mat28
inline mat28 operator*(mat24 obj1, mat48 obj2)
{
	int i, j, k;
	mat28 ans;
	for(i=0; i<2; i++){
		for(j=0; j<8; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<4; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat24 * mat49 = mat29
inline mat29 operator*(mat24 obj1, mat49 obj2)
{
	int i, j, k;
	mat29 ans;
	for(i=0; i<2; i++){
		for(j=0; j<9; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<4; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat25 * mat52 = mat22
inline mat22 operator*(mat25 obj1, mat52 obj2)
{
	int i, j, k;
	mat22 ans;
	for(i=0; i<2; i++){
		for(j=0; j<2; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<5; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat25 * mat53 = mat23
inline mat23 operator*(mat25 obj1, mat53 obj2)
{
	int i, j, k;
	mat23 ans;
	for(i=0; i<2; i++){
		for(j=0; j<3; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<5; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat25 * mat54 = mat24
inline mat24 operator*(mat25 obj1, mat54 obj2)
{
	int i, j, k;
	mat24 ans;
	for(i=0; i<2; i++){
		for(j=0; j<4; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<5; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat25 * mat55 = mat25
inline mat25 operator*(mat25 obj1, mat55 obj2)
{
	int i, j, k;
	mat25 ans;
	for(i=0; i<2; i++){
		for(j=0; j<5; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<5; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat25 * mat56 = mat26
inline mat26 operator*(mat25 obj1, mat56 obj2)
{
	int i, j, k;
	mat26 ans;
	for(i=0; i<2; i++){
		for(j=0; j<6; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<5; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat25 * mat57 = mat27
inline mat27 operator*(mat25 obj1, mat57 obj2)
{
	int i, j, k;
	mat27 ans;
	for(i=0; i<2; i++){
		for(j=0; j<7; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<5; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat25 * mat58 = mat28
inline mat28 operator*(mat25 obj1, mat58 obj2)
{
	int i, j, k;
	mat28 ans;
	for(i=0; i<2; i++){
		for(j=0; j<8; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<5; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat25 * mat59 = mat29
inline mat29 operator*(mat25 obj1, mat59 obj2)
{
	int i, j, k;
	mat29 ans;
	for(i=0; i<2; i++){
		for(j=0; j<9; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<5; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat26 * mat62 = mat22
inline mat22 operator*(mat26 obj1, mat62 obj2)
{
	int i, j, k;
	mat22 ans;
	for(i=0; i<2; i++){
		for(j=0; j<2; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<6; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat26 * mat63 = mat23
inline mat23 operator*(mat26 obj1, mat63 obj2)
{
	int i, j, k;
	mat23 ans;
	for(i=0; i<2; i++){
		for(j=0; j<3; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<6; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat26 * mat64 = mat24
inline mat24 operator*(mat26 obj1, mat64 obj2)
{
	int i, j, k;
	mat24 ans;
	for(i=0; i<2; i++){
		for(j=0; j<4; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<6; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat26 * mat65 = mat25
inline mat25 operator*(mat26 obj1, mat65 obj2)
{
	int i, j, k;
	mat25 ans;
	for(i=0; i<2; i++){
		for(j=0; j<5; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<6; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat26 * mat66 = mat26
inline mat26 operator*(mat26 obj1, mat66 obj2)
{
	int i, j, k;
	mat26 ans;
	for(i=0; i<2; i++){
		for(j=0; j<6; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<6; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat26 * mat67 = mat27
inline mat27 operator*(mat26 obj1, mat67 obj2)
{
	int i, j, k;
	mat27 ans;
	for(i=0; i<2; i++){
		for(j=0; j<7; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<6; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat26 * mat68 = mat28
inline mat28 operator*(mat26 obj1, mat68 obj2)
{
	int i, j, k;
	mat28 ans;
	for(i=0; i<2; i++){
		for(j=0; j<8; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<6; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat26 * mat69 = mat29
inline mat29 operator*(mat26 obj1, mat69 obj2)
{
	int i, j, k;
	mat29 ans;
	for(i=0; i<2; i++){
		for(j=0; j<9; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<6; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat27 * mat72 = mat22
inline mat22 operator*(mat27 obj1, mat72 obj2)
{
	int i, j, k;
	mat22 ans;
	for(i=0; i<2; i++){
		for(j=0; j<2; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<7; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat27 * mat73 = mat23
inline mat23 operator*(mat27 obj1, mat73 obj2)
{
	int i, j, k;
	mat23 ans;
	for(i=0; i<2; i++){
		for(j=0; j<3; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<7; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat27 * mat74 = mat24
inline mat24 operator*(mat27 obj1, mat74 obj2)
{
	int i, j, k;
	mat24 ans;
	for(i=0; i<2; i++){
		for(j=0; j<4; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<7; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat27 * mat75 = mat25
inline mat25 operator*(mat27 obj1, mat75 obj2)
{
	int i, j, k;
	mat25 ans;
	for(i=0; i<2; i++){
		for(j=0; j<5; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<7; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat27 * mat76 = mat26
inline mat26 operator*(mat27 obj1, mat76 obj2)
{
	int i, j, k;
	mat26 ans;
	for(i=0; i<2; i++){
		for(j=0; j<6; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<7; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat27 * mat77 = mat27
inline mat27 operator*(mat27 obj1, mat77 obj2)
{
	int i, j, k;
	mat27 ans;
	for(i=0; i<2; i++){
		for(j=0; j<7; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<7; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat27 * mat78 = mat28
inline mat28 operator*(mat27 obj1, mat78 obj2)
{
	int i, j, k;
	mat28 ans;
	for(i=0; i<2; i++){
		for(j=0; j<8; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<7; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat27 * mat79 = mat29
inline mat29 operator*(mat27 obj1, mat79 obj2)
{
	int i, j, k;
	mat29 ans;
	for(i=0; i<2; i++){
		for(j=0; j<9; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<7; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat28 * mat82 = mat22
inline mat22 operator*(mat28 obj1, mat82 obj2)
{
	int i, j, k;
	mat22 ans;
	for(i=0; i<2; i++){
		for(j=0; j<2; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<8; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat28 * mat83 = mat23
inline mat23 operator*(mat28 obj1, mat83 obj2)
{
	int i, j, k;
	mat23 ans;
	for(i=0; i<2; i++){
		for(j=0; j<3; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<8; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat28 * mat84 = mat24
inline mat24 operator*(mat28 obj1, mat84 obj2)
{
	int i, j, k;
	mat24 ans;
	for(i=0; i<2; i++){
		for(j=0; j<4; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<8; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat28 * mat85 = mat25
inline mat25 operator*(mat28 obj1, mat85 obj2)
{
	int i, j, k;
	mat25 ans;
	for(i=0; i<2; i++){
		for(j=0; j<5; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<8; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat28 * mat86 = mat26
inline mat26 operator*(mat28 obj1, mat86 obj2)
{
	int i, j, k;
	mat26 ans;
	for(i=0; i<2; i++){
		for(j=0; j<6; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<8; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat28 * mat87 = mat27
inline mat27 operator*(mat28 obj1, mat87 obj2)
{
	int i, j, k;
	mat27 ans;
	for(i=0; i<2; i++){
		for(j=0; j<7; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<8; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat28 * mat88 = mat28
inline mat28 operator*(mat28 obj1, mat88 obj2)
{
	int i, j, k;
	mat28 ans;
	for(i=0; i<2; i++){
		for(j=0; j<8; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<8; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat28 * mat89 = mat29
inline mat29 operator*(mat28 obj1, mat89 obj2)
{
	int i, j, k;
	mat29 ans;
	for(i=0; i<2; i++){
		for(j=0; j<9; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<8; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat29 * mat92 = mat22
inline mat22 operator*(mat29 obj1, mat92 obj2)
{
	int i, j, k;
	mat22 ans;
	for(i=0; i<2; i++){
		for(j=0; j<2; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<9; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat29 * mat93 = mat23
inline mat23 operator*(mat29 obj1, mat93 obj2)
{
	int i, j, k;
	mat23 ans;
	for(i=0; i<2; i++){
		for(j=0; j<3; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<9; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat29 * mat94 = mat24
inline mat24 operator*(mat29 obj1, mat94 obj2)
{
	int i, j, k;
	mat24 ans;
	for(i=0; i<2; i++){
		for(j=0; j<4; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<9; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat29 * mat95 = mat25
inline mat25 operator*(mat29 obj1, mat95 obj2)
{
	int i, j, k;
	mat25 ans;
	for(i=0; i<2; i++){
		for(j=0; j<5; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<9; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat29 * mat96 = mat26
inline mat26 operator*(mat29 obj1, mat96 obj2)
{
	int i, j, k;
	mat26 ans;
	for(i=0; i<2; i++){
		for(j=0; j<6; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<9; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat29 * mat97 = mat27
inline mat27 operator*(mat29 obj1, mat97 obj2)
{
	int i, j, k;
	mat27 ans;
	for(i=0; i<2; i++){
		for(j=0; j<7; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<9; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat29 * mat98 = mat28
inline mat28 operator*(mat29 obj1, mat98 obj2)
{
	int i, j, k;
	mat28 ans;
	for(i=0; i<2; i++){
		for(j=0; j<8; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<9; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat29 * mat99 = mat29
inline mat29 operator*(mat29 obj1, mat99 obj2)
{
	int i, j, k;
	mat29 ans;
	for(i=0; i<2; i++){
		for(j=0; j<9; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<9; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat32 * mat22 = mat32
inline mat32 operator*(mat32 obj1, mat22 obj2)
{
	int i, j, k;
	mat32 ans;
	for(i=0; i<3; i++){
		for(j=0; j<2; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<2; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat32 * mat23 = mat33
inline mat33 operator*(mat32 obj1, mat23 obj2)
{
	int i, j, k;
	mat33 ans;
	for(i=0; i<3; i++){
		for(j=0; j<3; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<2; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat32 * mat24 = mat34
inline mat34 operator*(mat32 obj1, mat24 obj2)
{
	int i, j, k;
	mat34 ans;
	for(i=0; i<3; i++){
		for(j=0; j<4; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<2; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat32 * mat25 = mat35
inline mat35 operator*(mat32 obj1, mat25 obj2)
{
	int i, j, k;
	mat35 ans;
	for(i=0; i<3; i++){
		for(j=0; j<5; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<2; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat32 * mat26 = mat36
inline mat36 operator*(mat32 obj1, mat26 obj2)
{
	int i, j, k;
	mat36 ans;
	for(i=0; i<3; i++){
		for(j=0; j<6; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<2; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat32 * mat27 = mat37
inline mat37 operator*(mat32 obj1, mat27 obj2)
{
	int i, j, k;
	mat37 ans;
	for(i=0; i<3; i++){
		for(j=0; j<7; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<2; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat32 * mat28 = mat38
inline mat38 operator*(mat32 obj1, mat28 obj2)
{
	int i, j, k;
	mat38 ans;
	for(i=0; i<3; i++){
		for(j=0; j<8; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<2; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat32 * mat29 = mat39
inline mat39 operator*(mat32 obj1, mat29 obj2)
{
	int i, j, k;
	mat39 ans;
	for(i=0; i<3; i++){
		for(j=0; j<9; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<2; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat33 * mat32 = mat32
inline mat32 operator*(mat33 obj1, mat32 obj2)
{
	int i, j, k;
	mat32 ans;
	for(i=0; i<3; i++){
		for(j=0; j<2; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<3; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat33 * mat33 = mat33
inline mat33 operator*(mat33 obj1, mat33 obj2)
{
	int i, j, k;
	mat33 ans;
	for(i=0; i<3; i++){
		for(j=0; j<3; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<3; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat33 * mat34 = mat34
inline mat34 operator*(mat33 obj1, mat34 obj2)
{
	int i, j, k;
	mat34 ans;
	for(i=0; i<3; i++){
		for(j=0; j<4; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<3; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat33 * mat35 = mat35
inline mat35 operator*(mat33 obj1, mat35 obj2)
{
	int i, j, k;
	mat35 ans;
	for(i=0; i<3; i++){
		for(j=0; j<5; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<3; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat33 * mat36 = mat36
inline mat36 operator*(mat33 obj1, mat36 obj2)
{
	int i, j, k;
	mat36 ans;
	for(i=0; i<3; i++){
		for(j=0; j<6; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<3; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat33 * mat37 = mat37
inline mat37 operator*(mat33 obj1, mat37 obj2)
{
	int i, j, k;
	mat37 ans;
	for(i=0; i<3; i++){
		for(j=0; j<7; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<3; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat33 * mat38 = mat38
inline mat38 operator*(mat33 obj1, mat38 obj2)
{
	int i, j, k;
	mat38 ans;
	for(i=0; i<3; i++){
		for(j=0; j<8; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<3; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat33 * mat39 = mat39
inline mat39 operator*(mat33 obj1, mat39 obj2)
{
	int i, j, k;
	mat39 ans;
	for(i=0; i<3; i++){
		for(j=0; j<9; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<3; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat34 * mat42 = mat32
inline mat32 operator*(mat34 obj1, mat42 obj2)
{
	int i, j, k;
	mat32 ans;
	for(i=0; i<3; i++){
		for(j=0; j<2; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<4; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat34 * mat43 = mat33
inline mat33 operator*(mat34 obj1, mat43 obj2)
{
	int i, j, k;
	mat33 ans;
	for(i=0; i<3; i++){
		for(j=0; j<3; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<4; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat34 * mat44 = mat34
inline mat34 operator*(mat34 obj1, mat44 obj2)
{
	int i, j, k;
	mat34 ans;
	for(i=0; i<3; i++){
		for(j=0; j<4; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<4; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat34 * mat45 = mat35
inline mat35 operator*(mat34 obj1, mat45 obj2)
{
	int i, j, k;
	mat35 ans;
	for(i=0; i<3; i++){
		for(j=0; j<5; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<4; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat34 * mat46 = mat36
inline mat36 operator*(mat34 obj1, mat46 obj2)
{
	int i, j, k;
	mat36 ans;
	for(i=0; i<3; i++){
		for(j=0; j<6; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<4; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat34 * mat47 = mat37
inline mat37 operator*(mat34 obj1, mat47 obj2)
{
	int i, j, k;
	mat37 ans;
	for(i=0; i<3; i++){
		for(j=0; j<7; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<4; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat34 * mat48 = mat38
inline mat38 operator*(mat34 obj1, mat48 obj2)
{
	int i, j, k;
	mat38 ans;
	for(i=0; i<3; i++){
		for(j=0; j<8; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<4; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat34 * mat49 = mat39
inline mat39 operator*(mat34 obj1, mat49 obj2)
{
	int i, j, k;
	mat39 ans;
	for(i=0; i<3; i++){
		for(j=0; j<9; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<4; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat35 * mat52 = mat32
inline mat32 operator*(mat35 obj1, mat52 obj2)
{
	int i, j, k;
	mat32 ans;
	for(i=0; i<3; i++){
		for(j=0; j<2; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<5; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat35 * mat53 = mat33
inline mat33 operator*(mat35 obj1, mat53 obj2)
{
	int i, j, k;
	mat33 ans;
	for(i=0; i<3; i++){
		for(j=0; j<3; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<5; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat35 * mat54 = mat34
inline mat34 operator*(mat35 obj1, mat54 obj2)
{
	int i, j, k;
	mat34 ans;
	for(i=0; i<3; i++){
		for(j=0; j<4; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<5; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat35 * mat55 = mat35
inline mat35 operator*(mat35 obj1, mat55 obj2)
{
	int i, j, k;
	mat35 ans;
	for(i=0; i<3; i++){
		for(j=0; j<5; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<5; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat35 * mat56 = mat36
inline mat36 operator*(mat35 obj1, mat56 obj2)
{
	int i, j, k;
	mat36 ans;
	for(i=0; i<3; i++){
		for(j=0; j<6; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<5; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat35 * mat57 = mat37
inline mat37 operator*(mat35 obj1, mat57 obj2)
{
	int i, j, k;
	mat37 ans;
	for(i=0; i<3; i++){
		for(j=0; j<7; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<5; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat35 * mat58 = mat38
inline mat38 operator*(mat35 obj1, mat58 obj2)
{
	int i, j, k;
	mat38 ans;
	for(i=0; i<3; i++){
		for(j=0; j<8; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<5; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat35 * mat59 = mat39
inline mat39 operator*(mat35 obj1, mat59 obj2)
{
	int i, j, k;
	mat39 ans;
	for(i=0; i<3; i++){
		for(j=0; j<9; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<5; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat36 * mat62 = mat32
inline mat32 operator*(mat36 obj1, mat62 obj2)
{
	int i, j, k;
	mat32 ans;
	for(i=0; i<3; i++){
		for(j=0; j<2; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<6; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat36 * mat63 = mat33
inline mat33 operator*(mat36 obj1, mat63 obj2)
{
	int i, j, k;
	mat33 ans;
	for(i=0; i<3; i++){
		for(j=0; j<3; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<6; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat36 * mat64 = mat34
inline mat34 operator*(mat36 obj1, mat64 obj2)
{
	int i, j, k;
	mat34 ans;
	for(i=0; i<3; i++){
		for(j=0; j<4; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<6; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat36 * mat65 = mat35
inline mat35 operator*(mat36 obj1, mat65 obj2)
{
	int i, j, k;
	mat35 ans;
	for(i=0; i<3; i++){
		for(j=0; j<5; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<6; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat36 * mat66 = mat36
inline mat36 operator*(mat36 obj1, mat66 obj2)
{
	int i, j, k;
	mat36 ans;
	for(i=0; i<3; i++){
		for(j=0; j<6; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<6; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat36 * mat67 = mat37
inline mat37 operator*(mat36 obj1, mat67 obj2)
{
	int i, j, k;
	mat37 ans;
	for(i=0; i<3; i++){
		for(j=0; j<7; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<6; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat36 * mat68 = mat38
inline mat38 operator*(mat36 obj1, mat68 obj2)
{
	int i, j, k;
	mat38 ans;
	for(i=0; i<3; i++){
		for(j=0; j<8; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<6; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat36 * mat69 = mat39
inline mat39 operator*(mat36 obj1, mat69 obj2)
{
	int i, j, k;
	mat39 ans;
	for(i=0; i<3; i++){
		for(j=0; j<9; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<6; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat37 * mat72 = mat32
inline mat32 operator*(mat37 obj1, mat72 obj2)
{
	int i, j, k;
	mat32 ans;
	for(i=0; i<3; i++){
		for(j=0; j<2; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<7; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat37 * mat73 = mat33
inline mat33 operator*(mat37 obj1, mat73 obj2)
{
	int i, j, k;
	mat33 ans;
	for(i=0; i<3; i++){
		for(j=0; j<3; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<7; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat37 * mat74 = mat34
inline mat34 operator*(mat37 obj1, mat74 obj2)
{
	int i, j, k;
	mat34 ans;
	for(i=0; i<3; i++){
		for(j=0; j<4; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<7; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat37 * mat75 = mat35
inline mat35 operator*(mat37 obj1, mat75 obj2)
{
	int i, j, k;
	mat35 ans;
	for(i=0; i<3; i++){
		for(j=0; j<5; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<7; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat37 * mat76 = mat36
inline mat36 operator*(mat37 obj1, mat76 obj2)
{
	int i, j, k;
	mat36 ans;
	for(i=0; i<3; i++){
		for(j=0; j<6; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<7; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat37 * mat77 = mat37
inline mat37 operator*(mat37 obj1, mat77 obj2)
{
	int i, j, k;
	mat37 ans;
	for(i=0; i<3; i++){
		for(j=0; j<7; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<7; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat37 * mat78 = mat38
inline mat38 operator*(mat37 obj1, mat78 obj2)
{
	int i, j, k;
	mat38 ans;
	for(i=0; i<3; i++){
		for(j=0; j<8; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<7; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat37 * mat79 = mat39
inline mat39 operator*(mat37 obj1, mat79 obj2)
{
	int i, j, k;
	mat39 ans;
	for(i=0; i<3; i++){
		for(j=0; j<9; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<7; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat38 * mat82 = mat32
inline mat32 operator*(mat38 obj1, mat82 obj2)
{
	int i, j, k;
	mat32 ans;
	for(i=0; i<3; i++){
		for(j=0; j<2; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<8; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat38 * mat83 = mat33
inline mat33 operator*(mat38 obj1, mat83 obj2)
{
	int i, j, k;
	mat33 ans;
	for(i=0; i<3; i++){
		for(j=0; j<3; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<8; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat38 * mat84 = mat34
inline mat34 operator*(mat38 obj1, mat84 obj2)
{
	int i, j, k;
	mat34 ans;
	for(i=0; i<3; i++){
		for(j=0; j<4; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<8; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat38 * mat85 = mat35
inline mat35 operator*(mat38 obj1, mat85 obj2)
{
	int i, j, k;
	mat35 ans;
	for(i=0; i<3; i++){
		for(j=0; j<5; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<8; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat38 * mat86 = mat36
inline mat36 operator*(mat38 obj1, mat86 obj2)
{
	int i, j, k;
	mat36 ans;
	for(i=0; i<3; i++){
		for(j=0; j<6; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<8; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat38 * mat87 = mat37
inline mat37 operator*(mat38 obj1, mat87 obj2)
{
	int i, j, k;
	mat37 ans;
	for(i=0; i<3; i++){
		for(j=0; j<7; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<8; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat38 * mat88 = mat38
inline mat38 operator*(mat38 obj1, mat88 obj2)
{
	int i, j, k;
	mat38 ans;
	for(i=0; i<3; i++){
		for(j=0; j<8; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<8; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat38 * mat89 = mat39
inline mat39 operator*(mat38 obj1, mat89 obj2)
{
	int i, j, k;
	mat39 ans;
	for(i=0; i<3; i++){
		for(j=0; j<9; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<8; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat39 * mat92 = mat32
inline mat32 operator*(mat39 obj1, mat92 obj2)
{
	int i, j, k;
	mat32 ans;
	for(i=0; i<3; i++){
		for(j=0; j<2; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<9; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat39 * mat93 = mat33
inline mat33 operator*(mat39 obj1, mat93 obj2)
{
	int i, j, k;
	mat33 ans;
	for(i=0; i<3; i++){
		for(j=0; j<3; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<9; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat39 * mat94 = mat34
inline mat34 operator*(mat39 obj1, mat94 obj2)
{
	int i, j, k;
	mat34 ans;
	for(i=0; i<3; i++){
		for(j=0; j<4; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<9; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat39 * mat95 = mat35
inline mat35 operator*(mat39 obj1, mat95 obj2)
{
	int i, j, k;
	mat35 ans;
	for(i=0; i<3; i++){
		for(j=0; j<5; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<9; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat39 * mat96 = mat36
inline mat36 operator*(mat39 obj1, mat96 obj2)
{
	int i, j, k;
	mat36 ans;
	for(i=0; i<3; i++){
		for(j=0; j<6; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<9; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat39 * mat97 = mat37
inline mat37 operator*(mat39 obj1, mat97 obj2)
{
	int i, j, k;
	mat37 ans;
	for(i=0; i<3; i++){
		for(j=0; j<7; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<9; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat39 * mat98 = mat38
inline mat38 operator*(mat39 obj1, mat98 obj2)
{
	int i, j, k;
	mat38 ans;
	for(i=0; i<3; i++){
		for(j=0; j<8; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<9; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat39 * mat99 = mat39
inline mat39 operator*(mat39 obj1, mat99 obj2)
{
	int i, j, k;
	mat39 ans;
	for(i=0; i<3; i++){
		for(j=0; j<9; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<9; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat42 * mat22 = mat42
inline mat42 operator*(mat42 obj1, mat22 obj2)
{
	int i, j, k;
	mat42 ans;
	for(i=0; i<4; i++){
		for(j=0; j<2; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<2; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat42 * mat23 = mat43
inline mat43 operator*(mat42 obj1, mat23 obj2)
{
	int i, j, k;
	mat43 ans;
	for(i=0; i<4; i++){
		for(j=0; j<3; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<2; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat42 * mat24 = mat44
inline mat44 operator*(mat42 obj1, mat24 obj2)
{
	int i, j, k;
	mat44 ans;
	for(i=0; i<4; i++){
		for(j=0; j<4; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<2; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat42 * mat25 = mat45
inline mat45 operator*(mat42 obj1, mat25 obj2)
{
	int i, j, k;
	mat45 ans;
	for(i=0; i<4; i++){
		for(j=0; j<5; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<2; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat42 * mat26 = mat46
inline mat46 operator*(mat42 obj1, mat26 obj2)
{
	int i, j, k;
	mat46 ans;
	for(i=0; i<4; i++){
		for(j=0; j<6; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<2; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat42 * mat27 = mat47
inline mat47 operator*(mat42 obj1, mat27 obj2)
{
	int i, j, k;
	mat47 ans;
	for(i=0; i<4; i++){
		for(j=0; j<7; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<2; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat42 * mat28 = mat48
inline mat48 operator*(mat42 obj1, mat28 obj2)
{
	int i, j, k;
	mat48 ans;
	for(i=0; i<4; i++){
		for(j=0; j<8; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<2; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat42 * mat29 = mat49
inline mat49 operator*(mat42 obj1, mat29 obj2)
{
	int i, j, k;
	mat49 ans;
	for(i=0; i<4; i++){
		for(j=0; j<9; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<2; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat43 * mat32 = mat42
inline mat42 operator*(mat43 obj1, mat32 obj2)
{
	int i, j, k;
	mat42 ans;
	for(i=0; i<4; i++){
		for(j=0; j<2; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<3; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat43 * mat33 = mat43
inline mat43 operator*(mat43 obj1, mat33 obj2)
{
	int i, j, k;
	mat43 ans;
	for(i=0; i<4; i++){
		for(j=0; j<3; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<3; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat43 * mat34 = mat44
inline mat44 operator*(mat43 obj1, mat34 obj2)
{
	int i, j, k;
	mat44 ans;
	for(i=0; i<4; i++){
		for(j=0; j<4; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<3; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat43 * mat35 = mat45
inline mat45 operator*(mat43 obj1, mat35 obj2)
{
	int i, j, k;
	mat45 ans;
	for(i=0; i<4; i++){
		for(j=0; j<5; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<3; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat43 * mat36 = mat46
inline mat46 operator*(mat43 obj1, mat36 obj2)
{
	int i, j, k;
	mat46 ans;
	for(i=0; i<4; i++){
		for(j=0; j<6; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<3; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat43 * mat37 = mat47
inline mat47 operator*(mat43 obj1, mat37 obj2)
{
	int i, j, k;
	mat47 ans;
	for(i=0; i<4; i++){
		for(j=0; j<7; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<3; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat43 * mat38 = mat48
inline mat48 operator*(mat43 obj1, mat38 obj2)
{
	int i, j, k;
	mat48 ans;
	for(i=0; i<4; i++){
		for(j=0; j<8; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<3; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat43 * mat39 = mat49
inline mat49 operator*(mat43 obj1, mat39 obj2)
{
	int i, j, k;
	mat49 ans;
	for(i=0; i<4; i++){
		for(j=0; j<9; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<3; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat44 * mat42 = mat42
inline mat42 operator*(mat44 obj1, mat42 obj2)
{
	int i, j, k;
	mat42 ans;
	for(i=0; i<4; i++){
		for(j=0; j<2; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<4; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat44 * mat43 = mat43
inline mat43 operator*(mat44 obj1, mat43 obj2)
{
	int i, j, k;
	mat43 ans;
	for(i=0; i<4; i++){
		for(j=0; j<3; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<4; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat44 * mat44 = mat44
inline mat44 operator*(mat44 obj1, mat44 obj2)
{
	int i, j, k;
	mat44 ans;
	for(i=0; i<4; i++){
		for(j=0; j<4; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<4; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat44 * mat45 = mat45
inline mat45 operator*(mat44 obj1, mat45 obj2)
{
	int i, j, k;
	mat45 ans;
	for(i=0; i<4; i++){
		for(j=0; j<5; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<4; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat44 * mat46 = mat46
inline mat46 operator*(mat44 obj1, mat46 obj2)
{
	int i, j, k;
	mat46 ans;
	for(i=0; i<4; i++){
		for(j=0; j<6; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<4; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat44 * mat47 = mat47
inline mat47 operator*(mat44 obj1, mat47 obj2)
{
	int i, j, k;
	mat47 ans;
	for(i=0; i<4; i++){
		for(j=0; j<7; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<4; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat44 * mat48 = mat48
inline mat48 operator*(mat44 obj1, mat48 obj2)
{
	int i, j, k;
	mat48 ans;
	for(i=0; i<4; i++){
		for(j=0; j<8; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<4; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat44 * mat49 = mat49
inline mat49 operator*(mat44 obj1, mat49 obj2)
{
	int i, j, k;
	mat49 ans;
	for(i=0; i<4; i++){
		for(j=0; j<9; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<4; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat45 * mat52 = mat42
inline mat42 operator*(mat45 obj1, mat52 obj2)
{
	int i, j, k;
	mat42 ans;
	for(i=0; i<4; i++){
		for(j=0; j<2; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<5; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat45 * mat53 = mat43
inline mat43 operator*(mat45 obj1, mat53 obj2)
{
	int i, j, k;
	mat43 ans;
	for(i=0; i<4; i++){
		for(j=0; j<3; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<5; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat45 * mat54 = mat44
inline mat44 operator*(mat45 obj1, mat54 obj2)
{
	int i, j, k;
	mat44 ans;
	for(i=0; i<4; i++){
		for(j=0; j<4; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<5; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat45 * mat55 = mat45
inline mat45 operator*(mat45 obj1, mat55 obj2)
{
	int i, j, k;
	mat45 ans;
	for(i=0; i<4; i++){
		for(j=0; j<5; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<5; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat45 * mat56 = mat46
inline mat46 operator*(mat45 obj1, mat56 obj2)
{
	int i, j, k;
	mat46 ans;
	for(i=0; i<4; i++){
		for(j=0; j<6; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<5; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat45 * mat57 = mat47
inline mat47 operator*(mat45 obj1, mat57 obj2)
{
	int i, j, k;
	mat47 ans;
	for(i=0; i<4; i++){
		for(j=0; j<7; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<5; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat45 * mat58 = mat48
inline mat48 operator*(mat45 obj1, mat58 obj2)
{
	int i, j, k;
	mat48 ans;
	for(i=0; i<4; i++){
		for(j=0; j<8; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<5; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat45 * mat59 = mat49
inline mat49 operator*(mat45 obj1, mat59 obj2)
{
	int i, j, k;
	mat49 ans;
	for(i=0; i<4; i++){
		for(j=0; j<9; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<5; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat46 * mat62 = mat42
inline mat42 operator*(mat46 obj1, mat62 obj2)
{
	int i, j, k;
	mat42 ans;
	for(i=0; i<4; i++){
		for(j=0; j<2; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<6; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat46 * mat63 = mat43
inline mat43 operator*(mat46 obj1, mat63 obj2)
{
	int i, j, k;
	mat43 ans;
	for(i=0; i<4; i++){
		for(j=0; j<3; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<6; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat46 * mat64 = mat44
inline mat44 operator*(mat46 obj1, mat64 obj2)
{
	int i, j, k;
	mat44 ans;
	for(i=0; i<4; i++){
		for(j=0; j<4; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<6; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat46 * mat65 = mat45
inline mat45 operator*(mat46 obj1, mat65 obj2)
{
	int i, j, k;
	mat45 ans;
	for(i=0; i<4; i++){
		for(j=0; j<5; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<6; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat46 * mat66 = mat46
inline mat46 operator*(mat46 obj1, mat66 obj2)
{
	int i, j, k;
	mat46 ans;
	for(i=0; i<4; i++){
		for(j=0; j<6; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<6; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat46 * mat67 = mat47
inline mat47 operator*(mat46 obj1, mat67 obj2)
{
	int i, j, k;
	mat47 ans;
	for(i=0; i<4; i++){
		for(j=0; j<7; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<6; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat46 * mat68 = mat48
inline mat48 operator*(mat46 obj1, mat68 obj2)
{
	int i, j, k;
	mat48 ans;
	for(i=0; i<4; i++){
		for(j=0; j<8; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<6; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat46 * mat69 = mat49
inline mat49 operator*(mat46 obj1, mat69 obj2)
{
	int i, j, k;
	mat49 ans;
	for(i=0; i<4; i++){
		for(j=0; j<9; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<6; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat47 * mat72 = mat42
inline mat42 operator*(mat47 obj1, mat72 obj2)
{
	int i, j, k;
	mat42 ans;
	for(i=0; i<4; i++){
		for(j=0; j<2; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<7; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat47 * mat73 = mat43
inline mat43 operator*(mat47 obj1, mat73 obj2)
{
	int i, j, k;
	mat43 ans;
	for(i=0; i<4; i++){
		for(j=0; j<3; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<7; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat47 * mat74 = mat44
inline mat44 operator*(mat47 obj1, mat74 obj2)
{
	int i, j, k;
	mat44 ans;
	for(i=0; i<4; i++){
		for(j=0; j<4; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<7; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat47 * mat75 = mat45
inline mat45 operator*(mat47 obj1, mat75 obj2)
{
	int i, j, k;
	mat45 ans;
	for(i=0; i<4; i++){
		for(j=0; j<5; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<7; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat47 * mat76 = mat46
inline mat46 operator*(mat47 obj1, mat76 obj2)
{
	int i, j, k;
	mat46 ans;
	for(i=0; i<4; i++){
		for(j=0; j<6; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<7; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat47 * mat77 = mat47
inline mat47 operator*(mat47 obj1, mat77 obj2)
{
	int i, j, k;
	mat47 ans;
	for(i=0; i<4; i++){
		for(j=0; j<7; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<7; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat47 * mat78 = mat48
inline mat48 operator*(mat47 obj1, mat78 obj2)
{
	int i, j, k;
	mat48 ans;
	for(i=0; i<4; i++){
		for(j=0; j<8; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<7; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat47 * mat79 = mat49
inline mat49 operator*(mat47 obj1, mat79 obj2)
{
	int i, j, k;
	mat49 ans;
	for(i=0; i<4; i++){
		for(j=0; j<9; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<7; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat48 * mat82 = mat42
inline mat42 operator*(mat48 obj1, mat82 obj2)
{
	int i, j, k;
	mat42 ans;
	for(i=0; i<4; i++){
		for(j=0; j<2; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<8; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat48 * mat83 = mat43
inline mat43 operator*(mat48 obj1, mat83 obj2)
{
	int i, j, k;
	mat43 ans;
	for(i=0; i<4; i++){
		for(j=0; j<3; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<8; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat48 * mat84 = mat44
inline mat44 operator*(mat48 obj1, mat84 obj2)
{
	int i, j, k;
	mat44 ans;
	for(i=0; i<4; i++){
		for(j=0; j<4; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<8; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat48 * mat85 = mat45
inline mat45 operator*(mat48 obj1, mat85 obj2)
{
	int i, j, k;
	mat45 ans;
	for(i=0; i<4; i++){
		for(j=0; j<5; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<8; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat48 * mat86 = mat46
inline mat46 operator*(mat48 obj1, mat86 obj2)
{
	int i, j, k;
	mat46 ans;
	for(i=0; i<4; i++){
		for(j=0; j<6; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<8; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat48 * mat87 = mat47
inline mat47 operator*(mat48 obj1, mat87 obj2)
{
	int i, j, k;
	mat47 ans;
	for(i=0; i<4; i++){
		for(j=0; j<7; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<8; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat48 * mat88 = mat48
inline mat48 operator*(mat48 obj1, mat88 obj2)
{
	int i, j, k;
	mat48 ans;
	for(i=0; i<4; i++){
		for(j=0; j<8; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<8; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat48 * mat89 = mat49
inline mat49 operator*(mat48 obj1, mat89 obj2)
{
	int i, j, k;
	mat49 ans;
	for(i=0; i<4; i++){
		for(j=0; j<9; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<8; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat49 * mat92 = mat42
inline mat42 operator*(mat49 obj1, mat92 obj2)
{
	int i, j, k;
	mat42 ans;
	for(i=0; i<4; i++){
		for(j=0; j<2; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<9; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat49 * mat93 = mat43
inline mat43 operator*(mat49 obj1, mat93 obj2)
{
	int i, j, k;
	mat43 ans;
	for(i=0; i<4; i++){
		for(j=0; j<3; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<9; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat49 * mat94 = mat44
inline mat44 operator*(mat49 obj1, mat94 obj2)
{
	int i, j, k;
	mat44 ans;
	for(i=0; i<4; i++){
		for(j=0; j<4; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<9; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat49 * mat95 = mat45
inline mat45 operator*(mat49 obj1, mat95 obj2)
{
	int i, j, k;
	mat45 ans;
	for(i=0; i<4; i++){
		for(j=0; j<5; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<9; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat49 * mat96 = mat46
inline mat46 operator*(mat49 obj1, mat96 obj2)
{
	int i, j, k;
	mat46 ans;
	for(i=0; i<4; i++){
		for(j=0; j<6; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<9; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat49 * mat97 = mat47
inline mat47 operator*(mat49 obj1, mat97 obj2)
{
	int i, j, k;
	mat47 ans;
	for(i=0; i<4; i++){
		for(j=0; j<7; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<9; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat49 * mat98 = mat48
inline mat48 operator*(mat49 obj1, mat98 obj2)
{
	int i, j, k;
	mat48 ans;
	for(i=0; i<4; i++){
		for(j=0; j<8; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<9; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat49 * mat99 = mat49
inline mat49 operator*(mat49 obj1, mat99 obj2)
{
	int i, j, k;
	mat49 ans;
	for(i=0; i<4; i++){
		for(j=0; j<9; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<9; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat52 * mat22 = mat52
inline mat52 operator*(mat52 obj1, mat22 obj2)
{
	int i, j, k;
	mat52 ans;
	for(i=0; i<5; i++){
		for(j=0; j<2; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<2; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat52 * mat23 = mat53
inline mat53 operator*(mat52 obj1, mat23 obj2)
{
	int i, j, k;
	mat53 ans;
	for(i=0; i<5; i++){
		for(j=0; j<3; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<2; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat52 * mat24 = mat54
inline mat54 operator*(mat52 obj1, mat24 obj2)
{
	int i, j, k;
	mat54 ans;
	for(i=0; i<5; i++){
		for(j=0; j<4; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<2; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat52 * mat25 = mat55
inline mat55 operator*(mat52 obj1, mat25 obj2)
{
	int i, j, k;
	mat55 ans;
	for(i=0; i<5; i++){
		for(j=0; j<5; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<2; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat52 * mat26 = mat56
inline mat56 operator*(mat52 obj1, mat26 obj2)
{
	int i, j, k;
	mat56 ans;
	for(i=0; i<5; i++){
		for(j=0; j<6; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<2; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat52 * mat27 = mat57
inline mat57 operator*(mat52 obj1, mat27 obj2)
{
	int i, j, k;
	mat57 ans;
	for(i=0; i<5; i++){
		for(j=0; j<7; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<2; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat52 * mat28 = mat58
inline mat58 operator*(mat52 obj1, mat28 obj2)
{
	int i, j, k;
	mat58 ans;
	for(i=0; i<5; i++){
		for(j=0; j<8; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<2; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat52 * mat29 = mat59
inline mat59 operator*(mat52 obj1, mat29 obj2)
{
	int i, j, k;
	mat59 ans;
	for(i=0; i<5; i++){
		for(j=0; j<9; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<2; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat53 * mat32 = mat52
inline mat52 operator*(mat53 obj1, mat32 obj2)
{
	int i, j, k;
	mat52 ans;
	for(i=0; i<5; i++){
		for(j=0; j<2; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<3; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat53 * mat33 = mat53
inline mat53 operator*(mat53 obj1, mat33 obj2)
{
	int i, j, k;
	mat53 ans;
	for(i=0; i<5; i++){
		for(j=0; j<3; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<3; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat53 * mat34 = mat54
inline mat54 operator*(mat53 obj1, mat34 obj2)
{
	int i, j, k;
	mat54 ans;
	for(i=0; i<5; i++){
		for(j=0; j<4; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<3; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat53 * mat35 = mat55
inline mat55 operator*(mat53 obj1, mat35 obj2)
{
	int i, j, k;
	mat55 ans;
	for(i=0; i<5; i++){
		for(j=0; j<5; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<3; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat53 * mat36 = mat56
inline mat56 operator*(mat53 obj1, mat36 obj2)
{
	int i, j, k;
	mat56 ans;
	for(i=0; i<5; i++){
		for(j=0; j<6; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<3; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat53 * mat37 = mat57
inline mat57 operator*(mat53 obj1, mat37 obj2)
{
	int i, j, k;
	mat57 ans;
	for(i=0; i<5; i++){
		for(j=0; j<7; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<3; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat53 * mat38 = mat58
inline mat58 operator*(mat53 obj1, mat38 obj2)
{
	int i, j, k;
	mat58 ans;
	for(i=0; i<5; i++){
		for(j=0; j<8; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<3; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat53 * mat39 = mat59
inline mat59 operator*(mat53 obj1, mat39 obj2)
{
	int i, j, k;
	mat59 ans;
	for(i=0; i<5; i++){
		for(j=0; j<9; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<3; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat54 * mat42 = mat52
inline mat52 operator*(mat54 obj1, mat42 obj2)
{
	int i, j, k;
	mat52 ans;
	for(i=0; i<5; i++){
		for(j=0; j<2; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<4; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat54 * mat43 = mat53
inline mat53 operator*(mat54 obj1, mat43 obj2)
{
	int i, j, k;
	mat53 ans;
	for(i=0; i<5; i++){
		for(j=0; j<3; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<4; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat54 * mat44 = mat54
inline mat54 operator*(mat54 obj1, mat44 obj2)
{
	int i, j, k;
	mat54 ans;
	for(i=0; i<5; i++){
		for(j=0; j<4; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<4; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat54 * mat45 = mat55
inline mat55 operator*(mat54 obj1, mat45 obj2)
{
	int i, j, k;
	mat55 ans;
	for(i=0; i<5; i++){
		for(j=0; j<5; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<4; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat54 * mat46 = mat56
inline mat56 operator*(mat54 obj1, mat46 obj2)
{
	int i, j, k;
	mat56 ans;
	for(i=0; i<5; i++){
		for(j=0; j<6; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<4; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat54 * mat47 = mat57
inline mat57 operator*(mat54 obj1, mat47 obj2)
{
	int i, j, k;
	mat57 ans;
	for(i=0; i<5; i++){
		for(j=0; j<7; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<4; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat54 * mat48 = mat58
inline mat58 operator*(mat54 obj1, mat48 obj2)
{
	int i, j, k;
	mat58 ans;
	for(i=0; i<5; i++){
		for(j=0; j<8; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<4; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat54 * mat49 = mat59
inline mat59 operator*(mat54 obj1, mat49 obj2)
{
	int i, j, k;
	mat59 ans;
	for(i=0; i<5; i++){
		for(j=0; j<9; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<4; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat55 * mat52 = mat52
inline mat52 operator*(mat55 obj1, mat52 obj2)
{
	int i, j, k;
	mat52 ans;
	for(i=0; i<5; i++){
		for(j=0; j<2; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<5; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat55 * mat53 = mat53
inline mat53 operator*(mat55 obj1, mat53 obj2)
{
	int i, j, k;
	mat53 ans;
	for(i=0; i<5; i++){
		for(j=0; j<3; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<5; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat55 * mat54 = mat54
inline mat54 operator*(mat55 obj1, mat54 obj2)
{
	int i, j, k;
	mat54 ans;
	for(i=0; i<5; i++){
		for(j=0; j<4; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<5; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat55 * mat55 = mat55
inline mat55 operator*(mat55 obj1, mat55 obj2)
{
	int i, j, k;
	mat55 ans;
	for(i=0; i<5; i++){
		for(j=0; j<5; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<5; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat55 * mat56 = mat56
inline mat56 operator*(mat55 obj1, mat56 obj2)
{
	int i, j, k;
	mat56 ans;
	for(i=0; i<5; i++){
		for(j=0; j<6; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<5; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat55 * mat57 = mat57
inline mat57 operator*(mat55 obj1, mat57 obj2)
{
	int i, j, k;
	mat57 ans;
	for(i=0; i<5; i++){
		for(j=0; j<7; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<5; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat55 * mat58 = mat58
inline mat58 operator*(mat55 obj1, mat58 obj2)
{
	int i, j, k;
	mat58 ans;
	for(i=0; i<5; i++){
		for(j=0; j<8; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<5; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat55 * mat59 = mat59
inline mat59 operator*(mat55 obj1, mat59 obj2)
{
	int i, j, k;
	mat59 ans;
	for(i=0; i<5; i++){
		for(j=0; j<9; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<5; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat56 * mat62 = mat52
inline mat52 operator*(mat56 obj1, mat62 obj2)
{
	int i, j, k;
	mat52 ans;
	for(i=0; i<5; i++){
		for(j=0; j<2; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<6; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat56 * mat63 = mat53
inline mat53 operator*(mat56 obj1, mat63 obj2)
{
	int i, j, k;
	mat53 ans;
	for(i=0; i<5; i++){
		for(j=0; j<3; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<6; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat56 * mat64 = mat54
inline mat54 operator*(mat56 obj1, mat64 obj2)
{
	int i, j, k;
	mat54 ans;
	for(i=0; i<5; i++){
		for(j=0; j<4; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<6; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat56 * mat65 = mat55
inline mat55 operator*(mat56 obj1, mat65 obj2)
{
	int i, j, k;
	mat55 ans;
	for(i=0; i<5; i++){
		for(j=0; j<5; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<6; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat56 * mat66 = mat56
inline mat56 operator*(mat56 obj1, mat66 obj2)
{
	int i, j, k;
	mat56 ans;
	for(i=0; i<5; i++){
		for(j=0; j<6; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<6; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat56 * mat67 = mat57
inline mat57 operator*(mat56 obj1, mat67 obj2)
{
	int i, j, k;
	mat57 ans;
	for(i=0; i<5; i++){
		for(j=0; j<7; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<6; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat56 * mat68 = mat58
inline mat58 operator*(mat56 obj1, mat68 obj2)
{
	int i, j, k;
	mat58 ans;
	for(i=0; i<5; i++){
		for(j=0; j<8; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<6; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat56 * mat69 = mat59
inline mat59 operator*(mat56 obj1, mat69 obj2)
{
	int i, j, k;
	mat59 ans;
	for(i=0; i<5; i++){
		for(j=0; j<9; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<6; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat57 * mat72 = mat52
inline mat52 operator*(mat57 obj1, mat72 obj2)
{
	int i, j, k;
	mat52 ans;
	for(i=0; i<5; i++){
		for(j=0; j<2; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<7; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat57 * mat73 = mat53
inline mat53 operator*(mat57 obj1, mat73 obj2)
{
	int i, j, k;
	mat53 ans;
	for(i=0; i<5; i++){
		for(j=0; j<3; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<7; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat57 * mat74 = mat54
inline mat54 operator*(mat57 obj1, mat74 obj2)
{
	int i, j, k;
	mat54 ans;
	for(i=0; i<5; i++){
		for(j=0; j<4; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<7; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat57 * mat75 = mat55
inline mat55 operator*(mat57 obj1, mat75 obj2)
{
	int i, j, k;
	mat55 ans;
	for(i=0; i<5; i++){
		for(j=0; j<5; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<7; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat57 * mat76 = mat56
inline mat56 operator*(mat57 obj1, mat76 obj2)
{
	int i, j, k;
	mat56 ans;
	for(i=0; i<5; i++){
		for(j=0; j<6; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<7; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat57 * mat77 = mat57
inline mat57 operator*(mat57 obj1, mat77 obj2)
{
	int i, j, k;
	mat57 ans;
	for(i=0; i<5; i++){
		for(j=0; j<7; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<7; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat57 * mat78 = mat58
inline mat58 operator*(mat57 obj1, mat78 obj2)
{
	int i, j, k;
	mat58 ans;
	for(i=0; i<5; i++){
		for(j=0; j<8; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<7; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat57 * mat79 = mat59
inline mat59 operator*(mat57 obj1, mat79 obj2)
{
	int i, j, k;
	mat59 ans;
	for(i=0; i<5; i++){
		for(j=0; j<9; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<7; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat58 * mat82 = mat52
inline mat52 operator*(mat58 obj1, mat82 obj2)
{
	int i, j, k;
	mat52 ans;
	for(i=0; i<5; i++){
		for(j=0; j<2; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<8; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat58 * mat83 = mat53
inline mat53 operator*(mat58 obj1, mat83 obj2)
{
	int i, j, k;
	mat53 ans;
	for(i=0; i<5; i++){
		for(j=0; j<3; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<8; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat58 * mat84 = mat54
inline mat54 operator*(mat58 obj1, mat84 obj2)
{
	int i, j, k;
	mat54 ans;
	for(i=0; i<5; i++){
		for(j=0; j<4; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<8; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat58 * mat85 = mat55
inline mat55 operator*(mat58 obj1, mat85 obj2)
{
	int i, j, k;
	mat55 ans;
	for(i=0; i<5; i++){
		for(j=0; j<5; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<8; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat58 * mat86 = mat56
inline mat56 operator*(mat58 obj1, mat86 obj2)
{
	int i, j, k;
	mat56 ans;
	for(i=0; i<5; i++){
		for(j=0; j<6; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<8; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat58 * mat87 = mat57
inline mat57 operator*(mat58 obj1, mat87 obj2)
{
	int i, j, k;
	mat57 ans;
	for(i=0; i<5; i++){
		for(j=0; j<7; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<8; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat58 * mat88 = mat58
inline mat58 operator*(mat58 obj1, mat88 obj2)
{
	int i, j, k;
	mat58 ans;
	for(i=0; i<5; i++){
		for(j=0; j<8; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<8; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat58 * mat89 = mat59
inline mat59 operator*(mat58 obj1, mat89 obj2)
{
	int i, j, k;
	mat59 ans;
	for(i=0; i<5; i++){
		for(j=0; j<9; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<8; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat59 * mat92 = mat52
inline mat52 operator*(mat59 obj1, mat92 obj2)
{
	int i, j, k;
	mat52 ans;
	for(i=0; i<5; i++){
		for(j=0; j<2; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<9; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat59 * mat93 = mat53
inline mat53 operator*(mat59 obj1, mat93 obj2)
{
	int i, j, k;
	mat53 ans;
	for(i=0; i<5; i++){
		for(j=0; j<3; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<9; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat59 * mat94 = mat54
inline mat54 operator*(mat59 obj1, mat94 obj2)
{
	int i, j, k;
	mat54 ans;
	for(i=0; i<5; i++){
		for(j=0; j<4; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<9; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat59 * mat95 = mat55
inline mat55 operator*(mat59 obj1, mat95 obj2)
{
	int i, j, k;
	mat55 ans;
	for(i=0; i<5; i++){
		for(j=0; j<5; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<9; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat59 * mat96 = mat56
inline mat56 operator*(mat59 obj1, mat96 obj2)
{
	int i, j, k;
	mat56 ans;
	for(i=0; i<5; i++){
		for(j=0; j<6; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<9; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat59 * mat97 = mat57
inline mat57 operator*(mat59 obj1, mat97 obj2)
{
	int i, j, k;
	mat57 ans;
	for(i=0; i<5; i++){
		for(j=0; j<7; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<9; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat59 * mat98 = mat58
inline mat58 operator*(mat59 obj1, mat98 obj2)
{
	int i, j, k;
	mat58 ans;
	for(i=0; i<5; i++){
		for(j=0; j<8; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<9; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat59 * mat99 = mat59
inline mat59 operator*(mat59 obj1, mat99 obj2)
{
	int i, j, k;
	mat59 ans;
	for(i=0; i<5; i++){
		for(j=0; j<9; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<9; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat62 * mat22 = mat62
inline mat62 operator*(mat62 obj1, mat22 obj2)
{
	int i, j, k;
	mat62 ans;
	for(i=0; i<6; i++){
		for(j=0; j<2; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<2; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat62 * mat23 = mat63
inline mat63 operator*(mat62 obj1, mat23 obj2)
{
	int i, j, k;
	mat63 ans;
	for(i=0; i<6; i++){
		for(j=0; j<3; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<2; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat62 * mat24 = mat64
inline mat64 operator*(mat62 obj1, mat24 obj2)
{
	int i, j, k;
	mat64 ans;
	for(i=0; i<6; i++){
		for(j=0; j<4; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<2; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat62 * mat25 = mat65
inline mat65 operator*(mat62 obj1, mat25 obj2)
{
	int i, j, k;
	mat65 ans;
	for(i=0; i<6; i++){
		for(j=0; j<5; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<2; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat62 * mat26 = mat66
inline mat66 operator*(mat62 obj1, mat26 obj2)
{
	int i, j, k;
	mat66 ans;
	for(i=0; i<6; i++){
		for(j=0; j<6; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<2; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat62 * mat27 = mat67
inline mat67 operator*(mat62 obj1, mat27 obj2)
{
	int i, j, k;
	mat67 ans;
	for(i=0; i<6; i++){
		for(j=0; j<7; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<2; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat62 * mat28 = mat68
inline mat68 operator*(mat62 obj1, mat28 obj2)
{
	int i, j, k;
	mat68 ans;
	for(i=0; i<6; i++){
		for(j=0; j<8; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<2; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat62 * mat29 = mat69
inline mat69 operator*(mat62 obj1, mat29 obj2)
{
	int i, j, k;
	mat69 ans;
	for(i=0; i<6; i++){
		for(j=0; j<9; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<2; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat63 * mat32 = mat62
inline mat62 operator*(mat63 obj1, mat32 obj2)
{
	int i, j, k;
	mat62 ans;
	for(i=0; i<6; i++){
		for(j=0; j<2; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<3; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat63 * mat33 = mat63
inline mat63 operator*(mat63 obj1, mat33 obj2)
{
	int i, j, k;
	mat63 ans;
	for(i=0; i<6; i++){
		for(j=0; j<3; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<3; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat63 * mat34 = mat64
inline mat64 operator*(mat63 obj1, mat34 obj2)
{
	int i, j, k;
	mat64 ans;
	for(i=0; i<6; i++){
		for(j=0; j<4; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<3; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat63 * mat35 = mat65
inline mat65 operator*(mat63 obj1, mat35 obj2)
{
	int i, j, k;
	mat65 ans;
	for(i=0; i<6; i++){
		for(j=0; j<5; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<3; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat63 * mat36 = mat66
inline mat66 operator*(mat63 obj1, mat36 obj2)
{
	int i, j, k;
	mat66 ans;
	for(i=0; i<6; i++){
		for(j=0; j<6; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<3; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat63 * mat37 = mat67
inline mat67 operator*(mat63 obj1, mat37 obj2)
{
	int i, j, k;
	mat67 ans;
	for(i=0; i<6; i++){
		for(j=0; j<7; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<3; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat63 * mat38 = mat68
inline mat68 operator*(mat63 obj1, mat38 obj2)
{
	int i, j, k;
	mat68 ans;
	for(i=0; i<6; i++){
		for(j=0; j<8; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<3; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat63 * mat39 = mat69
inline mat69 operator*(mat63 obj1, mat39 obj2)
{
	int i, j, k;
	mat69 ans;
	for(i=0; i<6; i++){
		for(j=0; j<9; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<3; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat64 * mat42 = mat62
inline mat62 operator*(mat64 obj1, mat42 obj2)
{
	int i, j, k;
	mat62 ans;
	for(i=0; i<6; i++){
		for(j=0; j<2; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<4; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat64 * mat43 = mat63
inline mat63 operator*(mat64 obj1, mat43 obj2)
{
	int i, j, k;
	mat63 ans;
	for(i=0; i<6; i++){
		for(j=0; j<3; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<4; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat64 * mat44 = mat64
inline mat64 operator*(mat64 obj1, mat44 obj2)
{
	int i, j, k;
	mat64 ans;
	for(i=0; i<6; i++){
		for(j=0; j<4; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<4; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat64 * mat45 = mat65
inline mat65 operator*(mat64 obj1, mat45 obj2)
{
	int i, j, k;
	mat65 ans;
	for(i=0; i<6; i++){
		for(j=0; j<5; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<4; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat64 * mat46 = mat66
inline mat66 operator*(mat64 obj1, mat46 obj2)
{
	int i, j, k;
	mat66 ans;
	for(i=0; i<6; i++){
		for(j=0; j<6; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<4; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat64 * mat47 = mat67
inline mat67 operator*(mat64 obj1, mat47 obj2)
{
	int i, j, k;
	mat67 ans;
	for(i=0; i<6; i++){
		for(j=0; j<7; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<4; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat64 * mat48 = mat68
inline mat68 operator*(mat64 obj1, mat48 obj2)
{
	int i, j, k;
	mat68 ans;
	for(i=0; i<6; i++){
		for(j=0; j<8; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<4; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat64 * mat49 = mat69
inline mat69 operator*(mat64 obj1, mat49 obj2)
{
	int i, j, k;
	mat69 ans;
	for(i=0; i<6; i++){
		for(j=0; j<9; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<4; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat65 * mat52 = mat62
inline mat62 operator*(mat65 obj1, mat52 obj2)
{
	int i, j, k;
	mat62 ans;
	for(i=0; i<6; i++){
		for(j=0; j<2; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<5; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat65 * mat53 = mat63
inline mat63 operator*(mat65 obj1, mat53 obj2)
{
	int i, j, k;
	mat63 ans;
	for(i=0; i<6; i++){
		for(j=0; j<3; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<5; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat65 * mat54 = mat64
inline mat64 operator*(mat65 obj1, mat54 obj2)
{
	int i, j, k;
	mat64 ans;
	for(i=0; i<6; i++){
		for(j=0; j<4; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<5; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat65 * mat55 = mat65
inline mat65 operator*(mat65 obj1, mat55 obj2)
{
	int i, j, k;
	mat65 ans;
	for(i=0; i<6; i++){
		for(j=0; j<5; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<5; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat65 * mat56 = mat66
inline mat66 operator*(mat65 obj1, mat56 obj2)
{
	int i, j, k;
	mat66 ans;
	for(i=0; i<6; i++){
		for(j=0; j<6; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<5; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat65 * mat57 = mat67
inline mat67 operator*(mat65 obj1, mat57 obj2)
{
	int i, j, k;
	mat67 ans;
	for(i=0; i<6; i++){
		for(j=0; j<7; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<5; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat65 * mat58 = mat68
inline mat68 operator*(mat65 obj1, mat58 obj2)
{
	int i, j, k;
	mat68 ans;
	for(i=0; i<6; i++){
		for(j=0; j<8; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<5; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat65 * mat59 = mat69
inline mat69 operator*(mat65 obj1, mat59 obj2)
{
	int i, j, k;
	mat69 ans;
	for(i=0; i<6; i++){
		for(j=0; j<9; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<5; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat66 * mat62 = mat62
inline mat62 operator*(mat66 obj1, mat62 obj2)
{
	int i, j, k;
	mat62 ans;
	for(i=0; i<6; i++){
		for(j=0; j<2; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<6; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat66 * mat63 = mat63
inline mat63 operator*(mat66 obj1, mat63 obj2)
{
	int i, j, k;
	mat63 ans;
	for(i=0; i<6; i++){
		for(j=0; j<3; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<6; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat66 * mat64 = mat64
inline mat64 operator*(mat66 obj1, mat64 obj2)
{
	int i, j, k;
	mat64 ans;
	for(i=0; i<6; i++){
		for(j=0; j<4; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<6; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat66 * mat65 = mat65
inline mat65 operator*(mat66 obj1, mat65 obj2)
{
	int i, j, k;
	mat65 ans;
	for(i=0; i<6; i++){
		for(j=0; j<5; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<6; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat66 * mat66 = mat66
inline mat66 operator*(mat66 obj1, mat66 obj2)
{
	int i, j, k;
	mat66 ans;
	for(i=0; i<6; i++){
		for(j=0; j<6; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<6; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat66 * mat67 = mat67
inline mat67 operator*(mat66 obj1, mat67 obj2)
{
	int i, j, k;
	mat67 ans;
	for(i=0; i<6; i++){
		for(j=0; j<7; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<6; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat66 * mat68 = mat68
inline mat68 operator*(mat66 obj1, mat68 obj2)
{
	int i, j, k;
	mat68 ans;
	for(i=0; i<6; i++){
		for(j=0; j<8; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<6; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat66 * mat69 = mat69
inline mat69 operator*(mat66 obj1, mat69 obj2)
{
	int i, j, k;
	mat69 ans;
	for(i=0; i<6; i++){
		for(j=0; j<9; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<6; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat67 * mat72 = mat62
inline mat62 operator*(mat67 obj1, mat72 obj2)
{
	int i, j, k;
	mat62 ans;
	for(i=0; i<6; i++){
		for(j=0; j<2; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<7; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat67 * mat73 = mat63
inline mat63 operator*(mat67 obj1, mat73 obj2)
{
	int i, j, k;
	mat63 ans;
	for(i=0; i<6; i++){
		for(j=0; j<3; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<7; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat67 * mat74 = mat64
inline mat64 operator*(mat67 obj1, mat74 obj2)
{
	int i, j, k;
	mat64 ans;
	for(i=0; i<6; i++){
		for(j=0; j<4; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<7; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat67 * mat75 = mat65
inline mat65 operator*(mat67 obj1, mat75 obj2)
{
	int i, j, k;
	mat65 ans;
	for(i=0; i<6; i++){
		for(j=0; j<5; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<7; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat67 * mat76 = mat66
inline mat66 operator*(mat67 obj1, mat76 obj2)
{
	int i, j, k;
	mat66 ans;
	for(i=0; i<6; i++){
		for(j=0; j<6; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<7; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat67 * mat77 = mat67
inline mat67 operator*(mat67 obj1, mat77 obj2)
{
	int i, j, k;
	mat67 ans;
	for(i=0; i<6; i++){
		for(j=0; j<7; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<7; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat67 * mat78 = mat68
inline mat68 operator*(mat67 obj1, mat78 obj2)
{
	int i, j, k;
	mat68 ans;
	for(i=0; i<6; i++){
		for(j=0; j<8; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<7; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat67 * mat79 = mat69
inline mat69 operator*(mat67 obj1, mat79 obj2)
{
	int i, j, k;
	mat69 ans;
	for(i=0; i<6; i++){
		for(j=0; j<9; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<7; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat68 * mat82 = mat62
inline mat62 operator*(mat68 obj1, mat82 obj2)
{
	int i, j, k;
	mat62 ans;
	for(i=0; i<6; i++){
		for(j=0; j<2; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<8; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat68 * mat83 = mat63
inline mat63 operator*(mat68 obj1, mat83 obj2)
{
	int i, j, k;
	mat63 ans;
	for(i=0; i<6; i++){
		for(j=0; j<3; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<8; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat68 * mat84 = mat64
inline mat64 operator*(mat68 obj1, mat84 obj2)
{
	int i, j, k;
	mat64 ans;
	for(i=0; i<6; i++){
		for(j=0; j<4; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<8; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat68 * mat85 = mat65
inline mat65 operator*(mat68 obj1, mat85 obj2)
{
	int i, j, k;
	mat65 ans;
	for(i=0; i<6; i++){
		for(j=0; j<5; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<8; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat68 * mat86 = mat66
inline mat66 operator*(mat68 obj1, mat86 obj2)
{
	int i, j, k;
	mat66 ans;
	for(i=0; i<6; i++){
		for(j=0; j<6; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<8; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat68 * mat87 = mat67
inline mat67 operator*(mat68 obj1, mat87 obj2)
{
	int i, j, k;
	mat67 ans;
	for(i=0; i<6; i++){
		for(j=0; j<7; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<8; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat68 * mat88 = mat68
inline mat68 operator*(mat68 obj1, mat88 obj2)
{
	int i, j, k;
	mat68 ans;
	for(i=0; i<6; i++){
		for(j=0; j<8; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<8; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat68 * mat89 = mat69
inline mat69 operator*(mat68 obj1, mat89 obj2)
{
	int i, j, k;
	mat69 ans;
	for(i=0; i<6; i++){
		for(j=0; j<9; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<8; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat69 * mat92 = mat62
inline mat62 operator*(mat69 obj1, mat92 obj2)
{
	int i, j, k;
	mat62 ans;
	for(i=0; i<6; i++){
		for(j=0; j<2; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<9; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat69 * mat93 = mat63
inline mat63 operator*(mat69 obj1, mat93 obj2)
{
	int i, j, k;
	mat63 ans;
	for(i=0; i<6; i++){
		for(j=0; j<3; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<9; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat69 * mat94 = mat64
inline mat64 operator*(mat69 obj1, mat94 obj2)
{
	int i, j, k;
	mat64 ans;
	for(i=0; i<6; i++){
		for(j=0; j<4; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<9; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat69 * mat95 = mat65
inline mat65 operator*(mat69 obj1, mat95 obj2)
{
	int i, j, k;
	mat65 ans;
	for(i=0; i<6; i++){
		for(j=0; j<5; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<9; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat69 * mat96 = mat66
inline mat66 operator*(mat69 obj1, mat96 obj2)
{
	int i, j, k;
	mat66 ans;
	for(i=0; i<6; i++){
		for(j=0; j<6; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<9; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat69 * mat97 = mat67
inline mat67 operator*(mat69 obj1, mat97 obj2)
{
	int i, j, k;
	mat67 ans;
	for(i=0; i<6; i++){
		for(j=0; j<7; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<9; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat69 * mat98 = mat68
inline mat68 operator*(mat69 obj1, mat98 obj2)
{
	int i, j, k;
	mat68 ans;
	for(i=0; i<6; i++){
		for(j=0; j<8; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<9; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat69 * mat99 = mat69
inline mat69 operator*(mat69 obj1, mat99 obj2)
{
	int i, j, k;
	mat69 ans;
	for(i=0; i<6; i++){
		for(j=0; j<9; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<9; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat72 * mat22 = mat72
inline mat72 operator*(mat72 obj1, mat22 obj2)
{
	int i, j, k;
	mat72 ans;
	for(i=0; i<7; i++){
		for(j=0; j<2; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<2; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat72 * mat23 = mat73
inline mat73 operator*(mat72 obj1, mat23 obj2)
{
	int i, j, k;
	mat73 ans;
	for(i=0; i<7; i++){
		for(j=0; j<3; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<2; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat72 * mat24 = mat74
inline mat74 operator*(mat72 obj1, mat24 obj2)
{
	int i, j, k;
	mat74 ans;
	for(i=0; i<7; i++){
		for(j=0; j<4; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<2; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat72 * mat25 = mat75
inline mat75 operator*(mat72 obj1, mat25 obj2)
{
	int i, j, k;
	mat75 ans;
	for(i=0; i<7; i++){
		for(j=0; j<5; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<2; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat72 * mat26 = mat76
inline mat76 operator*(mat72 obj1, mat26 obj2)
{
	int i, j, k;
	mat76 ans;
	for(i=0; i<7; i++){
		for(j=0; j<6; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<2; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat72 * mat27 = mat77
inline mat77 operator*(mat72 obj1, mat27 obj2)
{
	int i, j, k;
	mat77 ans;
	for(i=0; i<7; i++){
		for(j=0; j<7; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<2; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat72 * mat28 = mat78
inline mat78 operator*(mat72 obj1, mat28 obj2)
{
	int i, j, k;
	mat78 ans;
	for(i=0; i<7; i++){
		for(j=0; j<8; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<2; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat72 * mat29 = mat79
inline mat79 operator*(mat72 obj1, mat29 obj2)
{
	int i, j, k;
	mat79 ans;
	for(i=0; i<7; i++){
		for(j=0; j<9; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<2; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat73 * mat32 = mat72
inline mat72 operator*(mat73 obj1, mat32 obj2)
{
	int i, j, k;
	mat72 ans;
	for(i=0; i<7; i++){
		for(j=0; j<2; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<3; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat73 * mat33 = mat73
inline mat73 operator*(mat73 obj1, mat33 obj2)
{
	int i, j, k;
	mat73 ans;
	for(i=0; i<7; i++){
		for(j=0; j<3; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<3; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat73 * mat34 = mat74
inline mat74 operator*(mat73 obj1, mat34 obj2)
{
	int i, j, k;
	mat74 ans;
	for(i=0; i<7; i++){
		for(j=0; j<4; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<3; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat73 * mat35 = mat75
inline mat75 operator*(mat73 obj1, mat35 obj2)
{
	int i, j, k;
	mat75 ans;
	for(i=0; i<7; i++){
		for(j=0; j<5; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<3; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat73 * mat36 = mat76
inline mat76 operator*(mat73 obj1, mat36 obj2)
{
	int i, j, k;
	mat76 ans;
	for(i=0; i<7; i++){
		for(j=0; j<6; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<3; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat73 * mat37 = mat77
inline mat77 operator*(mat73 obj1, mat37 obj2)
{
	int i, j, k;
	mat77 ans;
	for(i=0; i<7; i++){
		for(j=0; j<7; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<3; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat73 * mat38 = mat78
inline mat78 operator*(mat73 obj1, mat38 obj2)
{
	int i, j, k;
	mat78 ans;
	for(i=0; i<7; i++){
		for(j=0; j<8; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<3; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat73 * mat39 = mat79
inline mat79 operator*(mat73 obj1, mat39 obj2)
{
	int i, j, k;
	mat79 ans;
	for(i=0; i<7; i++){
		for(j=0; j<9; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<3; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat74 * mat42 = mat72
inline mat72 operator*(mat74 obj1, mat42 obj2)
{
	int i, j, k;
	mat72 ans;
	for(i=0; i<7; i++){
		for(j=0; j<2; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<4; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat74 * mat43 = mat73
inline mat73 operator*(mat74 obj1, mat43 obj2)
{
	int i, j, k;
	mat73 ans;
	for(i=0; i<7; i++){
		for(j=0; j<3; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<4; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat74 * mat44 = mat74
inline mat74 operator*(mat74 obj1, mat44 obj2)
{
	int i, j, k;
	mat74 ans;
	for(i=0; i<7; i++){
		for(j=0; j<4; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<4; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat74 * mat45 = mat75
inline mat75 operator*(mat74 obj1, mat45 obj2)
{
	int i, j, k;
	mat75 ans;
	for(i=0; i<7; i++){
		for(j=0; j<5; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<4; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat74 * mat46 = mat76
inline mat76 operator*(mat74 obj1, mat46 obj2)
{
	int i, j, k;
	mat76 ans;
	for(i=0; i<7; i++){
		for(j=0; j<6; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<4; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat74 * mat47 = mat77
inline mat77 operator*(mat74 obj1, mat47 obj2)
{
	int i, j, k;
	mat77 ans;
	for(i=0; i<7; i++){
		for(j=0; j<7; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<4; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat74 * mat48 = mat78
inline mat78 operator*(mat74 obj1, mat48 obj2)
{
	int i, j, k;
	mat78 ans;
	for(i=0; i<7; i++){
		for(j=0; j<8; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<4; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat74 * mat49 = mat79
inline mat79 operator*(mat74 obj1, mat49 obj2)
{
	int i, j, k;
	mat79 ans;
	for(i=0; i<7; i++){
		for(j=0; j<9; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<4; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat75 * mat52 = mat72
inline mat72 operator*(mat75 obj1, mat52 obj2)
{
	int i, j, k;
	mat72 ans;
	for(i=0; i<7; i++){
		for(j=0; j<2; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<5; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat75 * mat53 = mat73
inline mat73 operator*(mat75 obj1, mat53 obj2)
{
	int i, j, k;
	mat73 ans;
	for(i=0; i<7; i++){
		for(j=0; j<3; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<5; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat75 * mat54 = mat74
inline mat74 operator*(mat75 obj1, mat54 obj2)
{
	int i, j, k;
	mat74 ans;
	for(i=0; i<7; i++){
		for(j=0; j<4; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<5; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat75 * mat55 = mat75
inline mat75 operator*(mat75 obj1, mat55 obj2)
{
	int i, j, k;
	mat75 ans;
	for(i=0; i<7; i++){
		for(j=0; j<5; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<5; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat75 * mat56 = mat76
inline mat76 operator*(mat75 obj1, mat56 obj2)
{
	int i, j, k;
	mat76 ans;
	for(i=0; i<7; i++){
		for(j=0; j<6; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<5; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat75 * mat57 = mat77
inline mat77 operator*(mat75 obj1, mat57 obj2)
{
	int i, j, k;
	mat77 ans;
	for(i=0; i<7; i++){
		for(j=0; j<7; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<5; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat75 * mat58 = mat78
inline mat78 operator*(mat75 obj1, mat58 obj2)
{
	int i, j, k;
	mat78 ans;
	for(i=0; i<7; i++){
		for(j=0; j<8; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<5; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat75 * mat59 = mat79
inline mat79 operator*(mat75 obj1, mat59 obj2)
{
	int i, j, k;
	mat79 ans;
	for(i=0; i<7; i++){
		for(j=0; j<9; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<5; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat76 * mat62 = mat72
inline mat72 operator*(mat76 obj1, mat62 obj2)
{
	int i, j, k;
	mat72 ans;
	for(i=0; i<7; i++){
		for(j=0; j<2; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<6; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat76 * mat63 = mat73
inline mat73 operator*(mat76 obj1, mat63 obj2)
{
	int i, j, k;
	mat73 ans;
	for(i=0; i<7; i++){
		for(j=0; j<3; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<6; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat76 * mat64 = mat74
inline mat74 operator*(mat76 obj1, mat64 obj2)
{
	int i, j, k;
	mat74 ans;
	for(i=0; i<7; i++){
		for(j=0; j<4; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<6; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat76 * mat65 = mat75
inline mat75 operator*(mat76 obj1, mat65 obj2)
{
	int i, j, k;
	mat75 ans;
	for(i=0; i<7; i++){
		for(j=0; j<5; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<6; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat76 * mat66 = mat76
inline mat76 operator*(mat76 obj1, mat66 obj2)
{
	int i, j, k;
	mat76 ans;
	for(i=0; i<7; i++){
		for(j=0; j<6; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<6; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat76 * mat67 = mat77
inline mat77 operator*(mat76 obj1, mat67 obj2)
{
	int i, j, k;
	mat77 ans;
	for(i=0; i<7; i++){
		for(j=0; j<7; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<6; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat76 * mat68 = mat78
inline mat78 operator*(mat76 obj1, mat68 obj2)
{
	int i, j, k;
	mat78 ans;
	for(i=0; i<7; i++){
		for(j=0; j<8; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<6; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat76 * mat69 = mat79
inline mat79 operator*(mat76 obj1, mat69 obj2)
{
	int i, j, k;
	mat79 ans;
	for(i=0; i<7; i++){
		for(j=0; j<9; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<6; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat77 * mat72 = mat72
inline mat72 operator*(mat77 obj1, mat72 obj2)
{
	int i, j, k;
	mat72 ans;
	for(i=0; i<7; i++){
		for(j=0; j<2; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<7; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat77 * mat73 = mat73
inline mat73 operator*(mat77 obj1, mat73 obj2)
{
	int i, j, k;
	mat73 ans;
	for(i=0; i<7; i++){
		for(j=0; j<3; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<7; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat77 * mat74 = mat74
inline mat74 operator*(mat77 obj1, mat74 obj2)
{
	int i, j, k;
	mat74 ans;
	for(i=0; i<7; i++){
		for(j=0; j<4; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<7; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat77 * mat75 = mat75
inline mat75 operator*(mat77 obj1, mat75 obj2)
{
	int i, j, k;
	mat75 ans;
	for(i=0; i<7; i++){
		for(j=0; j<5; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<7; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat77 * mat76 = mat76
inline mat76 operator*(mat77 obj1, mat76 obj2)
{
	int i, j, k;
	mat76 ans;
	for(i=0; i<7; i++){
		for(j=0; j<6; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<7; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat77 * mat77 = mat77
inline mat77 operator*(mat77 obj1, mat77 obj2)
{
	int i, j, k;
	mat77 ans;
	for(i=0; i<7; i++){
		for(j=0; j<7; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<7; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat77 * mat78 = mat78
inline mat78 operator*(mat77 obj1, mat78 obj2)
{
	int i, j, k;
	mat78 ans;
	for(i=0; i<7; i++){
		for(j=0; j<8; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<7; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat77 * mat79 = mat79
inline mat79 operator*(mat77 obj1, mat79 obj2)
{
	int i, j, k;
	mat79 ans;
	for(i=0; i<7; i++){
		for(j=0; j<9; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<7; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat78 * mat82 = mat72
inline mat72 operator*(mat78 obj1, mat82 obj2)
{
	int i, j, k;
	mat72 ans;
	for(i=0; i<7; i++){
		for(j=0; j<2; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<8; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat78 * mat83 = mat73
inline mat73 operator*(mat78 obj1, mat83 obj2)
{
	int i, j, k;
	mat73 ans;
	for(i=0; i<7; i++){
		for(j=0; j<3; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<8; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat78 * mat84 = mat74
inline mat74 operator*(mat78 obj1, mat84 obj2)
{
	int i, j, k;
	mat74 ans;
	for(i=0; i<7; i++){
		for(j=0; j<4; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<8; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat78 * mat85 = mat75
inline mat75 operator*(mat78 obj1, mat85 obj2)
{
	int i, j, k;
	mat75 ans;
	for(i=0; i<7; i++){
		for(j=0; j<5; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<8; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat78 * mat86 = mat76
inline mat76 operator*(mat78 obj1, mat86 obj2)
{
	int i, j, k;
	mat76 ans;
	for(i=0; i<7; i++){
		for(j=0; j<6; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<8; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat78 * mat87 = mat77
inline mat77 operator*(mat78 obj1, mat87 obj2)
{
	int i, j, k;
	mat77 ans;
	for(i=0; i<7; i++){
		for(j=0; j<7; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<8; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat78 * mat88 = mat78
inline mat78 operator*(mat78 obj1, mat88 obj2)
{
	int i, j, k;
	mat78 ans;
	for(i=0; i<7; i++){
		for(j=0; j<8; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<8; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat78 * mat89 = mat79
inline mat79 operator*(mat78 obj1, mat89 obj2)
{
	int i, j, k;
	mat79 ans;
	for(i=0; i<7; i++){
		for(j=0; j<9; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<8; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat79 * mat92 = mat72
inline mat72 operator*(mat79 obj1, mat92 obj2)
{
	int i, j, k;
	mat72 ans;
	for(i=0; i<7; i++){
		for(j=0; j<2; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<9; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat79 * mat93 = mat73
inline mat73 operator*(mat79 obj1, mat93 obj2)
{
	int i, j, k;
	mat73 ans;
	for(i=0; i<7; i++){
		for(j=0; j<3; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<9; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat79 * mat94 = mat74
inline mat74 operator*(mat79 obj1, mat94 obj2)
{
	int i, j, k;
	mat74 ans;
	for(i=0; i<7; i++){
		for(j=0; j<4; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<9; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat79 * mat95 = mat75
inline mat75 operator*(mat79 obj1, mat95 obj2)
{
	int i, j, k;
	mat75 ans;
	for(i=0; i<7; i++){
		for(j=0; j<5; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<9; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat79 * mat96 = mat76
inline mat76 operator*(mat79 obj1, mat96 obj2)
{
	int i, j, k;
	mat76 ans;
	for(i=0; i<7; i++){
		for(j=0; j<6; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<9; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat79 * mat97 = mat77
inline mat77 operator*(mat79 obj1, mat97 obj2)
{
	int i, j, k;
	mat77 ans;
	for(i=0; i<7; i++){
		for(j=0; j<7; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<9; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat79 * mat98 = mat78
inline mat78 operator*(mat79 obj1, mat98 obj2)
{
	int i, j, k;
	mat78 ans;
	for(i=0; i<7; i++){
		for(j=0; j<8; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<9; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat79 * mat99 = mat79
inline mat79 operator*(mat79 obj1, mat99 obj2)
{
	int i, j, k;
	mat79 ans;
	for(i=0; i<7; i++){
		for(j=0; j<9; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<9; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat82 * mat22 = mat82
inline mat82 operator*(mat82 obj1, mat22 obj2)
{
	int i, j, k;
	mat82 ans;
	for(i=0; i<8; i++){
		for(j=0; j<2; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<2; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat82 * mat23 = mat83
inline mat83 operator*(mat82 obj1, mat23 obj2)
{
	int i, j, k;
	mat83 ans;
	for(i=0; i<8; i++){
		for(j=0; j<3; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<2; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat82 * mat24 = mat84
inline mat84 operator*(mat82 obj1, mat24 obj2)
{
	int i, j, k;
	mat84 ans;
	for(i=0; i<8; i++){
		for(j=0; j<4; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<2; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat82 * mat25 = mat85
inline mat85 operator*(mat82 obj1, mat25 obj2)
{
	int i, j, k;
	mat85 ans;
	for(i=0; i<8; i++){
		for(j=0; j<5; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<2; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat82 * mat26 = mat86
inline mat86 operator*(mat82 obj1, mat26 obj2)
{
	int i, j, k;
	mat86 ans;
	for(i=0; i<8; i++){
		for(j=0; j<6; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<2; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat82 * mat27 = mat87
inline mat87 operator*(mat82 obj1, mat27 obj2)
{
	int i, j, k;
	mat87 ans;
	for(i=0; i<8; i++){
		for(j=0; j<7; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<2; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat82 * mat28 = mat88
inline mat88 operator*(mat82 obj1, mat28 obj2)
{
	int i, j, k;
	mat88 ans;
	for(i=0; i<8; i++){
		for(j=0; j<8; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<2; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat82 * mat29 = mat89
inline mat89 operator*(mat82 obj1, mat29 obj2)
{
	int i, j, k;
	mat89 ans;
	for(i=0; i<8; i++){
		for(j=0; j<9; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<2; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat83 * mat32 = mat82
inline mat82 operator*(mat83 obj1, mat32 obj2)
{
	int i, j, k;
	mat82 ans;
	for(i=0; i<8; i++){
		for(j=0; j<2; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<3; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat83 * mat33 = mat83
inline mat83 operator*(mat83 obj1, mat33 obj2)
{
	int i, j, k;
	mat83 ans;
	for(i=0; i<8; i++){
		for(j=0; j<3; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<3; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat83 * mat34 = mat84
inline mat84 operator*(mat83 obj1, mat34 obj2)
{
	int i, j, k;
	mat84 ans;
	for(i=0; i<8; i++){
		for(j=0; j<4; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<3; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat83 * mat35 = mat85
inline mat85 operator*(mat83 obj1, mat35 obj2)
{
	int i, j, k;
	mat85 ans;
	for(i=0; i<8; i++){
		for(j=0; j<5; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<3; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat83 * mat36 = mat86
inline mat86 operator*(mat83 obj1, mat36 obj2)
{
	int i, j, k;
	mat86 ans;
	for(i=0; i<8; i++){
		for(j=0; j<6; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<3; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat83 * mat37 = mat87
inline mat87 operator*(mat83 obj1, mat37 obj2)
{
	int i, j, k;
	mat87 ans;
	for(i=0; i<8; i++){
		for(j=0; j<7; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<3; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat83 * mat38 = mat88
inline mat88 operator*(mat83 obj1, mat38 obj2)
{
	int i, j, k;
	mat88 ans;
	for(i=0; i<8; i++){
		for(j=0; j<8; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<3; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat83 * mat39 = mat89
inline mat89 operator*(mat83 obj1, mat39 obj2)
{
	int i, j, k;
	mat89 ans;
	for(i=0; i<8; i++){
		for(j=0; j<9; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<3; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat84 * mat42 = mat82
inline mat82 operator*(mat84 obj1, mat42 obj2)
{
	int i, j, k;
	mat82 ans;
	for(i=0; i<8; i++){
		for(j=0; j<2; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<4; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat84 * mat43 = mat83
inline mat83 operator*(mat84 obj1, mat43 obj2)
{
	int i, j, k;
	mat83 ans;
	for(i=0; i<8; i++){
		for(j=0; j<3; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<4; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat84 * mat44 = mat84
inline mat84 operator*(mat84 obj1, mat44 obj2)
{
	int i, j, k;
	mat84 ans;
	for(i=0; i<8; i++){
		for(j=0; j<4; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<4; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat84 * mat45 = mat85
inline mat85 operator*(mat84 obj1, mat45 obj2)
{
	int i, j, k;
	mat85 ans;
	for(i=0; i<8; i++){
		for(j=0; j<5; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<4; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat84 * mat46 = mat86
inline mat86 operator*(mat84 obj1, mat46 obj2)
{
	int i, j, k;
	mat86 ans;
	for(i=0; i<8; i++){
		for(j=0; j<6; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<4; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat84 * mat47 = mat87
inline mat87 operator*(mat84 obj1, mat47 obj2)
{
	int i, j, k;
	mat87 ans;
	for(i=0; i<8; i++){
		for(j=0; j<7; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<4; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat84 * mat48 = mat88
inline mat88 operator*(mat84 obj1, mat48 obj2)
{
	int i, j, k;
	mat88 ans;
	for(i=0; i<8; i++){
		for(j=0; j<8; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<4; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat84 * mat49 = mat89
inline mat89 operator*(mat84 obj1, mat49 obj2)
{
	int i, j, k;
	mat89 ans;
	for(i=0; i<8; i++){
		for(j=0; j<9; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<4; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat85 * mat52 = mat82
inline mat82 operator*(mat85 obj1, mat52 obj2)
{
	int i, j, k;
	mat82 ans;
	for(i=0; i<8; i++){
		for(j=0; j<2; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<5; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat85 * mat53 = mat83
inline mat83 operator*(mat85 obj1, mat53 obj2)
{
	int i, j, k;
	mat83 ans;
	for(i=0; i<8; i++){
		for(j=0; j<3; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<5; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat85 * mat54 = mat84
inline mat84 operator*(mat85 obj1, mat54 obj2)
{
	int i, j, k;
	mat84 ans;
	for(i=0; i<8; i++){
		for(j=0; j<4; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<5; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat85 * mat55 = mat85
inline mat85 operator*(mat85 obj1, mat55 obj2)
{
	int i, j, k;
	mat85 ans;
	for(i=0; i<8; i++){
		for(j=0; j<5; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<5; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat85 * mat56 = mat86
inline mat86 operator*(mat85 obj1, mat56 obj2)
{
	int i, j, k;
	mat86 ans;
	for(i=0; i<8; i++){
		for(j=0; j<6; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<5; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat85 * mat57 = mat87
inline mat87 operator*(mat85 obj1, mat57 obj2)
{
	int i, j, k;
	mat87 ans;
	for(i=0; i<8; i++){
		for(j=0; j<7; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<5; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat85 * mat58 = mat88
inline mat88 operator*(mat85 obj1, mat58 obj2)
{
	int i, j, k;
	mat88 ans;
	for(i=0; i<8; i++){
		for(j=0; j<8; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<5; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat85 * mat59 = mat89
inline mat89 operator*(mat85 obj1, mat59 obj2)
{
	int i, j, k;
	mat89 ans;
	for(i=0; i<8; i++){
		for(j=0; j<9; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<5; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat86 * mat62 = mat82
inline mat82 operator*(mat86 obj1, mat62 obj2)
{
	int i, j, k;
	mat82 ans;
	for(i=0; i<8; i++){
		for(j=0; j<2; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<6; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat86 * mat63 = mat83
inline mat83 operator*(mat86 obj1, mat63 obj2)
{
	int i, j, k;
	mat83 ans;
	for(i=0; i<8; i++){
		for(j=0; j<3; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<6; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat86 * mat64 = mat84
inline mat84 operator*(mat86 obj1, mat64 obj2)
{
	int i, j, k;
	mat84 ans;
	for(i=0; i<8; i++){
		for(j=0; j<4; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<6; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat86 * mat65 = mat85
inline mat85 operator*(mat86 obj1, mat65 obj2)
{
	int i, j, k;
	mat85 ans;
	for(i=0; i<8; i++){
		for(j=0; j<5; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<6; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat86 * mat66 = mat86
inline mat86 operator*(mat86 obj1, mat66 obj2)
{
	int i, j, k;
	mat86 ans;
	for(i=0; i<8; i++){
		for(j=0; j<6; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<6; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat86 * mat67 = mat87
inline mat87 operator*(mat86 obj1, mat67 obj2)
{
	int i, j, k;
	mat87 ans;
	for(i=0; i<8; i++){
		for(j=0; j<7; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<6; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat86 * mat68 = mat88
inline mat88 operator*(mat86 obj1, mat68 obj2)
{
	int i, j, k;
	mat88 ans;
	for(i=0; i<8; i++){
		for(j=0; j<8; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<6; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat86 * mat69 = mat89
inline mat89 operator*(mat86 obj1, mat69 obj2)
{
	int i, j, k;
	mat89 ans;
	for(i=0; i<8; i++){
		for(j=0; j<9; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<6; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat87 * mat72 = mat82
inline mat82 operator*(mat87 obj1, mat72 obj2)
{
	int i, j, k;
	mat82 ans;
	for(i=0; i<8; i++){
		for(j=0; j<2; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<7; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat87 * mat73 = mat83
inline mat83 operator*(mat87 obj1, mat73 obj2)
{
	int i, j, k;
	mat83 ans;
	for(i=0; i<8; i++){
		for(j=0; j<3; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<7; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat87 * mat74 = mat84
inline mat84 operator*(mat87 obj1, mat74 obj2)
{
	int i, j, k;
	mat84 ans;
	for(i=0; i<8; i++){
		for(j=0; j<4; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<7; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat87 * mat75 = mat85
inline mat85 operator*(mat87 obj1, mat75 obj2)
{
	int i, j, k;
	mat85 ans;
	for(i=0; i<8; i++){
		for(j=0; j<5; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<7; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat87 * mat76 = mat86
inline mat86 operator*(mat87 obj1, mat76 obj2)
{
	int i, j, k;
	mat86 ans;
	for(i=0; i<8; i++){
		for(j=0; j<6; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<7; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat87 * mat77 = mat87
inline mat87 operator*(mat87 obj1, mat77 obj2)
{
	int i, j, k;
	mat87 ans;
	for(i=0; i<8; i++){
		for(j=0; j<7; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<7; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat87 * mat78 = mat88
inline mat88 operator*(mat87 obj1, mat78 obj2)
{
	int i, j, k;
	mat88 ans;
	for(i=0; i<8; i++){
		for(j=0; j<8; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<7; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat87 * mat79 = mat89
inline mat89 operator*(mat87 obj1, mat79 obj2)
{
	int i, j, k;
	mat89 ans;
	for(i=0; i<8; i++){
		for(j=0; j<9; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<7; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat88 * mat82 = mat82
inline mat82 operator*(mat88 obj1, mat82 obj2)
{
	int i, j, k;
	mat82 ans;
	for(i=0; i<8; i++){
		for(j=0; j<2; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<8; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat88 * mat83 = mat83
inline mat83 operator*(mat88 obj1, mat83 obj2)
{
	int i, j, k;
	mat83 ans;
	for(i=0; i<8; i++){
		for(j=0; j<3; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<8; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat88 * mat84 = mat84
inline mat84 operator*(mat88 obj1, mat84 obj2)
{
	int i, j, k;
	mat84 ans;
	for(i=0; i<8; i++){
		for(j=0; j<4; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<8; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat88 * mat85 = mat85
inline mat85 operator*(mat88 obj1, mat85 obj2)
{
	int i, j, k;
	mat85 ans;
	for(i=0; i<8; i++){
		for(j=0; j<5; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<8; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat88 * mat86 = mat86
inline mat86 operator*(mat88 obj1, mat86 obj2)
{
	int i, j, k;
	mat86 ans;
	for(i=0; i<8; i++){
		for(j=0; j<6; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<8; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat88 * mat87 = mat87
inline mat87 operator*(mat88 obj1, mat87 obj2)
{
	int i, j, k;
	mat87 ans;
	for(i=0; i<8; i++){
		for(j=0; j<7; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<8; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat88 * mat88 = mat88
inline mat88 operator*(mat88 obj1, mat88 obj2)
{
	int i, j, k;
	mat88 ans;
	for(i=0; i<8; i++){
		for(j=0; j<8; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<8; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat88 * mat89 = mat89
inline mat89 operator*(mat88 obj1, mat89 obj2)
{
	int i, j, k;
	mat89 ans;
	for(i=0; i<8; i++){
		for(j=0; j<9; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<8; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat89 * mat92 = mat82
inline mat82 operator*(mat89 obj1, mat92 obj2)
{
	int i, j, k;
	mat82 ans;
	for(i=0; i<8; i++){
		for(j=0; j<2; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<9; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat89 * mat93 = mat83
inline mat83 operator*(mat89 obj1, mat93 obj2)
{
	int i, j, k;
	mat83 ans;
	for(i=0; i<8; i++){
		for(j=0; j<3; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<9; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat89 * mat94 = mat84
inline mat84 operator*(mat89 obj1, mat94 obj2)
{
	int i, j, k;
	mat84 ans;
	for(i=0; i<8; i++){
		for(j=0; j<4; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<9; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat89 * mat95 = mat85
inline mat85 operator*(mat89 obj1, mat95 obj2)
{
	int i, j, k;
	mat85 ans;
	for(i=0; i<8; i++){
		for(j=0; j<5; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<9; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat89 * mat96 = mat86
inline mat86 operator*(mat89 obj1, mat96 obj2)
{
	int i, j, k;
	mat86 ans;
	for(i=0; i<8; i++){
		for(j=0; j<6; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<9; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat89 * mat97 = mat87
inline mat87 operator*(mat89 obj1, mat97 obj2)
{
	int i, j, k;
	mat87 ans;
	for(i=0; i<8; i++){
		for(j=0; j<7; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<9; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat89 * mat98 = mat88
inline mat88 operator*(mat89 obj1, mat98 obj2)
{
	int i, j, k;
	mat88 ans;
	for(i=0; i<8; i++){
		for(j=0; j<8; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<9; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat89 * mat99 = mat89
inline mat89 operator*(mat89 obj1, mat99 obj2)
{
	int i, j, k;
	mat89 ans;
	for(i=0; i<8; i++){
		for(j=0; j<9; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<9; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat92 * mat22 = mat92
inline mat92 operator*(mat92 obj1, mat22 obj2)
{
	int i, j, k;
	mat92 ans;
	for(i=0; i<9; i++){
		for(j=0; j<2; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<2; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat92 * mat23 = mat93
inline mat93 operator*(mat92 obj1, mat23 obj2)
{
	int i, j, k;
	mat93 ans;
	for(i=0; i<9; i++){
		for(j=0; j<3; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<2; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat92 * mat24 = mat94
inline mat94 operator*(mat92 obj1, mat24 obj2)
{
	int i, j, k;
	mat94 ans;
	for(i=0; i<9; i++){
		for(j=0; j<4; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<2; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat92 * mat25 = mat95
inline mat95 operator*(mat92 obj1, mat25 obj2)
{
	int i, j, k;
	mat95 ans;
	for(i=0; i<9; i++){
		for(j=0; j<5; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<2; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat92 * mat26 = mat96
inline mat96 operator*(mat92 obj1, mat26 obj2)
{
	int i, j, k;
	mat96 ans;
	for(i=0; i<9; i++){
		for(j=0; j<6; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<2; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat92 * mat27 = mat97
inline mat97 operator*(mat92 obj1, mat27 obj2)
{
	int i, j, k;
	mat97 ans;
	for(i=0; i<9; i++){
		for(j=0; j<7; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<2; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat92 * mat28 = mat98
inline mat98 operator*(mat92 obj1, mat28 obj2)
{
	int i, j, k;
	mat98 ans;
	for(i=0; i<9; i++){
		for(j=0; j<8; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<2; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat92 * mat29 = mat99
inline mat99 operator*(mat92 obj1, mat29 obj2)
{
	int i, j, k;
	mat99 ans;
	for(i=0; i<9; i++){
		for(j=0; j<9; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<2; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat93 * mat32 = mat92
inline mat92 operator*(mat93 obj1, mat32 obj2)
{
	int i, j, k;
	mat92 ans;
	for(i=0; i<9; i++){
		for(j=0; j<2; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<3; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat93 * mat33 = mat93
inline mat93 operator*(mat93 obj1, mat33 obj2)
{
	int i, j, k;
	mat93 ans;
	for(i=0; i<9; i++){
		for(j=0; j<3; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<3; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat93 * mat34 = mat94
inline mat94 operator*(mat93 obj1, mat34 obj2)
{
	int i, j, k;
	mat94 ans;
	for(i=0; i<9; i++){
		for(j=0; j<4; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<3; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat93 * mat35 = mat95
inline mat95 operator*(mat93 obj1, mat35 obj2)
{
	int i, j, k;
	mat95 ans;
	for(i=0; i<9; i++){
		for(j=0; j<5; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<3; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat93 * mat36 = mat96
inline mat96 operator*(mat93 obj1, mat36 obj2)
{
	int i, j, k;
	mat96 ans;
	for(i=0; i<9; i++){
		for(j=0; j<6; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<3; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat93 * mat37 = mat97
inline mat97 operator*(mat93 obj1, mat37 obj2)
{
	int i, j, k;
	mat97 ans;
	for(i=0; i<9; i++){
		for(j=0; j<7; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<3; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat93 * mat38 = mat98
inline mat98 operator*(mat93 obj1, mat38 obj2)
{
	int i, j, k;
	mat98 ans;
	for(i=0; i<9; i++){
		for(j=0; j<8; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<3; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat93 * mat39 = mat99
inline mat99 operator*(mat93 obj1, mat39 obj2)
{
	int i, j, k;
	mat99 ans;
	for(i=0; i<9; i++){
		for(j=0; j<9; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<3; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat94 * mat42 = mat92
inline mat92 operator*(mat94 obj1, mat42 obj2)
{
	int i, j, k;
	mat92 ans;
	for(i=0; i<9; i++){
		for(j=0; j<2; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<4; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat94 * mat43 = mat93
inline mat93 operator*(mat94 obj1, mat43 obj2)
{
	int i, j, k;
	mat93 ans;
	for(i=0; i<9; i++){
		for(j=0; j<3; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<4; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat94 * mat44 = mat94
inline mat94 operator*(mat94 obj1, mat44 obj2)
{
	int i, j, k;
	mat94 ans;
	for(i=0; i<9; i++){
		for(j=0; j<4; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<4; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat94 * mat45 = mat95
inline mat95 operator*(mat94 obj1, mat45 obj2)
{
	int i, j, k;
	mat95 ans;
	for(i=0; i<9; i++){
		for(j=0; j<5; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<4; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat94 * mat46 = mat96
inline mat96 operator*(mat94 obj1, mat46 obj2)
{
	int i, j, k;
	mat96 ans;
	for(i=0; i<9; i++){
		for(j=0; j<6; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<4; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat94 * mat47 = mat97
inline mat97 operator*(mat94 obj1, mat47 obj2)
{
	int i, j, k;
	mat97 ans;
	for(i=0; i<9; i++){
		for(j=0; j<7; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<4; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat94 * mat48 = mat98
inline mat98 operator*(mat94 obj1, mat48 obj2)
{
	int i, j, k;
	mat98 ans;
	for(i=0; i<9; i++){
		for(j=0; j<8; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<4; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat94 * mat49 = mat99
inline mat99 operator*(mat94 obj1, mat49 obj2)
{
	int i, j, k;
	mat99 ans;
	for(i=0; i<9; i++){
		for(j=0; j<9; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<4; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat95 * mat52 = mat92
inline mat92 operator*(mat95 obj1, mat52 obj2)
{
	int i, j, k;
	mat92 ans;
	for(i=0; i<9; i++){
		for(j=0; j<2; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<5; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat95 * mat53 = mat93
inline mat93 operator*(mat95 obj1, mat53 obj2)
{
	int i, j, k;
	mat93 ans;
	for(i=0; i<9; i++){
		for(j=0; j<3; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<5; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat95 * mat54 = mat94
inline mat94 operator*(mat95 obj1, mat54 obj2)
{
	int i, j, k;
	mat94 ans;
	for(i=0; i<9; i++){
		for(j=0; j<4; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<5; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat95 * mat55 = mat95
inline mat95 operator*(mat95 obj1, mat55 obj2)
{
	int i, j, k;
	mat95 ans;
	for(i=0; i<9; i++){
		for(j=0; j<5; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<5; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat95 * mat56 = mat96
inline mat96 operator*(mat95 obj1, mat56 obj2)
{
	int i, j, k;
	mat96 ans;
	for(i=0; i<9; i++){
		for(j=0; j<6; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<5; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat95 * mat57 = mat97
inline mat97 operator*(mat95 obj1, mat57 obj2)
{
	int i, j, k;
	mat97 ans;
	for(i=0; i<9; i++){
		for(j=0; j<7; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<5; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat95 * mat58 = mat98
inline mat98 operator*(mat95 obj1, mat58 obj2)
{
	int i, j, k;
	mat98 ans;
	for(i=0; i<9; i++){
		for(j=0; j<8; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<5; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat95 * mat59 = mat99
inline mat99 operator*(mat95 obj1, mat59 obj2)
{
	int i, j, k;
	mat99 ans;
	for(i=0; i<9; i++){
		for(j=0; j<9; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<5; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat96 * mat62 = mat92
inline mat92 operator*(mat96 obj1, mat62 obj2)
{
	int i, j, k;
	mat92 ans;
	for(i=0; i<9; i++){
		for(j=0; j<2; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<6; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat96 * mat63 = mat93
inline mat93 operator*(mat96 obj1, mat63 obj2)
{
	int i, j, k;
	mat93 ans;
	for(i=0; i<9; i++){
		for(j=0; j<3; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<6; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat96 * mat64 = mat94
inline mat94 operator*(mat96 obj1, mat64 obj2)
{
	int i, j, k;
	mat94 ans;
	for(i=0; i<9; i++){
		for(j=0; j<4; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<6; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat96 * mat65 = mat95
inline mat95 operator*(mat96 obj1, mat65 obj2)
{
	int i, j, k;
	mat95 ans;
	for(i=0; i<9; i++){
		for(j=0; j<5; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<6; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat96 * mat66 = mat96
inline mat96 operator*(mat96 obj1, mat66 obj2)
{
	int i, j, k;
	mat96 ans;
	for(i=0; i<9; i++){
		for(j=0; j<6; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<6; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat96 * mat67 = mat97
inline mat97 operator*(mat96 obj1, mat67 obj2)
{
	int i, j, k;
	mat97 ans;
	for(i=0; i<9; i++){
		for(j=0; j<7; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<6; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat96 * mat68 = mat98
inline mat98 operator*(mat96 obj1, mat68 obj2)
{
	int i, j, k;
	mat98 ans;
	for(i=0; i<9; i++){
		for(j=0; j<8; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<6; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat96 * mat69 = mat99
inline mat99 operator*(mat96 obj1, mat69 obj2)
{
	int i, j, k;
	mat99 ans;
	for(i=0; i<9; i++){
		for(j=0; j<9; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<6; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat97 * mat72 = mat92
inline mat92 operator*(mat97 obj1, mat72 obj2)
{
	int i, j, k;
	mat92 ans;
	for(i=0; i<9; i++){
		for(j=0; j<2; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<7; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat97 * mat73 = mat93
inline mat93 operator*(mat97 obj1, mat73 obj2)
{
	int i, j, k;
	mat93 ans;
	for(i=0; i<9; i++){
		for(j=0; j<3; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<7; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat97 * mat74 = mat94
inline mat94 operator*(mat97 obj1, mat74 obj2)
{
	int i, j, k;
	mat94 ans;
	for(i=0; i<9; i++){
		for(j=0; j<4; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<7; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat97 * mat75 = mat95
inline mat95 operator*(mat97 obj1, mat75 obj2)
{
	int i, j, k;
	mat95 ans;
	for(i=0; i<9; i++){
		for(j=0; j<5; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<7; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat97 * mat76 = mat96
inline mat96 operator*(mat97 obj1, mat76 obj2)
{
	int i, j, k;
	mat96 ans;
	for(i=0; i<9; i++){
		for(j=0; j<6; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<7; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat97 * mat77 = mat97
inline mat97 operator*(mat97 obj1, mat77 obj2)
{
	int i, j, k;
	mat97 ans;
	for(i=0; i<9; i++){
		for(j=0; j<7; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<7; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat97 * mat78 = mat98
inline mat98 operator*(mat97 obj1, mat78 obj2)
{
	int i, j, k;
	mat98 ans;
	for(i=0; i<9; i++){
		for(j=0; j<8; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<7; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat97 * mat79 = mat99
inline mat99 operator*(mat97 obj1, mat79 obj2)
{
	int i, j, k;
	mat99 ans;
	for(i=0; i<9; i++){
		for(j=0; j<9; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<7; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat98 * mat82 = mat92
inline mat92 operator*(mat98 obj1, mat82 obj2)
{
	int i, j, k;
	mat92 ans;
	for(i=0; i<9; i++){
		for(j=0; j<2; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<8; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat98 * mat83 = mat93
inline mat93 operator*(mat98 obj1, mat83 obj2)
{
	int i, j, k;
	mat93 ans;
	for(i=0; i<9; i++){
		for(j=0; j<3; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<8; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat98 * mat84 = mat94
inline mat94 operator*(mat98 obj1, mat84 obj2)
{
	int i, j, k;
	mat94 ans;
	for(i=0; i<9; i++){
		for(j=0; j<4; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<8; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat98 * mat85 = mat95
inline mat95 operator*(mat98 obj1, mat85 obj2)
{
	int i, j, k;
	mat95 ans;
	for(i=0; i<9; i++){
		for(j=0; j<5; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<8; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat98 * mat86 = mat96
inline mat96 operator*(mat98 obj1, mat86 obj2)
{
	int i, j, k;
	mat96 ans;
	for(i=0; i<9; i++){
		for(j=0; j<6; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<8; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat98 * mat87 = mat97
inline mat97 operator*(mat98 obj1, mat87 obj2)
{
	int i, j, k;
	mat97 ans;
	for(i=0; i<9; i++){
		for(j=0; j<7; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<8; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat98 * mat88 = mat98
inline mat98 operator*(mat98 obj1, mat88 obj2)
{
	int i, j, k;
	mat98 ans;
	for(i=0; i<9; i++){
		for(j=0; j<8; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<8; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat98 * mat89 = mat99
inline mat99 operator*(mat98 obj1, mat89 obj2)
{
	int i, j, k;
	mat99 ans;
	for(i=0; i<9; i++){
		for(j=0; j<9; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<8; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat99 * mat92 = mat92
inline mat92 operator*(mat99 obj1, mat92 obj2)
{
	int i, j, k;
	mat92 ans;
	for(i=0; i<9; i++){
		for(j=0; j<2; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<9; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat99 * mat93 = mat93
inline mat93 operator*(mat99 obj1, mat93 obj2)
{
	int i, j, k;
	mat93 ans;
	for(i=0; i<9; i++){
		for(j=0; j<3; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<9; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat99 * mat94 = mat94
inline mat94 operator*(mat99 obj1, mat94 obj2)
{
	int i, j, k;
	mat94 ans;
	for(i=0; i<9; i++){
		for(j=0; j<4; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<9; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat99 * mat95 = mat95
inline mat95 operator*(mat99 obj1, mat95 obj2)
{
	int i, j, k;
	mat95 ans;
	for(i=0; i<9; i++){
		for(j=0; j<5; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<9; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat99 * mat96 = mat96
inline mat96 operator*(mat99 obj1, mat96 obj2)
{
	int i, j, k;
	mat96 ans;
	for(i=0; i<9; i++){
		for(j=0; j<6; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<9; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat99 * mat97 = mat97
inline mat97 operator*(mat99 obj1, mat97 obj2)
{
	int i, j, k;
	mat97 ans;
	for(i=0; i<9; i++){
		for(j=0; j<7; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<9; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat99 * mat98 = mat98
inline mat98 operator*(mat99 obj1, mat98 obj2)
{
	int i, j, k;
	mat98 ans;
	for(i=0; i<9; i++){
		for(j=0; j<8; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<9; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

// mat99 * mat99 = mat99
inline mat99 operator*(mat99 obj1, mat99 obj2)
{
	int i, j, k;
	mat99 ans;
	for(i=0; i<9; i++){
		for(j=0; j<9; j++){
			ans.A[i][j] = 0.0;
			for(k=0; k<9; k++){
				ans.A[i][j] += obj1.A[i][k] * obj2.A[k][j];
			}
		}
	}
	return(ans);
}

#endif
